
factory_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001fda  0000206e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  008000a2  008000a2  000020b0  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00004200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002606  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d88  00000000  00000000  000069e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc3  00000000  00000000  0000776e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  00008534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bbf  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022ba  00000000  00000000  00009be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_1>
       8:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_2>
       c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_3>
      10:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_4>
      14:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_5>
      18:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_6>
      1c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_7>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__vector_8>
      24:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_9>
      28:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_10>
      2c:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_11>
      30:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_12>
      34:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_13>
      38:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_14>
      3c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_15>
      40:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_16>
      44:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_17>
      48:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_18>
      4c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_19>
      50:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
      8a:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
      92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
      94:	82 81       	ldd	r24, Z+2	; 0x02
      96:	88 23       	and	r24, r24
      98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
      9a:	8f 3f       	cpi	r24, 0xFF	; 255
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
      9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
      a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
      a2:	80 81       	ld	r24, Z
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
      a8:	81 30       	cpi	r24, 0x01	; 1
      aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
      b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
      b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
      b8:	9a b3       	in	r25, 0x1a	; 26
      ba:	81 81       	ldd	r24, Z+1	; 0x01
      bc:	80 95       	com	r24
      be:	89 23       	and	r24, r25
      c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
      c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
      c6:	97 b3       	in	r25, 0x17	; 23
      c8:	81 81       	ldd	r24, Z+1	; 0x01
      ca:	80 95       	com	r24
      cc:	89 23       	and	r24, r25
      ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
      d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
      d4:	94 b3       	in	r25, 0x14	; 20
      d6:	81 81       	ldd	r24, Z+1	; 0x01
      d8:	80 95       	com	r24
      da:	89 23       	and	r24, r25
      dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
      e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
      e2:	91 b3       	in	r25, 0x11	; 17
      e4:	81 81       	ldd	r24, Z+1	; 0x01
      e6:	80 95       	com	r24
      e8:	89 23       	and	r24, r25
      ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
      ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
      ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
      f0:	80 81       	ld	r24, Z
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
     102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
     104:	9a b3       	in	r25, 0x1a	; 26
     106:	81 81       	ldd	r24, Z+1	; 0x01
     108:	89 2b       	or	r24, r25
     10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
     10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
     110:	97 b3       	in	r25, 0x17	; 23
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	89 2b       	or	r24, r25
     116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
     11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
     11c:	94 b3       	in	r25, 0x14	; 20
     11e:	81 81       	ldd	r24, Z+1	; 0x01
     120:	89 2b       	or	r24, r25
     122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
     126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
     128:	91 b3       	in	r25, 0x11	; 17
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
     132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
     13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
     140:	44 23       	and	r20, r20
     142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
     144:	4f 3f       	cpi	r20, 0xFF	; 255
     146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
     14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
     154:	82 30       	cpi	r24, 0x02	; 2
     156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
     158:	83 30       	cpi	r24, 0x03	; 3
     15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
     15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
     15e:	8b b3       	in	r24, 0x1b	; 27
     160:	60 95       	com	r22
     162:	68 23       	and	r22, r24
     164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
     168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
     16a:	88 b3       	in	r24, 0x18	; 24
     16c:	60 95       	com	r22
     16e:	68 23       	and	r22, r24
     170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
     174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
     176:	85 b3       	in	r24, 0x15	; 21
     178:	60 95       	com	r22
     17a:	68 23       	and	r22, r24
     17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
     180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
     182:	82 b3       	in	r24, 0x12	; 18
     184:	60 95       	com	r22
     186:	68 23       	and	r22, r24
     188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
     18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
     19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
     1a0:	8b b3       	in	r24, 0x1b	; 27
     1a2:	68 2b       	or	r22, r24
     1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
     1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
     1aa:	88 b3       	in	r24, 0x18	; 24
     1ac:	68 2b       	or	r22, r24
     1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
     1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
     1b4:	85 b3       	in	r24, 0x15	; 21
     1b6:	68 2b       	or	r22, r24
     1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
     1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
     1be:	82 b3       	in	r24, 0x12	; 18
     1c0:	68 2b       	or	r22, r24
     1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
     1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
     1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     1d4:	fa 01       	movw	r30, r20

switch (GPIO)
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
     1de:	82 30       	cpi	r24, 0x02	; 2
     1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
     1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
     1e8:	89 b3       	in	r24, 0x19	; 25
     1ea:	68 23       	and	r22, r24
     1ec:	60 83       	st	Z, r22
	break;
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
     1f0:	86 b3       	in	r24, 0x16	; 22
     1f2:	68 23       	and	r22, r24
     1f4:	60 83       	st	Z, r22
	break;
     1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
     1f8:	83 b3       	in	r24, 0x13	; 19
     1fa:	68 23       	and	r22, r24
     1fc:	60 83       	st	Z, r22
	break;
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
     200:	80 b3       	in	r24, 0x10	; 16
     202:	68 23       	and	r22, r24
     204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 83       	st	Z, r24
}


}
     210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
     222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
     224:	8b b3       	in	r24, 0x1b	; 27
     226:	68 27       	eor	r22, r24
     228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
     22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
     22e:	88 b3       	in	r24, 0x18	; 24
     230:	68 27       	eor	r22, r24
     232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
     234:	80 e0       	ldi	r24, 0x00	; 0
		break;
     236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
     238:	85 b3       	in	r24, 0x15	; 21
     23a:	68 27       	eor	r22, r24
     23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
     240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
     242:	82 b3       	in	r24, 0x12	; 18
     244:	68 27       	eor	r22, r24
     246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
     248:	80 e0       	ldi	r24, 0x00	; 0
		break;
     24a:	08 95       	ret
		default:
		ret=E_NOK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
     24e:	08 95       	ret

00000250 <system_init>:

#include "motor.h"
#include "pushButton.h"
#include "SOS.h"
void system_init(void){	
SOS_Init (&TMU_Configuration);
     250:	85 e8       	ldi	r24, 0x85	; 133
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 8a 09 	call	0x1314	; 0x1314 <SOS_Init>
SOS_Create_Task(Task1,1,0,1);
     258:	8a e7       	ldi	r24, 0x7A	; 122
     25a:	9a e0       	ldi	r25, 0x0A	; 10
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SOS_Create_Task>
SOS_Create_Task(Task2,1,0,100);
     268:	8b e7       	ldi	r24, 0x7B	; 123
     26a:	9a e0       	ldi	r25, 0x0A	; 10
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	24 e6       	ldi	r18, 0x64	; 100
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SOS_Create_Task>
Icu_Init(&ICU_Configuration);
     278:	8c e6       	ldi	r24, 0x6C	; 108
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Icu_Init>
DIO_init(&ALL_Motor);
     280:	82 e7       	ldi	r24, 0x72	; 114
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
PORTB_DIR=0;
     288:	17 ba       	out	0x17, r1	; 23
Motor_Init(MOTOR_1|MOTOR_2);
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	0e 94 97 05 	call	0xb2e	; 0xb2e <Motor_Init>
Motor_Direction(MOTOR_1|MOTOR_2,MOTOR_FORWARD);
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Motor_Direction>
}
     298:	08 95       	ret

0000029a <main>:

int main(void)
{
  system_init();
     29a:	0e 94 28 01 	call	0x250	; 0x250 <system_init>
    while(1)
    {
	 SOS_Run();
     29e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SOS_Run>
     2a2:	fd cf       	rjmp	.-6      	; 0x29e <main+0x4>

000002a4 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	ec 01       	movw	r28, r24
	uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     2aa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     2ae:	88 81       	ld	r24, Y
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	41 f0       	breq	.+16     	; 0x2c4 <Icu_Init+0x20>
     2b4:	81 30       	cpi	r24, 0x01	; 1
     2b6:	18 f0       	brcs	.+6      	; 0x2be <Icu_Init+0x1a>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	49 f4       	brne	.+18     	; 0x2ce <Icu_Init+0x2a>
     2bc:	06 c0       	rjmp	.+12     	; 0x2ca <Icu_Init+0x26>
{
case ICU_CH0:
EX_interrupt_enable0();
     2be:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <EX_interrupt_enable0>
break;
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <Icu_Init+0x2a>
case ICU_CH1:
EX_interrupt_enable1();
     2c4:	0e 94 6f 02 	call	0x4de	; 0x4de <EX_interrupt_enable1>
break;
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <Icu_Init+0x2a>
case ICU_CH2:
EX_interrupt_enable2();
     2ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <EX_interrupt_enable2>
//INT2_external_interrupt=EXTI;
break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	51 f0       	breq	.+20     	; 0x2e8 <Icu_Init+0x44>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	18 f0       	brcs	.+6      	; 0x2de <Icu_Init+0x3a>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	89 f4       	brne	.+34     	; 0x2fe <Icu_Init+0x5a>
     2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <Icu_Init+0x52>
{
	case ICU_TIMER_CH0:
		//Enable Timer0
		TCCR0=0x05;
     2de:	85 e0       	ldi	r24, 0x05	; 5
     2e0:	83 bf       	out	0x33, r24	; 51
		TIMSK=0x01;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	89 bf       	out	0x39, r24	; 57
		break;
     2e6:	0b c0       	rjmp	.+22     	; 0x2fe <Icu_Init+0x5a>
	case ICU_TIMER_CH1:
	//Timer_Init(&Timer_Configuration1);
	TCCR1=0x0005;
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	9f bd       	out	0x2f, r25	; 47
     2ee:	8e bd       	out	0x2e, r24	; 46
	TIMSK=0x04;
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	89 bf       	out	0x39, r24	; 57
	break;
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <Icu_Init+0x5a>
	case ICU_TIMER_CH2:
		TCCR2=0x07;
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	85 bd       	out	0x25, r24	; 37
		TIMSK=0x04;
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	89 bf       	out	0x39, r24	; 57
		break;
}

return Ret;
}
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	49 f0       	breq	.+18     	; 0x320 <Icu_ReadTime+0x1a>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	18 f0       	brcs	.+6      	; 0x318 <Icu_ReadTime+0x12>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	71 f4       	brne	.+28     	; 0x332 <Icu_ReadTime+0x2c>
     316:	0a c0       	rjmp	.+20     	; 0x32c <Icu_ReadTime+0x26>
{
	case ICU_TIMER_CH0:
	TCCR0|=0x05;
     318:	83 b7       	in	r24, 0x33	; 51
     31a:	85 60       	ori	r24, 0x05	; 5
     31c:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
	break;
     31e:	09 c0       	rjmp	.+18     	; 0x332 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH1:
	TCCR1|=0x0005;
     320:	8e b5       	in	r24, 0x2e	; 46
     322:	9f b5       	in	r25, 0x2f	; 47
     324:	85 60       	ori	r24, 0x05	; 5
     326:	9f bd       	out	0x2f, r25	; 47
     328:	8e bd       	out	0x2e, r24	; 46
	Ret=E_OK;	
	break;
     32a:	03 c0       	rjmp	.+6      	; 0x332 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH2:
	TCCR2|=0x07;
     32c:	85 b5       	in	r24, 0x25	; 37
     32e:	87 60       	ori	r24, 0x07	; 7
     330:	85 bd       	out	0x25, r24	; 37
	default:
	Ret=E_NOK;
	break;
}  

switch(Icu_EdgeToEdge)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	01 f1       	breq	.+64     	; 0x376 <Icu_ReadTime+0x70>
     336:	61 30       	cpi	r22, 0x01	; 1
     338:	18 f0       	brcs	.+6      	; 0x340 <Icu_ReadTime+0x3a>
     33a:	62 30       	cpi	r22, 0x02	; 2
     33c:	d1 f5       	brne	.+116    	; 0x3b2 <Icu_ReadTime+0xac>
     33e:	2a c0       	rjmp	.+84     	; 0x394 <Icu_ReadTime+0x8e>
{
	case ICU_RISE_TO_RISE:
	*Icu_Time=Timer_High+Timer_Low;
     340:	80 91 a6 00 	lds	r24, 0x00A6
     344:	90 91 a7 00 	lds	r25, 0x00A7
     348:	a0 91 a8 00 	lds	r26, 0x00A8
     34c:	b0 91 a9 00 	lds	r27, 0x00A9
     350:	00 91 a2 00 	lds	r16, 0x00A2
     354:	10 91 a3 00 	lds	r17, 0x00A3
     358:	20 91 a4 00 	lds	r18, 0x00A4
     35c:	30 91 a5 00 	lds	r19, 0x00A5
     360:	80 0f       	add	r24, r16
     362:	91 1f       	adc	r25, r17
     364:	a2 1f       	adc	r26, r18
     366:	b3 1f       	adc	r27, r19
     368:	fa 01       	movw	r30, r20
     36a:	80 83       	st	Z, r24
     36c:	91 83       	std	Z+1, r25	; 0x01
     36e:	a2 83       	std	Z+2, r26	; 0x02
     370:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     372:	80 e0       	ldi	r24, 0x00	; 0
	break;
     374:	1f c0       	rjmp	.+62     	; 0x3b4 <Icu_ReadTime+0xae>
	case ICU_RISE_TO_FALL:
	*Icu_Time=Timer_High;
     376:	80 91 a6 00 	lds	r24, 0x00A6
     37a:	90 91 a7 00 	lds	r25, 0x00A7
     37e:	a0 91 a8 00 	lds	r26, 0x00A8
     382:	b0 91 a9 00 	lds	r27, 0x00A9
     386:	fa 01       	movw	r30, r20
     388:	80 83       	st	Z, r24
     38a:	91 83       	std	Z+1, r25	; 0x01
     38c:	a2 83       	std	Z+2, r26	; 0x02
     38e:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     390:	80 e0       	ldi	r24, 0x00	; 0
	break;
     392:	10 c0       	rjmp	.+32     	; 0x3b4 <Icu_ReadTime+0xae>
	case ICU_FALE_TO_RISE:
	*Icu_Time=Timer_Low;
     394:	80 91 a2 00 	lds	r24, 0x00A2
     398:	90 91 a3 00 	lds	r25, 0x00A3
     39c:	a0 91 a4 00 	lds	r26, 0x00A4
     3a0:	b0 91 a5 00 	lds	r27, 0x00A5
     3a4:	fa 01       	movw	r30, r20
     3a6:	80 83       	st	Z, r24
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	a2 83       	std	Z+2, r26	; 0x02
     3ac:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
     3ae:	80 e0       	ldi	r24, 0x00	; 0
	break;
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <Icu_ReadTime+0xae>
	
	default:
	Ret=E_NOK;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <EXTI>:
void EXTI(void)
{	u32_sgv_TimerVal=(uint32_t)TCNT0+((uint32_t)u8_ovf_happend*255);
     3ba:	cf 93       	push	r28
     3bc:	c2 b7       	in	r28, 0x32	; 50
     3be:	60 91 b2 00 	lds	r22, 0x00B2
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__mulsi3>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8c 0f       	add	r24, r28
     3da:	91 1d       	adc	r25, r1
     3dc:	a1 1d       	adc	r26, r1
     3de:	b1 1d       	adc	r27, r1
     3e0:	80 93 b3 00 	sts	0x00B3, r24
     3e4:	90 93 b4 00 	sts	0x00B4, r25
     3e8:	a0 93 b5 00 	sts	0x00B5, r26
     3ec:	b0 93 b6 00 	sts	0x00B6, r27
	u8_ovf_happend=0;
     3f0:	10 92 b2 00 	sts	0x00B2, r1
		if(READBIT(MCUCSR,6))
     3f4:	84 b7       	in	r24, 0x34	; 52
     3f6:	82 95       	swap	r24
     3f8:	86 95       	lsr	r24
     3fa:	86 95       	lsr	r24
     3fc:	83 70       	andi	r24, 0x03	; 3
     3fe:	80 ff       	sbrs	r24, 0
     400:	30 c0       	rjmp	.+96     	; 0x462 <EXTI+0xa8>
		{
		u32_Time_rising_edge=u32_sgv_TimerVal;
     402:	80 91 b3 00 	lds	r24, 0x00B3
     406:	90 91 b4 00 	lds	r25, 0x00B4
     40a:	a0 91 b5 00 	lds	r26, 0x00B5
     40e:	b0 91 b6 00 	lds	r27, 0x00B6
     412:	80 93 ae 00 	sts	0x00AE, r24
     416:	90 93 af 00 	sts	0x00AF, r25
     41a:	a0 93 b0 00 	sts	0x00B0, r26
     41e:	b0 93 b1 00 	sts	0x00B1, r27
		Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     422:	80 91 ae 00 	lds	r24, 0x00AE
     426:	90 91 af 00 	lds	r25, 0x00AF
     42a:	a0 91 b0 00 	lds	r26, 0x00B0
     42e:	b0 91 b1 00 	lds	r27, 0x00B1
     432:	40 91 aa 00 	lds	r20, 0x00AA
     436:	50 91 ab 00 	lds	r21, 0x00AB
     43a:	60 91 ac 00 	lds	r22, 0x00AC
     43e:	70 91 ad 00 	lds	r23, 0x00AD
     442:	84 1b       	sub	r24, r20
     444:	95 0b       	sbc	r25, r21
     446:	a6 0b       	sbc	r26, r22
     448:	b7 0b       	sbc	r27, r23
     44a:	80 93 a2 00 	sts	0x00A2, r24
     44e:	90 93 a3 00 	sts	0x00A3, r25
     452:	a0 93 a4 00 	sts	0x00A4, r26
     456:	b0 93 a5 00 	sts	0x00A5, r27
		/*****************************************/	
		CLEAR_BIT(MCUCSR,6);   /*Make it falling*/
     45a:	84 b7       	in	r24, 0x34	; 52
     45c:	8f 7b       	andi	r24, 0xBF	; 191
     45e:	84 bf       	out	0x34, r24	; 52
     460:	2f c0       	rjmp	.+94     	; 0x4c0 <EXTI+0x106>
		/***************************************/
		}else{
			u32_Time_faling_edge=u32_sgv_TimerVal;
     462:	80 91 b3 00 	lds	r24, 0x00B3
     466:	90 91 b4 00 	lds	r25, 0x00B4
     46a:	a0 91 b5 00 	lds	r26, 0x00B5
     46e:	b0 91 b6 00 	lds	r27, 0x00B6
     472:	80 93 aa 00 	sts	0x00AA, r24
     476:	90 93 ab 00 	sts	0x00AB, r25
     47a:	a0 93 ac 00 	sts	0x00AC, r26
     47e:	b0 93 ad 00 	sts	0x00AD, r27
			Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     482:	80 91 aa 00 	lds	r24, 0x00AA
     486:	90 91 ab 00 	lds	r25, 0x00AB
     48a:	a0 91 ac 00 	lds	r26, 0x00AC
     48e:	b0 91 ad 00 	lds	r27, 0x00AD
     492:	40 91 ae 00 	lds	r20, 0x00AE
     496:	50 91 af 00 	lds	r21, 0x00AF
     49a:	60 91 b0 00 	lds	r22, 0x00B0
     49e:	70 91 b1 00 	lds	r23, 0x00B1
     4a2:	84 1b       	sub	r24, r20
     4a4:	95 0b       	sbc	r25, r21
     4a6:	a6 0b       	sbc	r26, r22
     4a8:	b7 0b       	sbc	r27, r23
     4aa:	80 93 a6 00 	sts	0x00A6, r24
     4ae:	90 93 a7 00 	sts	0x00A7, r25
     4b2:	a0 93 a8 00 	sts	0x00A8, r26
     4b6:	b0 93 a9 00 	sts	0x00A9, r27
			/*********************************/	
			SET_BIT(MCUCSR,6);		/*Make it Rising*/
     4ba:	84 b7       	in	r24, 0x34	; 52
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	84 bf       	out	0x34, r24	; 52
			/********************************/
			}	
}
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     4c4:	8f b7       	in	r24, 0x3f	; 63
     4c6:	80 68       	ori	r24, 0x80	; 128
     4c8:	8f bf       	out	0x3f, r24	; 63
}
     4ca:	08 95       	ret

000004cc <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     4cc:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     4ce:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     4d0:	8b b7       	in	r24, 0x3b	; 59
     4d2:	80 62       	ori	r24, 0x20	; 32
     4d4:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     4d6:	84 b7       	in	r24, 0x34	; 52
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	84 bf       	out	0x34, r24	; 52
}
     4dc:	08 95       	ret

000004de <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     4de:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     4e0:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     4e2:	8b b7       	in	r24, 0x3b	; 59
     4e4:	80 68       	ori	r24, 0x80	; 128
     4e6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	84 60       	ori	r24, 0x04	; 4
     4ec:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     4ee:	85 b7       	in	r24, 0x35	; 53
     4f0:	87 7f       	andi	r24, 0xF7	; 247
     4f2:	85 bf       	out	0x35, r24	; 53
	
}
     4f4:	08 95       	ret

000004f6 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     4f6:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     4f8:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     4fa:	8b b7       	in	r24, 0x3b	; 59
     4fc:	80 64       	ori	r24, 0x40	; 64
     4fe:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     500:	85 b7       	in	r24, 0x35	; 53
     502:	81 60       	ori	r24, 0x01	; 1
     504:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     506:	85 b7       	in	r24, 0x35	; 53
     508:	8d 7f       	andi	r24, 0xFD	; 253
     50a:	85 bf       	out	0x35, r24	; 53
	
}
     50c:	08 95       	ret

0000050e <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     50e:	8f b7       	in	r24, 0x3f	; 63
     510:	8f 77       	andi	r24, 0x7F	; 127
     512:	8f bf       	out	0x3f, r24	; 63
}
     514:	08 95       	ret

00000516 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	2f 93       	push	r18
     522:	3f 93       	push	r19
     524:	4f 93       	push	r20
     526:	5f 93       	push	r21
     528:	6f 93       	push	r22
     52a:	7f 93       	push	r23
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
  INT0_external_interrupt();
     538:	e0 91 6c 01 	lds	r30, 0x016C
     53c:	f0 91 6d 01 	lds	r31, 0x016D
     540:	09 95       	icall
}
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	4f 93       	push	r20
     574:	5f 93       	push	r21
     576:	6f 93       	push	r22
     578:	7f 93       	push	r23
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
  INT1_external_interrupt();
     586:	e0 91 74 01 	lds	r30, 0x0174
     58a:	f0 91 75 01 	lds	r31, 0x0175
     58e:	09 95       	icall
}
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	7f 91       	pop	r23
     59e:	6f 91       	pop	r22
     5a0:	5f 91       	pop	r21
     5a2:	4f 91       	pop	r20
     5a4:	3f 91       	pop	r19
     5a6:	2f 91       	pop	r18
     5a8:	0f 90       	pop	r0
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0f 90       	pop	r0
     5ae:	1f 90       	pop	r1
     5b0:	18 95       	reti

000005b2 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     5b2:	1f 92       	push	r1
     5b4:	0f 92       	push	r0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	0f 92       	push	r0
     5ba:	11 24       	eor	r1, r1
     5bc:	2f 93       	push	r18
     5be:	3f 93       	push	r19
     5c0:	4f 93       	push	r20
     5c2:	5f 93       	push	r21
     5c4:	6f 93       	push	r22
     5c6:	7f 93       	push	r23
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
     5cc:	af 93       	push	r26
     5ce:	bf 93       	push	r27
     5d0:	ef 93       	push	r30
     5d2:	ff 93       	push	r31
  INT2_external_interrupt();
     5d4:	e0 91 70 00 	lds	r30, 0x0070
     5d8:	f0 91 71 00 	lds	r31, 0x0071
     5dc:	09 95       	icall
}
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
TIMER2COMP();
     622:	e0 91 7a 01 	lds	r30, 0x017A
     626:	f0 91 7b 01 	lds	r31, 0x017B
     62a:	09 95       	icall
}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	2f 93       	push	r18
     65a:	3f 93       	push	r19
     65c:	4f 93       	push	r20
     65e:	5f 93       	push	r21
     660:	6f 93       	push	r22
     662:	7f 93       	push	r23
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
  TIMER2OVF();
     670:	e0 91 5c 01 	lds	r30, 0x015C
     674:	f0 91 5d 01 	lds	r31, 0x015D
     678:	09 95       	icall
}
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
  TIMER1CAPT();
     6be:	e0 91 76 01 	lds	r30, 0x0176
     6c2:	f0 91 77 01 	lds	r31, 0x0177
     6c6:	09 95       	icall
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
TIMER1COMPA();
     70c:	e0 91 62 01 	lds	r30, 0x0162
     710:	f0 91 63 01 	lds	r31, 0x0163
     714:	09 95       	icall
}
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	bf 91       	pop	r27
     71c:	af 91       	pop	r26
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	7f 91       	pop	r23
     724:	6f 91       	pop	r22
     726:	5f 91       	pop	r21
     728:	4f 91       	pop	r20
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0f be       	out	0x3f, r0	; 63
     732:	0f 90       	pop	r0
     734:	1f 90       	pop	r1
     736:	18 95       	reti

00000738 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     738:	1f 92       	push	r1
     73a:	0f 92       	push	r0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	0f 92       	push	r0
     740:	11 24       	eor	r1, r1
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
  TIMER1COMPB();
     75a:	e0 91 60 01 	lds	r30, 0x0160
     75e:	f0 91 61 01 	lds	r31, 0x0161
     762:	09 95       	icall
}
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	bf 91       	pop	r27
     76a:	af 91       	pop	r26
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	7f 91       	pop	r23
     772:	6f 91       	pop	r22
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
  TIMER1OVF();
     7a8:	e0 91 78 01 	lds	r30, 0x0178
     7ac:	f0 91 79 01 	lds	r31, 0x0179
     7b0:	09 95       	icall
}
     7b2:	ff 91       	pop	r31
     7b4:	ef 91       	pop	r30
     7b6:	bf 91       	pop	r27
     7b8:	af 91       	pop	r26
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	7f 91       	pop	r23
     7c0:	6f 91       	pop	r22
     7c2:	5f 91       	pop	r21
     7c4:	4f 91       	pop	r20
     7c6:	3f 91       	pop	r19
     7c8:	2f 91       	pop	r18
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	2f 93       	push	r18
     7e0:	3f 93       	push	r19
     7e2:	4f 93       	push	r20
     7e4:	5f 93       	push	r21
     7e6:	6f 93       	push	r22
     7e8:	7f 93       	push	r23
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31

  TIMER0COMP();
     7f6:	e0 91 70 01 	lds	r30, 0x0170
     7fa:	f0 91 71 01 	lds	r31, 0x0171
     7fe:	09 95       	icall
}
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	bf 91       	pop	r27
     806:	af 91       	pop	r26
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	7f 91       	pop	r23
     80e:	6f 91       	pop	r22
     810:	5f 91       	pop	r21
     812:	4f 91       	pop	r20
     814:	3f 91       	pop	r19
     816:	2f 91       	pop	r18
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31

  TIMER0OVF_INT();
     844:	e0 91 6e 00 	lds	r30, 0x006E
     848:	f0 91 6f 00 	lds	r31, 0x006F
     84c:	09 95       	icall
}
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	7f 91       	pop	r23
     85c:	6f 91       	pop	r22
     85e:	5f 91       	pop	r21
     860:	4f 91       	pop	r20
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
  SPI_STC();
     892:	e0 91 64 01 	lds	r30, 0x0164
     896:	f0 91 65 01 	lds	r31, 0x0165
     89a:	09 95       	icall
}
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	bf 91       	pop	r27
     8a2:	af 91       	pop	r26
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	7f 91       	pop	r23
     8aa:	6f 91       	pop	r22
     8ac:	5f 91       	pop	r21
     8ae:	4f 91       	pop	r20
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
  USART_RXC();
     8e0:	e0 91 5a 01 	lds	r30, 0x015A
     8e4:	f0 91 5b 01 	lds	r31, 0x015B
     8e8:	09 95       	icall
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
  USART_UDRE();
     92e:	e0 91 72 01 	lds	r30, 0x0172
     932:	f0 91 73 01 	lds	r31, 0x0173
     936:	09 95       	icall
}
     938:	ff 91       	pop	r31
     93a:	ef 91       	pop	r30
     93c:	bf 91       	pop	r27
     93e:	af 91       	pop	r26
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	7f 91       	pop	r23
     946:	6f 91       	pop	r22
     948:	5f 91       	pop	r21
     94a:	4f 91       	pop	r20
     94c:	3f 91       	pop	r19
     94e:	2f 91       	pop	r18
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	4f 93       	push	r20
     96a:	5f 93       	push	r21
     96c:	6f 93       	push	r22
     96e:	7f 93       	push	r23
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
  USART_TXC();
     97c:	e0 91 6e 01 	lds	r30, 0x016E
     980:	f0 91 6f 01 	lds	r31, 0x016F
     984:	09 95       	icall
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
  ADC_INT();
     9ca:	e0 91 68 01 	lds	r30, 0x0168
     9ce:	f0 91 69 01 	lds	r31, 0x0169
     9d2:	09 95       	icall
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	ef 93       	push	r30
     a16:	ff 93       	push	r31
  EE_RDY();
     a18:	e0 91 6a 01 	lds	r30, 0x016A
     a1c:	f0 91 6b 01 	lds	r31, 0x016B
     a20:	09 95       	icall
}
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
  ANA_COMP();
     a66:	e0 91 66 01 	lds	r30, 0x0166
     a6a:	f0 91 67 01 	lds	r31, 0x0167
     a6e:	09 95       	icall
}
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
  TWI_I2C();
     ab4:	e0 91 58 01 	lds	r30, 0x0158
     ab8:	f0 91 59 01 	lds	r31, 0x0159
     abc:	09 95       	icall
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
  SPM_RDY();
     b02:	e0 91 5e 01 	lds	r30, 0x015E
     b06:	f0 91 5f 01 	lds	r31, 0x015F
     b0a:	09 95       	icall
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	79 f0       	breq	.+30     	; 0xb50 <Motor_Init+0x22>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	c9 f0       	breq	.+50     	; 0xb68 <Motor_Init+0x3a>
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	39 f5       	brne	.+78     	; 0xb88 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     b3a:	80 93 b7 00 	sts	0x00B7, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     b3e:	83 e8       	ldi	r24, 0x83	; 131
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 76 07 	call	0xeec	; 0xeec <Pwm_Init>
			Ret=DIO_init(&Motorone);
     b46:	88 e7       	ldi	r24, 0x78	; 120
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

			  break;
     b4e:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 93 b7 00 	sts	0x00B7, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     b56:	81 e8       	ldi	r24, 0x81	; 129
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 76 07 	call	0xeec	; 0xeec <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     b5e:	85 e7       	ldi	r24, 0x75	; 117
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     b66:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 93 b7 00 	sts	0x00B7, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     b6e:	83 e8       	ldi	r24, 0x83	; 131
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 76 07 	call	0xeec	; 0xeec <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     b76:	81 e8       	ldi	r24, 0x81	; 129
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 76 07 	call	0xeec	; 0xeec <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     b7e:	82 e7       	ldi	r24, 0x72	; 114
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     b86:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     b88:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     b8a:	08 95       	ret

00000b8c <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     b8c:	82 30       	cpi	r24, 0x02	; 2
     b8e:	79 f1       	breq	.+94     	; 0xbee <Motor_Direction+0x62>
     b90:	83 30       	cpi	r24, 0x03	; 3
     b92:	09 f4       	brne	.+2      	; 0xb96 <Motor_Direction+0xa>
     b94:	55 c0       	rjmp	.+170    	; 0xc40 <Motor_Direction+0xb4>
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	09 f0       	breq	.+2      	; 0xb9c <Motor_Direction+0x10>
     b9a:	99 c0       	rjmp	.+306    	; 0xcce <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     b9c:	61 30       	cpi	r22, 0x01	; 1
     b9e:	31 f0       	breq	.+12     	; 0xbac <Motor_Direction+0x20>
     ba0:	61 30       	cpi	r22, 0x01	; 1
     ba2:	d0 f0       	brcs	.+52     	; 0xbd8 <Motor_Direction+0x4c>
     ba4:	62 30       	cpi	r22, 0x02	; 2
     ba6:	09 f0       	breq	.+2      	; 0xbaa <Motor_Direction+0x1e>
     ba8:	94 c0       	rjmp	.+296    	; 0xcd2 <Motor_Direction+0x146>
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	64 e0       	ldi	r22, 0x04	; 4
     bb0:	4f ef       	ldi	r20, 0xFF	; 255
     bb2:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     bc0:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	68 e0       	ldi	r22, 0x08	; 8
     bc6:	4f ef       	ldi	r20, 0xFF	; 255
     bc8:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	64 e0       	ldi	r22, 0x04	; 4
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     bd6:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	64 e0       	ldi	r22, 0x04	; 4
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	68 e0       	ldi	r22, 0x08	; 8
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		break;}
     bec:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     bee:	61 30       	cpi	r22, 0x01	; 1
     bf0:	31 f0       	breq	.+12     	; 0xbfe <Motor_Direction+0x72>
     bf2:	61 30       	cpi	r22, 0x01	; 1
     bf4:	d0 f0       	brcs	.+52     	; 0xc2a <Motor_Direction+0x9e>
     bf6:	62 30       	cpi	r22, 0x02	; 2
     bf8:	09 f0       	breq	.+2      	; 0xbfc <Motor_Direction+0x70>
     bfa:	6d c0       	rjmp	.+218    	; 0xcd6 <Motor_Direction+0x14a>
     bfc:	0b c0       	rjmp	.+22     	; 0xc14 <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	4f ef       	ldi	r20, 0xFF	; 255
     c04:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	62 e0       	ldi	r22, 0x02	; 2
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  				break;
     c12:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	4f ef       	ldi	r20, 0xFF	; 255
     c1a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     c28:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     c3e:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     c40:	61 30       	cpi	r22, 0x01	; 1
     c42:	31 f0       	breq	.+12     	; 0xc50 <Motor_Direction+0xc4>
     c44:	61 30       	cpi	r22, 0x01	; 1
     c46:	70 f1       	brcs	.+92     	; 0xca4 <Motor_Direction+0x118>
     c48:	62 30       	cpi	r22, 0x02	; 2
     c4a:	09 f0       	breq	.+2      	; 0xc4e <Motor_Direction+0xc2>
     c4c:	46 c0       	rjmp	.+140    	; 0xcda <Motor_Direction+0x14e>
     c4e:	15 c0       	rjmp	.+42     	; 0xc7a <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	64 e0       	ldi	r22, 0x04	; 4
     c54:	4f ef       	ldi	r20, 0xFF	; 255
     c56:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	68 e0       	ldi	r22, 0x08	; 8
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	62 e0       	ldi	r22, 0x02	; 2
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	4f ef       	ldi	r20, 0xFF	; 255
     c74:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     c78:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	64 e0       	ldi	r22, 0x04	; 4
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	68 e0       	ldi	r22, 0x08	; 8
     c88:	4f ef       	ldi	r20, 0xFF	; 255
     c8a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	4f ef       	ldi	r20, 0xFF	; 255
     c94:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;	}
     ca2:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	64 e0       	ldi	r22, 0x04	; 4
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	68 e0       	ldi	r22, 0x08	; 8
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     ccc:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 95       	ret
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	08 95       	ret
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     cda:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     cdc:	08 95       	ret

00000cde <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	69 f0       	breq	.+26     	; 0xcfc <Motor_Start+0x1e>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	a9 f0       	breq	.+42     	; 0xd10 <Motor_Start+0x32>
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	f1 f4       	brne	.+60     	; 0xd26 <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     cea:	80 93 b8 00 	sts	0x00B8, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,31372);
     cee:	2c e8       	ldi	r18, 0x8C	; 140
     cf0:	3a e7       	ldi	r19, 0x7A	; 122
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
    break;
     cfa:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	80 93 b8 00 	sts	0x00B8, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     d02:	2c e8       	ldi	r18, 0x8C	; 140
     d04:	3a e7       	ldi	r19, 0x7A	; 122
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
    break;
     d0e:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	80 93 b8 00 	sts	0x00B8, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	2c e8       	ldi	r18, 0x8C	; 140
     d1a:	3a e7       	ldi	r19, 0x7A	; 122
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
    break;
     d24:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     d26:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     d28:	08 95       	ret

00000d2a <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	79 f0       	breq	.+30     	; 0xd4c <Motor_SpeedUpdate+0x22>
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	c1 f0       	breq	.+48     	; 0xd62 <Motor_SpeedUpdate+0x38>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	11 f5       	brne	.+68     	; 0xd7a <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     d36:	80 91 b7 00 	lds	r24, 0x00B7
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	01 f5       	brne	.+64     	; 0xd7e <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     d3e:	2e e1       	ldi	r18, 0x1E	; 30
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
     d4a:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     d4c:	80 91 b7 00 	lds	r24, 0x00B7
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	b9 f4       	brne	.+46     	; 0xd82 <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     d54:	2e e1       	ldi	r18, 0x1E	; 30
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
     d60:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     d62:	80 91 b7 00 	lds	r24, 0x00B7
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	71 f4       	brne	.+28     	; 0xd86 <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	2e e1       	ldi	r18, 0x1E	; 30
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
     d78:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     d86:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     d88:	08 95       	ret

00000d8a <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	19 f0       	breq	.+6      	; 0xd94 <Motor_Stop+0xa>
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	49 f4       	brne	.+18     	; 0xda4 <Motor_Stop+0x1a>
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 71 09 	call	0x12e2	; 0x12e2 <Pwm_Stop>
		break;
     d9a:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <Pwm_Stop>
		break;
     da2:	08 95       	ret
		default:
		Ret=E_NOK;
     da4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     da6:	08 95       	ret

00000da8 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     da8:	90 91 b7 00 	lds	r25, 0x00B7
     dac:	98 17       	cp	r25, r24
     dae:	21 f4       	brne	.+8      	; 0xdb8 <Motor_GetStatus+0x10>
		*Mot_status=1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	fb 01       	movw	r30, r22
     db4:	80 83       	st	Z, r24
     db6:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     db8:	fb 01       	movw	r30, r22
     dba:	10 82       	st	Z, r1
	 }
	 
 }
     dbc:	08 95       	ret

00000dbe <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
static uint8_t u8_Button_press[3];
static uint8_t u8_S_button_status[3];
switch(en_butotn_id)
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	c1 f0       	breq	.+48     	; 0xdf2 <pushButtonGetStatus+0x34>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <pushButtonGetStatus+0xe>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	d1 f5       	brne	.+116    	; 0xe3e <pushButtonGetStatus+0x80>
     dca:	26 c0       	rjmp	.+76     	; 0xe18 <pushButtonGetStatus+0x5a>
{
case BTN_0:
{DIO_Read(BTN_0_GPIO,BTN_0_BIT,&(u8_Button_press[0]));
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	49 eb       	ldi	r20, 0xB9	; 185
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[0]== Pressed)
     dd8:	80 91 b9 00 	lds	r24, 0x00B9
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	81 f5       	brne	.+96     	; 0xe40 <pushButtonGetStatus+0x82>
{ 
	(u8_S_button_status[0])++;
     de0:	90 91 bc 00 	lds	r25, 0x00BC
     de4:	9f 5f       	subi	r25, 0xFF	; 255
     de6:	90 93 bc 00 	sts	0x00BC, r25
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     dea:	95 36       	cpi	r25, 0x65	; 101
     dec:	70 f5       	brcc	.+92     	; 0xe4a <pushButtonGetStatus+0x8c>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_1:
{DIO_Read(BTN_1_GPIO,BTN_1_BIT,&(u8_Button_press[1]));
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	4a eb       	ldi	r20, 0xBA	; 186
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[1] == Pressed)
     dfe:	80 91 ba 00 	lds	r24, 0x00BA
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	f9 f4       	brne	.+62     	; 0xe44 <pushButtonGetStatus+0x86>
{
	(u8_S_button_status[0])++;
     e06:	90 91 bc 00 	lds	r25, 0x00BC
     e0a:	9f 5f       	subi	r25, 0xFF	; 255
     e0c:	90 93 bc 00 	sts	0x00BC, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     e10:	93 33       	cpi	r25, 0x33	; 51
     e12:	d8 f4       	brcc	.+54     	; 0xe4a <pushButtonGetStatus+0x8c>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_2:
{DIO_Read(BTN_2_GPIO,BTN_2_BIT,&(u8_Button_press[2]));
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	4b eb       	ldi	r20, 0xBB	; 187
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if((u8_Button_press[2])== Pressed)
     e24:	80 91 bb 00 	lds	r24, 0x00BB
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	71 f4       	brne	.+28     	; 0xe48 <pushButtonGetStatus+0x8a>
{	(u8_S_button_status[1])++;
     e2c:	90 91 bd 00 	lds	r25, 0x00BD
     e30:	9f 5f       	subi	r25, 0xFF	; 255
     e32:	90 93 bd 00 	sts	0x00BD, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     e36:	95 31       	cpi	r25, 0x15	; 21
     e38:	40 f4       	brcc	.+16     	; 0xe4a <pushButtonGetStatus+0x8c>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	08 95       	ret
	else {return Released;}
}else{return Released;}
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
return Pressed;
	else {return Released;}
}else{return Released;}
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[1]) > 20)
	return Pressed;
else {return Released;}
}else{return Released;}
     e48:	80 e0       	ldi	r24, 0x00	; 0


	}


}
     e4a:	08 95       	ret

00000e4c <pushButtonGetState>:
{
static uint8_t u8_state_of_Button;

static uint8_t com=0;
	
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com]))//pushButtonGetStatus(BTN_0)== Released)
     e4c:	40 91 bf 00 	lds	r20, 0x00BF
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	40 54       	subi	r20, 0x40	; 64
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     e5e:	88 23       	and	r24, r24
     e60:	81 f0       	breq	.+32     	; 0xe82 <pushButtonGetState+0x36>
{
	
	if (flag == 0)
     e62:	80 91 7b 00 	lds	r24, 0x007B
     e66:	88 23       	and	r24, r24
     e68:	41 f4       	brne	.+16     	; 0xe7a <pushButtonGetState+0x2e>
	{
	counter++;
     e6a:	80 91 24 01 	lds	r24, 0x0124
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 24 01 	sts	0x0124, r24
	flag = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	80 93 7b 00 	sts	0x007B, r24
	}
	counter2=0;
     e7a:	10 92 25 01 	sts	0x0125, r1
	flag2=0;
     e7e:	10 92 7c 00 	sts	0x007C, r1
}
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com])==0)//pushButtonGetStatus(BTN_0) == Pressed)
     e82:	40 91 bf 00 	lds	r20, 0x00BF
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	40 54       	subi	r20, 0x40	; 64
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     e94:	88 23       	and	r24, r24
     e96:	e9 f4       	brne	.+58     	; 0xed2 <pushButtonGetState+0x86>
{	
	if (counter<20)
     e98:	80 91 24 01 	lds	r24, 0x0124
     e9c:	84 31       	cpi	r24, 0x14	; 20
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <pushButtonGetState+0x5a>
	{
		ret_state = 0 ;
     ea0:	10 92 26 01 	sts	0x0126, r1
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <pushButtonGetState+0x74>
	}else if(counter >20 && counter<50)
     ea6:	98 2f       	mov	r25, r24
     ea8:	95 51       	subi	r25, 0x15	; 21
     eaa:	9d 31       	cpi	r25, 0x1D	; 29
     eac:	20 f4       	brcc	.+8      	; 0xeb6 <pushButtonGetState+0x6a>
	{
		ret_state=1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 26 01 	sts	0x0126, r24
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <pushButtonGetState+0x74>
	}else if(counter >50){
     eb6:	83 33       	cpi	r24, 0x33	; 51
     eb8:	18 f0       	brcs	.+6      	; 0xec0 <pushButtonGetState+0x74>
		ret_state=3;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	80 93 26 01 	sts	0x0126, r24
	}
		flag = 0;
     ec0:	10 92 7b 00 	sts	0x007B, r1
		counter2++;
     ec4:	80 91 25 01 	lds	r24, 0x0125
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	80 93 25 01 	sts	0x0125, r24
		counter=0;
     ece:	10 92 24 01 	sts	0x0124, r1
}
if (com<=100)
     ed2:	80 91 bf 00 	lds	r24, 0x00BF
     ed6:	85 36       	cpi	r24, 0x65	; 101
     ed8:	20 f4       	brcc	.+8      	; 0xee2 <pushButtonGetState+0x96>
{
	com++;
     eda:	8f 5f       	subi	r24, 0xFF	; 255
     edc:	80 93 bf 00 	sts	0x00BF, r24
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <pushButtonGetState+0x9a>
}else{
com=0;/*
     ee2:	10 92 bf 00 	sts	0x00BF, r1
//arr_u8_instant_state[com++]=counter;



return ret_state;
}/*
     ee6:	80 91 26 01 	lds	r24, 0x0126
     eea:	08 95       	ret

00000eec <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
     eec:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
     eee:	80 81       	ld	r24, Z
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	61 f0       	breq	.+24     	; 0xf0c <Pwm_Init+0x20>
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	28 f0       	brcs	.+10     	; 0xf02 <Pwm_Init+0x16>
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	81 f0       	breq	.+32     	; 0xf1c <Pwm_Init+0x30>
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	d9 f4       	brne	.+54     	; 0xf36 <Pwm_Init+0x4a>
     f00:	15 c0       	rjmp	.+42     	; 0xf2c <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     f02:	83 b7       	in	r24, 0x33	; 51
     f04:	88 66       	ori	r24, 0x68	; 104
     f06:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
     f08:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f0a:	16 c0       	rjmp	.+44     	; 0xf38 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
     f0c:	8e b5       	in	r24, 0x2e	; 46
     f0e:	9f b5       	in	r25, 0x2f	; 47
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	91 6a       	ori	r25, 0xA1	; 161
     f14:	9f bd       	out	0x2f, r25	; 47
     f16:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     f18:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
     f1c:	8e b5       	in	r24, 0x2e	; 46
     f1e:	9f b5       	in	r25, 0x2f	; 47
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	91 6a       	ori	r25, 0xA1	; 161
     f24:	9f bd       	out	0x2f, r25	; 47
     f26:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     f28:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
     f2c:	85 b5       	in	r24, 0x25	; 37
     f2e:	88 66       	ori	r24, 0x68	; 104
     f30:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
     f32:	80 e0       	ldi	r24, 0x00	; 0
			break;
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	90 93 27 01 	sts	0x0127, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
     f3e:	08 95       	ret

00000f40 <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	89 01       	movw	r16, r18
     f4e:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     f50:	0f 2e       	mov	r0, r31
     f52:	fe ea       	ldi	r31, 0xAE	; 174
     f54:	cf 2e       	mov	r12, r31
     f56:	f0 ef       	ldi	r31, 0xF0	; 240
     f58:	df 2e       	mov	r13, r31
     f5a:	ff ef       	ldi	r31, 0xFF	; 255
     f5c:	ef 2e       	mov	r14, r31
     f5e:	ff ef       	ldi	r31, 0xFF	; 255
     f60:	ff 2e       	mov	r15, r31
     f62:	f0 2d       	mov	r31, r0
     f64:	c0 0e       	add	r12, r16
     f66:	d1 1e       	adc	r13, r17
     f68:	e2 1e       	adc	r14, r18
     f6a:	f3 1e       	adc	r15, r19
     f6c:	9b e3       	ldi	r25, 0x3B	; 59
     f6e:	c9 16       	cp	r12, r25
     f70:	9b e6       	ldi	r25, 0x6B	; 107
     f72:	d9 06       	cpc	r13, r25
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	e9 06       	cpc	r14, r25
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	f9 06       	cpc	r15, r25
     f7c:	18 f4       	brcc	.+6      	; 0xf84 <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
     f7e:	10 92 27 01 	sts	0x0127, r1
     f82:	a2 c0       	rjmp	.+324    	; 0x10c8 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
     f84:	0f 2e       	mov	r0, r31
     f86:	fb e2       	ldi	r31, 0x2B	; 43
     f88:	cf 2e       	mov	r12, r31
     f8a:	fc ef       	ldi	r31, 0xFC	; 252
     f8c:	df 2e       	mov	r13, r31
     f8e:	ff ef       	ldi	r31, 0xFF	; 255
     f90:	ef 2e       	mov	r14, r31
     f92:	ff ef       	ldi	r31, 0xFF	; 255
     f94:	ff 2e       	mov	r15, r31
     f96:	f0 2d       	mov	r31, r0
     f98:	c0 0e       	add	r12, r16
     f9a:	d1 1e       	adc	r13, r17
     f9c:	e2 1e       	adc	r14, r18
     f9e:	f3 1e       	adc	r15, r19
     fa0:	9d e7       	ldi	r25, 0x7D	; 125
     fa2:	c9 16       	cp	r12, r25
     fa4:	9b e0       	ldi	r25, 0x0B	; 11
     fa6:	d9 06       	cpc	r13, r25
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	e9 06       	cpc	r14, r25
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	f9 06       	cpc	r15, r25
     fb0:	20 f4       	brcc	.+8      	; 0xfba <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	90 93 27 01 	sts	0x0127, r25
     fb8:	a5 c0       	rjmp	.+330    	; 0x1104 <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
     fba:	0f 2e       	mov	r0, r31
     fbc:	f5 e1       	ldi	r31, 0x15	; 21
     fbe:	cf 2e       	mov	r12, r31
     fc0:	fe ef       	ldi	r31, 0xFE	; 254
     fc2:	df 2e       	mov	r13, r31
     fc4:	ff ef       	ldi	r31, 0xFF	; 255
     fc6:	ef 2e       	mov	r14, r31
     fc8:	ff ef       	ldi	r31, 0xFF	; 255
     fca:	ff 2e       	mov	r15, r31
     fcc:	f0 2d       	mov	r31, r0
     fce:	c0 0e       	add	r12, r16
     fd0:	d1 1e       	adc	r13, r17
     fd2:	e2 1e       	adc	r14, r18
     fd4:	f3 1e       	adc	r15, r19
     fd6:	9a ee       	ldi	r25, 0xEA	; 234
     fd8:	c9 16       	cp	r12, r25
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	d9 06       	cpc	r13, r25
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	e9 06       	cpc	r14, r25
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	f9 06       	cpc	r15, r25
     fe6:	20 f4       	brcc	.+8      	; 0xff0 <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	90 93 27 01 	sts	0x0127, r25
     fee:	a1 c0       	rjmp	.+322    	; 0x1132 <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
     ff0:	0f 2e       	mov	r0, r31
     ff2:	fa e0       	ldi	r31, 0x0A	; 10
     ff4:	cf 2e       	mov	r12, r31
     ff6:	ff ef       	ldi	r31, 0xFF	; 255
     ff8:	df 2e       	mov	r13, r31
     ffa:	ff ef       	ldi	r31, 0xFF	; 255
     ffc:	ef 2e       	mov	r14, r31
     ffe:	ff ef       	ldi	r31, 0xFF	; 255
    1000:	ff 2e       	mov	r15, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	c0 0e       	add	r12, r16
    1006:	d1 1e       	adc	r13, r17
    1008:	e2 1e       	adc	r14, r18
    100a:	f3 1e       	adc	r15, r19
    100c:	95 ef       	ldi	r25, 0xF5	; 245
    100e:	c9 16       	cp	r12, r25
    1010:	d1 04       	cpc	r13, r1
    1012:	e1 04       	cpc	r14, r1
    1014:	f1 04       	cpc	r15, r1
    1016:	20 f4       	brcc	.+8      	; 0x1020 <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	90 93 27 01 	sts	0x0127, r25
    101e:	90 c0       	rjmp	.+288    	; 0x1140 <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
    1020:	0f 2e       	mov	r0, r31
    1022:	f5 e8       	ldi	r31, 0x85	; 133
    1024:	cf 2e       	mov	r12, r31
    1026:	ff ef       	ldi	r31, 0xFF	; 255
    1028:	df 2e       	mov	r13, r31
    102a:	ff ef       	ldi	r31, 0xFF	; 255
    102c:	ef 2e       	mov	r14, r31
    102e:	ff ef       	ldi	r31, 0xFF	; 255
    1030:	ff 2e       	mov	r15, r31
    1032:	f0 2d       	mov	r31, r0
    1034:	c0 0e       	add	r12, r16
    1036:	d1 1e       	adc	r13, r17
    1038:	e2 1e       	adc	r14, r18
    103a:	f3 1e       	adc	r15, r19
    103c:	9b e7       	ldi	r25, 0x7B	; 123
    103e:	c9 16       	cp	r12, r25
    1040:	d1 04       	cpc	r13, r1
    1042:	e1 04       	cpc	r14, r1
    1044:	f1 04       	cpc	r15, r1
    1046:	20 f4       	brcc	.+8      	; 0x1050 <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	90 93 27 01 	sts	0x0127, r25
    104e:	a5 c0       	rjmp	.+330    	; 0x119a <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
    1050:	0f 2e       	mov	r0, r31
    1052:	f0 ee       	ldi	r31, 0xE0	; 224
    1054:	cf 2e       	mov	r12, r31
    1056:	ff ef       	ldi	r31, 0xFF	; 255
    1058:	df 2e       	mov	r13, r31
    105a:	ff ef       	ldi	r31, 0xFF	; 255
    105c:	ef 2e       	mov	r14, r31
    105e:	ff ef       	ldi	r31, 0xFF	; 255
    1060:	ff 2e       	mov	r15, r31
    1062:	f0 2d       	mov	r31, r0
    1064:	c0 0e       	add	r12, r16
    1066:	d1 1e       	adc	r13, r17
    1068:	e2 1e       	adc	r14, r18
    106a:	f3 1e       	adc	r15, r19
    106c:	9b e5       	ldi	r25, 0x5B	; 91
    106e:	c9 16       	cp	r12, r25
    1070:	d1 04       	cpc	r13, r1
    1072:	e1 04       	cpc	r14, r1
    1074:	f1 04       	cpc	r15, r1
    1076:	20 f4       	brcc	.+8      	; 0x1080 <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	90 93 27 01 	sts	0x0127, r25
    107e:	77 c0       	rjmp	.+238    	; 0x116e <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
    1080:	01 50       	subi	r16, 0x01	; 1
    1082:	10 40       	sbci	r17, 0x00	; 0
    1084:	20 40       	sbci	r18, 0x00	; 0
    1086:	30 40       	sbci	r19, 0x00	; 0
    1088:	0f 31       	cpi	r16, 0x1F	; 31
    108a:	11 05       	cpc	r17, r1
    108c:	21 05       	cpc	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	20 f4       	brcc	.+8      	; 0x109a <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
    1092:	96 e0       	ldi	r25, 0x06	; 6
    1094:	90 93 27 01 	sts	0x0127, r25
    1098:	86 c0       	rjmp	.+268    	; 0x11a6 <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
    109a:	90 91 27 01 	lds	r25, 0x0127
    109e:	93 30       	cpi	r25, 0x03	; 3
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <Pwm_Start+0x164>
    10a2:	4e c0       	rjmp	.+156    	; 0x1140 <Pwm_Start+0x200>
    10a4:	94 30       	cpi	r25, 0x04	; 4
    10a6:	30 f4       	brcc	.+12     	; 0x10b4 <Pwm_Start+0x174>
    10a8:	91 30       	cpi	r25, 0x01	; 1
    10aa:	61 f1       	breq	.+88     	; 0x1104 <Pwm_Start+0x1c4>
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <Pwm_Start+0x172>
    10b0:	40 c0       	rjmp	.+128    	; 0x1132 <Pwm_Start+0x1f2>
    10b2:	0a c0       	rjmp	.+20     	; 0x10c8 <Pwm_Start+0x188>
    10b4:	95 30       	cpi	r25, 0x05	; 5
    10b6:	09 f4       	brne	.+2      	; 0x10ba <Pwm_Start+0x17a>
    10b8:	5a c0       	rjmp	.+180    	; 0x116e <Pwm_Start+0x22e>
    10ba:	95 30       	cpi	r25, 0x05	; 5
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <Pwm_Start+0x180>
    10be:	6d c0       	rjmp	.+218    	; 0x119a <Pwm_Start+0x25a>
    10c0:	96 30       	cpi	r25, 0x06	; 6
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <Pwm_Start+0x186>
    10c4:	8d c0       	rjmp	.+282    	; 0x11e0 <Pwm_Start+0x2a0>
    10c6:	6f c0       	rjmp	.+222    	; 0x11a6 <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <Pwm_Start+0x1a4>
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <Pwm_Start+0x19c>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <Pwm_Start+0x1b0>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	09 f0       	breq	.+2      	; 0x10da <Pwm_Start+0x19a>
    10d8:	83 c0       	rjmp	.+262    	; 0x11e0 <Pwm_Start+0x2a0>
    10da:	10 c0       	rjmp	.+32     	; 0x10fc <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
    10dc:	83 b7       	in	r24, 0x33	; 51
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    10e2:	88 c0       	rjmp	.+272    	; 0x11f4 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
    10e4:	8e b5       	in	r24, 0x2e	; 46
    10e6:	9f b5       	in	r25, 0x2f	; 47
    10e8:	81 60       	ori	r24, 0x01	; 1
    10ea:	9f bd       	out	0x2f, r25	; 47
    10ec:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
    10ee:	98 c0       	rjmp	.+304    	; 0x1220 <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    10f0:	8e b5       	in	r24, 0x2e	; 46
    10f2:	9f b5       	in	r25, 0x2f	; 47
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	9f bd       	out	0x2f, r25	; 47
    10f8:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    10fa:	ad c0       	rjmp	.+346    	; 0x1256 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
    10fc:	85 b5       	in	r24, 0x25	; 37
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1102:	c4 c0       	rjmp	.+392    	; 0x128c <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	18 f4       	brcc	.+6      	; 0x110e <Pwm_Start+0x1ce>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	48 f4       	brcc	.+18     	; 0x111e <Pwm_Start+0x1de>
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <Pwm_Start+0x1d6>
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	09 f0       	breq	.+2      	; 0x1114 <Pwm_Start+0x1d4>
    1112:	66 c0       	rjmp	.+204    	; 0x11e0 <Pwm_Start+0x2a0>
    1114:	0a c0       	rjmp	.+20     	; 0x112a <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
    1116:	83 b7       	in	r24, 0x33	; 51
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    111c:	6b c0       	rjmp	.+214    	; 0x11f4 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
    111e:	2e b5       	in	r18, 0x2e	; 46
    1120:	3f b5       	in	r19, 0x2f	; 47
    1122:	22 60       	ori	r18, 0x02	; 2
    1124:	3f bd       	out	0x2f, r19	; 47
    1126:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1128:	5b c0       	rjmp	.+182    	; 0x11e0 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
    112a:	85 b5       	in	r24, 0x25	; 37
    112c:	82 60       	ori	r24, 0x02	; 2
    112e:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
    1130:	ad c0       	rjmp	.+346    	; 0x128c <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	09 f0       	breq	.+2      	; 0x1138 <Pwm_Start+0x1f8>
    1136:	54 c0       	rjmp	.+168    	; 0x11e0 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
    1138:	85 b5       	in	r24, 0x25	; 37
    113a:	83 60       	ori	r24, 0x03	; 3
    113c:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    113e:	a6 c0       	rjmp	.+332    	; 0x128c <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	18 f4       	brcc	.+6      	; 0x114a <Pwm_Start+0x20a>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	48 f4       	brcc	.+18     	; 0x115a <Pwm_Start+0x21a>
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <Pwm_Start+0x212>
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	09 f0       	breq	.+2      	; 0x1150 <Pwm_Start+0x210>
    114e:	48 c0       	rjmp	.+144    	; 0x11e0 <Pwm_Start+0x2a0>
    1150:	0a c0       	rjmp	.+20     	; 0x1166 <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    1152:	83 b7       	in	r24, 0x33	; 51
    1154:	83 60       	ori	r24, 0x03	; 3
    1156:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1158:	4d c0       	rjmp	.+154    	; 0x11f4 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    115a:	2e b5       	in	r18, 0x2e	; 46
    115c:	3f b5       	in	r19, 0x2f	; 47
    115e:	23 60       	ori	r18, 0x03	; 3
    1160:	3f bd       	out	0x2f, r19	; 47
    1162:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1164:	3d c0       	rjmp	.+122    	; 0x11e0 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    1166:	85 b5       	in	r24, 0x25	; 37
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    116c:	8f c0       	rjmp	.+286    	; 0x128c <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	18 f4       	brcc	.+6      	; 0x1178 <Pwm_Start+0x238>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	40 f4       	brcc	.+16     	; 0x1186 <Pwm_Start+0x246>
    1176:	03 c0       	rjmp	.+6      	; 0x117e <Pwm_Start+0x23e>
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 f5       	brne	.+100    	; 0x11e0 <Pwm_Start+0x2a0>
    117c:	0a c0       	rjmp	.+20     	; 0x1192 <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    117e:	83 b7       	in	r24, 0x33	; 51
    1180:	83 60       	ori	r24, 0x03	; 3
    1182:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1184:	37 c0       	rjmp	.+110    	; 0x11f4 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    1186:	2e b5       	in	r18, 0x2e	; 46
    1188:	3f b5       	in	r19, 0x2f	; 47
    118a:	23 60       	ori	r18, 0x03	; 3
    118c:	3f bd       	out	0x2f, r19	; 47
    118e:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1190:	27 c0       	rjmp	.+78     	; 0x11e0 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    1192:	85 b5       	in	r24, 0x25	; 37
    1194:	84 60       	ori	r24, 0x04	; 4
    1196:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1198:	79 c0       	rjmp	.+242    	; 0x128c <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	09 f5       	brne	.+66     	; 0x11e0 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
    119e:	85 b5       	in	r24, 0x25	; 37
    11a0:	85 60       	ori	r24, 0x05	; 5
    11a2:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    11a4:	73 c0       	rjmp	.+230    	; 0x128c <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <Pwm_Start+0x280>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	28 f0       	brcs	.+10     	; 0x11b8 <Pwm_Start+0x278>
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	69 f0       	breq	.+26     	; 0x11cc <Pwm_Start+0x28c>
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	a9 f4       	brne	.+42     	; 0x11e0 <Pwm_Start+0x2a0>
    11b6:	10 c0       	rjmp	.+32     	; 0x11d8 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
    11b8:	83 b7       	in	r24, 0x33	; 51
    11ba:	85 60       	ori	r24, 0x05	; 5
    11bc:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    11be:	1a c0       	rjmp	.+52     	; 0x11f4 <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    11c0:	8e b5       	in	r24, 0x2e	; 46
    11c2:	9f b5       	in	r25, 0x2f	; 47
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	9f bd       	out	0x2f, r25	; 47
    11c8:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    11ca:	2a c0       	rjmp	.+84     	; 0x1220 <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
    11cc:	8e b5       	in	r24, 0x2e	; 46
    11ce:	9f b5       	in	r25, 0x2f	; 47
    11d0:	85 60       	ori	r24, 0x05	; 5
    11d2:	9f bd       	out	0x2f, r25	; 47
    11d4:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
    11d8:	85 b5       	in	r24, 0x25	; 37
    11da:	87 60       	ori	r24, 0x07	; 7
    11dc:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    11de:	56 c0       	rjmp	.+172    	; 0x128c <Pwm_Start+0x34c>

	
	
}

switch(Channel)
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	f1 f0       	breq	.+60     	; 0x1220 <Pwm_Start+0x2e0>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	30 f0       	brcs	.+12     	; 0x11f4 <Pwm_Start+0x2b4>
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	a9 f1       	breq	.+106    	; 0x1256 <Pwm_Start+0x316>
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <Pwm_Start+0x2b2>
    11f0:	63 c0       	rjmp	.+198    	; 0x12b8 <Pwm_Start+0x378>
    11f2:	4c c0       	rjmp	.+152    	; 0x128c <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__floatunsisf>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	48 ec       	ldi	r20, 0xC8	; 200
    1204:	52 e4       	ldi	r21, 0x42	; 66
    1206:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	53 e4       	ldi	r21, 0x43	; 67
    1212:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsf3>
    1216:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fixunssfsi>
			OCR0=pwm_time_on;
    121a:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
    121c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    121e:	4d c0       	rjmp	.+154    	; 0x12ba <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__floatunsisf>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	48 ec       	ldi	r20, 0xC8	; 200
    1230:	52 e4       	ldi	r21, 0x42	; 66
    1232:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4f e7       	ldi	r20, 0x7F	; 127
    123c:	53 e4       	ldi	r21, 0x43	; 67
    123e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsf3>
    1242:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    124a:	9b bd       	out	0x2b, r25	; 43
    124c:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    124e:	99 bd       	out	0x29, r25	; 41
    1250:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1252:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1254:	32 c0       	rjmp	.+100    	; 0x12ba <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__floatunsisf>
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	48 ec       	ldi	r20, 0xC8	; 200
    1266:	52 e4       	ldi	r21, 0x42	; 66
    1268:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	53 e4       	ldi	r21, 0x43	; 67
    1274:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsf3>
    1278:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1280:	9b bd       	out	0x2b, r25	; 43
    1282:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    1284:	99 bd       	out	0x29, r25	; 41
    1286:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
			break;
    128a:	17 c0       	rjmp	.+46     	; 0x12ba <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__floatunsisf>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	48 ec       	ldi	r20, 0xC8	; 200
    129c:	52 e4       	ldi	r21, 0x42	; 66
    129e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	53 e4       	ldi	r21, 0x43	; 67
    12aa:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsf3>
    12ae:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__fixunssfsi>
			OCR2=pwm_time_on;
    12b2:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	90 93 28 01 	sts	0x0128, r25
return Ret;
}
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

000012ce <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    12ce:	90 91 28 01 	lds	r25, 0x0128
    12d2:	91 30       	cpi	r25, 0x01	; 1
    12d4:	21 f4       	brne	.+8      	; 0x12de <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    12d6:	0e 94 a0 07 	call	0xf40	; 0xf40 <Pwm_Start>
Ret=E_OK;
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret
}else{Ret=E_NOK;}
    12de:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    12e0:	08 95       	ret

000012e2 <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	18 f4       	brcc	.+6      	; 0x12ec <Pwm_Stop+0xa>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	48 f4       	brcc	.+18     	; 0x12fc <Pwm_Stop+0x1a>
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <Pwm_Stop+0x10>
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	81 f4       	brne	.+32     	; 0x1310 <Pwm_Stop+0x2e>
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    12f2:	83 b7       	in	r24, 0x33	; 51
    12f4:	88 7f       	andi	r24, 0xF8	; 248
    12f6:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    12f8:	80 e0       	ldi	r24, 0x00	; 0
	break;
    12fa:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    12fc:	83 b7       	in	r24, 0x33	; 51
    12fe:	88 7f       	andi	r24, 0xF8	; 248
    1300:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    1302:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1304:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    1306:	85 b5       	in	r24, 0x25	; 37
    1308:	88 7f       	andi	r24, 0xF8	; 248
    130a:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    130c:	80 e0       	ldi	r24, 0x00	; 0
	break;
    130e:	08 95       	ret
	default:
	Ret=E_NOK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    1312:	08 95       	ret

00001314 <SOS_Init>:
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
    1320:	80 91 2b 01 	lds	r24, 0x012B
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 2b 01 	sts	0x012B, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    132a:	20 97       	sbiw	r28, 0x00	; 0
    132c:	11 f0       	breq	.+4      	; 0x1332 <SOS_Init+0x1e>
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <SOS_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1332:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
    1334:	00 23       	and	r16, r16
    1336:	19 f0       	breq	.+6      	; 0x133e <SOS_Init+0x2a>
    1338:	02 30       	cpi	r16, 0x02	; 2
    133a:	79 f4       	brne	.+30     	; 0x135a <SOS_Init+0x46>
    133c:	07 c0       	rjmp	.+14     	; 0x134c <SOS_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
    133e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
    1342:	83 e9       	ldi	r24, 0x93	; 147
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 90 0c 	call	0x1920	; 0x1920 <Timer_Init>
			
			
				break;
    134a:	08 c0       	rjmp	.+16     	; 0x135c <SOS_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
    134c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
    1350:	89 e9       	ldi	r24, 0x99	; 153
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 90 0c 	call	0x1920	; 0x1920 <Timer_Init>
			break;
    1358:	01 c0       	rjmp	.+2      	; 0x135c <SOS_Init+0x48>
	default:
			ret+=E_NOK;
    135a:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
    135c:	88 81       	ld	r24, Y
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	99 f4       	brne	.+38     	; 0x1388 <SOS_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
    1362:	00 23       	and	r16, r16
    1364:	19 f0       	breq	.+6      	; 0x136c <SOS_Init+0x58>
    1366:	02 30       	cpi	r16, 0x02	; 2
    1368:	69 f4       	brne	.+26     	; 0x1384 <SOS_Init+0x70>
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <SOS_Init+0x64>
		{
			case TIMER_CH0 :
		Timer_Start(TIMER_CH0,250);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	6a ef       	ldi	r22, 0xFA	; 250
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Timer_Start>
					//TCNT0=5;
					break;
    1376:	09 c0       	rjmp	.+18     	; 0x138a <SOS_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,14);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	6e e0       	ldi	r22, 0x0E	; 14
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Timer_Start>
					break;
    1382:	03 c0       	rjmp	.+6      	; 0x138a <SOS_Init+0x76>
			default:
				ret+=E_NOK;
    1384:	1f 5f       	subi	r17, 0xFF	; 255
					break;
    1386:	01 c0       	rjmp	.+2      	; 0x138a <SOS_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
    1388:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
    138a:	81 2f       	mov	r24, r17
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
    1396:	80 91 2b 01 	lds	r24, 0x012B
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	41 f4       	brne	.+16     	; 0x13ae <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
    139e:	87 e8       	ldi	r24, 0x87	; 135
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 90 0c 	call	0x1920	; 0x1920 <Timer_Init>

	u8_Is_Intialized=0;
    13a6:	10 92 2b 01 	sts	0x012B, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	10 f0       	brcs	.+4      	; 0x13b6 <TMU_DeInit+0x20>
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	08 95       	ret
	else{
	ret=E_NOK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
    13b8:	08 95       	ret

000013ba <SOS_Create_Task>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
  	*/
	if(u8_Is_Intialized == 1)
    13ba:	50 91 2b 01 	lds	r21, 0x012B
    13be:	51 30       	cpi	r21, 0x01	; 1
    13c0:	99 f4       	brne	.+38     	; 0x13e8 <SOS_Create_Task+0x2e>
	{
		
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
    13c2:	e4 2f       	mov	r30, r20
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	e2 58       	subi	r30, 0x82	; 130
    13d4:	fe 4f       	sbci	r31, 0xFE	; 254
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
    13da:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
    13dc:	34 83       	std	Z+4, r19	; 0x04
    13de:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	82 83       	std	Z+2, r24	; 0x02
	
return ret;	
}

ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
    13e8:	52 30       	cpi	r21, 0x02	; 2
    13ea:	10 f0       	brcs	.+4      	; 0x13f0 <SOS_Create_Task+0x36>
    13ec:	86 e0       	ldi	r24, 0x06	; 6
    13ee:	08 95       	ret
		ret+=NOT_INIT;
    13f0:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
    13f2:	08 95       	ret

000013f4 <SOS_Run>:

ERROR_STATUS SOS_Run(void)
{	uint8_t ret=E_OK;
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	*//***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
    13f8:	80 91 29 01 	lds	r24, 0x0129
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <SOS_Run+0xe>
    1400:	65 c0       	rjmp	.+202    	; 0x14cc <SOS_Run+0xd8>
{	u8Excution_to_be_done=0;
    1402:	10 92 29 01 	sts	0x0129, r1

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1406:	10 92 2a 01 	sts	0x012A, r1
    140a:	20 e0       	ldi	r18, 0x00	; 0
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
*/
/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if((Buffer_Array[u8_FUN_index]).u8_flag_is_stopped==0){ret=E_OK;}
    140c:	ce e7       	ldi	r28, 0x7E	; 126
    140e:	d1 e0       	ldi	r29, 0x01	; 1
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	ec 0f       	add	r30, r28
    1422:	fd 1f       	adc	r31, r29
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <SOS_Run+0x38>
    142a:	48 c0       	rjmp	.+144    	; 0x14bc <SOS_Run+0xc8>
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
    142c:	f9 01       	movw	r30, r18
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	ec 0f       	add	r30, r28
    143c:	fd 1f       	adc	r31, r29
    143e:	86 81       	ldd	r24, Z+6	; 0x06
    1440:	97 81       	ldd	r25, Z+7	; 0x07
    1442:	ac 01       	movw	r20, r24
    1444:	4f 5f       	subi	r20, 0xFF	; 255
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	57 83       	std	Z+7, r21	; 0x07
    144a:	46 83       	std	Z+6, r20	; 0x06
	/*make the flag down*/
							
			
/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	94 81       	ldd	r25, Z+4	; 0x04
    1450:	48 17       	cp	r20, r24
    1452:	59 07       	cpc	r21, r25
    1454:	d1 f4       	brne	.+52     	; 0x148a <SOS_Run+0x96>
	{
		((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
    1456:	f9 01       	movw	r30, r18
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	ec 0f       	add	r30, r28
    1466:	fd 1f       	adc	r31, r29
    1468:	01 90       	ld	r0, Z+
    146a:	f0 81       	ld	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
    1470:	e0 91 2a 01 	lds	r30, 0x012A
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	ec 0f       	add	r30, r28
    1484:	fd 1f       	adc	r31, r29
    1486:	17 82       	std	Z+7, r1	; 0x07
    1488:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if((Buffer_Array[u8_FUN_index]).preodic==0)
    148a:	80 91 2a 01 	lds	r24, 0x012A
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	fc 01       	movw	r30, r24
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ec 0f       	add	r30, r28
    14a0:	fd 1f       	adc	r31, r29
    14a2:	25 81       	ldd	r18, Z+5	; 0x05
    14a4:	22 23       	and	r18, r18
    14a6:	51 f4       	brne	.+20     	; 0x14bc <SOS_Run+0xc8>
	{
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;	
    14a8:	fc 01       	movw	r30, r24
    14aa:	ee 0f       	add	r30, r30
    14ac:	ff 1f       	adc	r31, r31
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	ec 0f       	add	r30, r28
    14b8:	fd 1f       	adc	r31, r29
    14ba:	12 82       	std	Z+2, r1	; 0x02
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
{	u8Excution_to_be_done=0;

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    14bc:	20 91 2a 01 	lds	r18, 0x012A
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	20 93 2a 01 	sts	0x012A, r18
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <SOS_Run+0xd8>
    14ca:	a2 cf       	rjmp	.-188    	; 0x1410 <SOS_Run+0x1c>

		}		
	}
}	
return ret;
}
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
    14d4:	e8 2f       	mov	r30, r24
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e2 58       	subi	r30, 0x82	; 130
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	12 82       	std	Z+2, r1	; 0x02
}
    14ea:	08 95       	ret

000014ec <timer_interrupt>:
}
*/

void timer_interrupt(void)
{
	u8Excution_to_be_done =1;	
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 29 01 	sts	0x0129, r24
    14f2:	08 95       	ret

000014f4 <Task1>:
	u8_motor_state=0;}
	

}*/
/*two times routine*/
}
    14f4:	08 95       	ret

000014f6 <Task2>:

static uint32_t u32l_Time[9];
void Task2(void)
{static uint8_t u8_Co;
		static uint8_t u8_STATE;
		if (u8_Co < 9)
    14f6:	40 91 2d 01 	lds	r20, 0x012D
    14fa:	49 30       	cpi	r20, 0x09	; 9
    14fc:	58 f5       	brcc	.+86     	; 0x1554 <Task2+0x5e>
		{
				Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_RISE,&u32l_Time[u8_Co]);
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	42 5d       	subi	r20, 0xD2	; 210
    150a:	5e 4f       	sbci	r21, 0xFE	; 254
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	0e 94 83 01 	call	0x306	; 0x306 <Icu_ReadTime>
						Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&u32l_Time[u8_Co+1]);
    1514:	40 91 2d 01 	lds	r20, 0x012D
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	44 0f       	add	r20, r20
    1520:	55 1f       	adc	r21, r21
    1522:	4e 5c       	subi	r20, 0xCE	; 206
    1524:	5e 4f       	sbci	r21, 0xFE	; 254
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	0e 94 83 01 	call	0x306	; 0x306 <Icu_ReadTime>
								Icu_ReadTime(ICU_TIMER_CH0,ICU_FALE_TO_RISE,&u32l_Time[u8_Co+2]);
    152e:	40 91 2d 01 	lds	r20, 0x012D
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	44 0f       	add	r20, r20
    1536:	55 1f       	adc	r21, r21
    1538:	44 0f       	add	r20, r20
    153a:	55 1f       	adc	r21, r21
    153c:	4a 5c       	subi	r20, 0xCA	; 202
    153e:	5e 4f       	sbci	r21, 0xFE	; 254
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	0e 94 83 01 	call	0x306	; 0x306 <Icu_ReadTime>
								u8_Co += 3;
    1548:	80 91 2d 01 	lds	r24, 0x012D
    154c:	8d 5f       	subi	r24, 0xFD	; 253
    154e:	80 93 2d 01 	sts	0x012D, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <Task2+0x62>
				
		}else{u8_Co=0;}
    1554:	10 92 2d 01 	sts	0x012D, r1
		

	if(u32l_Time[0] >= 10 && u32l_Time[0] <=200 && u32l_Time[1] >= 10 && u32l_Time[1] <=200){
    1558:	80 91 2e 01 	lds	r24, 0x012E
    155c:	90 91 2f 01 	lds	r25, 0x012F
    1560:	a0 91 30 01 	lds	r26, 0x0130
    1564:	b0 91 31 01 	lds	r27, 0x0131
    1568:	0a 97       	sbiw	r24, 0x0a	; 10
    156a:	a1 09       	sbc	r26, r1
    156c:	b1 09       	sbc	r27, r1
    156e:	8f 3b       	cpi	r24, 0xBF	; 191
    1570:	91 05       	cpc	r25, r1
    1572:	a1 05       	cpc	r26, r1
    1574:	b1 05       	cpc	r27, r1
    1576:	b8 f4       	brcc	.+46     	; 0x15a6 <Task2+0xb0>
    1578:	80 91 32 01 	lds	r24, 0x0132
    157c:	90 91 33 01 	lds	r25, 0x0133
    1580:	a0 91 34 01 	lds	r26, 0x0134
    1584:	b0 91 35 01 	lds	r27, 0x0135
    1588:	8a 30       	cpi	r24, 0x0A	; 10
    158a:	91 05       	cpc	r25, r1
    158c:	a1 05       	cpc	r26, r1
    158e:	b1 05       	cpc	r27, r1
    1590:	50 f0       	brcs	.+20     	; 0x15a6 <Task2+0xb0>
    1592:	89 3c       	cpi	r24, 0xC9	; 201
    1594:	91 05       	cpc	r25, r1
    1596:	a1 05       	cpc	r26, r1
    1598:	b1 05       	cpc	r27, r1
    159a:	28 f4       	brcc	.+10     	; 0x15a6 <Task2+0xb0>
	u8_STATE=FIFTY_PRECENT_PWM;
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	80 93 52 01 	sts	0x0152, r24
		PORTC_DATA = 255;
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	85 bb       	out	0x15, r24	; 21
	}
	if(u8_STATE==FIFTY_PRECENT_PWM)
    15a6:	80 91 52 01 	lds	r24, 0x0152
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <Task2+0xc0>
	{
		Motor_Start(MOTOR_1,50);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	62 e3       	ldi	r22, 0x32	; 50
    15b2:	0e 94 6f 06 	call	0xcde	; 0xcde <Motor_Start>
    15b6:	08 95       	ret

000015b8 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
switch (Timer_CH_NO) {
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	51 f0       	breq	.+20     	; 0x15d0 <Timer_Stop+0x18>
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <Timer_Stop+0xe>
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 f4       	brne	.+36     	; 0x15e8 <Timer_Stop+0x30>
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <Timer_Stop+0x26>
case TIMER_CH0:
{
	TCCR0 &=0xF8;
    15c6:	83 b7       	in	r24, 0x33	; 51
    15c8:	88 7f       	andi	r24, 0xF8	; 248
    15ca:	83 bf       	out	0x33, r24	; 51
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
switch (Timer_CH_NO) {
case TIMER_CH0:
{
	TCCR0 &=0xF8;
	break;
    15ce:	08 95       	ret
}
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
    15d0:	8e b5       	in	r24, 0x2e	; 46
    15d2:	9f b5       	in	r25, 0x2f	; 47
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	9f bd       	out	0x2f, r25	; 47
    15d8:	8e bd       	out	0x2e, r24	; 46
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    15da:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
	
	
	break;
    15dc:	08 95       	ret
}
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
    15de:	85 b5       	in	r24, 0x25	; 37
    15e0:	88 7f       	andi	r24, 0xF8	; 248
    15e2:	85 bd       	out	0x25, r24	; 37
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
	
	
	break;
    15e6:	08 95       	ret
}
default :
	Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    15e8:	86 e3       	ldi	r24, 0x36	; 54
	break;
}

return Ret;

}
    15ea:	08 95       	ret

000015ec <Timer_Start>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	eb 01       	movw	r28, r22
	uint8_t Ret;
	switch (Timer_CH_NO) {
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <Timer_Start+0xc>
    15f6:	7c c0       	rjmp	.+248    	; 0x16f0 <Timer_Start+0x104>
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	20 f0       	brcs	.+8      	; 0x1604 <Timer_Start+0x18>
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	09 f0       	breq	.+2      	; 0x1602 <Timer_Start+0x16>
    1600:	69 c1       	rjmp	.+722    	; 0x18d4 <Timer_Start+0x2e8>
    1602:	ec c0       	rjmp	.+472    	; 0x17dc <Timer_Start+0x1f0>
	case TIMER_CH0:{
		if(u8_timer0_is_init == 1)
    1604:	80 91 55 01 	lds	r24, 0x0155
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <Timer_Start+0x22>
    160c:	6c c0       	rjmp	.+216    	; 0x16e6 <Timer_Start+0xfa>
		/***********************************************************************************************************************/
			{
		switch(prescaler_value){
    160e:	80 91 54 01 	lds	r24, 0x0154
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	91 f1       	breq	.+100    	; 0x167a <Timer_Start+0x8e>
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	30 f4       	brcc	.+12     	; 0x1626 <Timer_Start+0x3a>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	51 f0       	breq	.+20     	; 0x1632 <Timer_Start+0x46>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	09 f0       	breq	.+2      	; 0x1624 <Timer_Start+0x38>
    1622:	5a c1       	rjmp	.+692    	; 0x18d8 <Timer_Start+0x2ec>
    1624:	18 c0       	rjmp	.+48     	; 0x1656 <Timer_Start+0x6a>
    1626:	86 30       	cpi	r24, 0x06	; 6
    1628:	d1 f1       	breq	.+116    	; 0x169e <Timer_Start+0xb2>
    162a:	87 30       	cpi	r24, 0x07	; 7
    162c:	09 f0       	breq	.+2      	; 0x1630 <Timer_Start+0x44>
    162e:	54 c1       	rjmp	.+680    	; 0x18d8 <Timer_Start+0x2ec>
    1630:	48 c0       	rjmp	.+144    	; 0x16c2 <Timer_Start+0xd6>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX0){
    1632:	6f 3f       	cpi	r22, 0xFF	; 255
    1634:	71 05       	cpc	r23, r1
    1636:	08 f0       	brcs	.+2      	; 0x163a <Timer_Start+0x4e>
    1638:	51 c1       	rjmp	.+674    	; 0x18dc <Timer_Start+0x2f0>
				if(u8_sgv_TimerMode==1)
    163a:	80 91 53 01 	lds	r24, 0x0153
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	31 f4       	brne	.+12     	; 0x164e <Timer_Start+0x62>
				{
				Timer_Stop(TIMER_CH0);	
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR0 |=TIMER_PRESCALER_NO;
    1648:	83 b7       	in	r24, 0x33	; 51
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =	MAX0 - Timer_Count;
    164e:	c0 95       	com	r28
    1650:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	62 c1       	rjmp	.+708    	; 0x191a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX0){
    1656:	6f 3f       	cpi	r22, 0xFF	; 255
    1658:	71 05       	cpc	r23, r1
    165a:	08 f0       	brcs	.+2      	; 0x165e <Timer_Start+0x72>
    165c:	41 c1       	rjmp	.+642    	; 0x18e0 <Timer_Start+0x2f4>
				if(u8_sgv_TimerMode==1)
    165e:	80 91 53 01 	lds	r24, 0x0153
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	31 f4       	brne	.+12     	; 0x1672 <Timer_Start+0x86>
				{
				Timer_Stop(TIMER_CH0);	
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
    166c:	83 b7       	in	r24, 0x33	; 51
    166e:	82 60       	ori	r24, 0x02	; 2
    1670:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    1672:	c0 95       	com	r28
    1674:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	50 c1       	rjmp	.+672    	; 0x191a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX0){
    167a:	6f 3f       	cpi	r22, 0xFF	; 255
    167c:	71 05       	cpc	r23, r1
    167e:	08 f0       	brcs	.+2      	; 0x1682 <Timer_Start+0x96>
    1680:	31 c1       	rjmp	.+610    	; 0x18e4 <Timer_Start+0x2f8>
				if(u8_sgv_TimerMode==1)
    1682:	80 91 53 01 	lds	r24, 0x0153
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	31 f4       	brne	.+12     	; 0x1696 <Timer_Start+0xaa>
				{
				Timer_Stop(TIMER_CH0);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
    1690:	83 b7       	in	r24, 0x33	; 51
    1692:	83 60       	ori	r24, 0x03	; 3
    1694:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 = MAX0 - Timer_Count;
    1696:	c0 95       	com	r28
    1698:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	3e c1       	rjmp	.+636    	; 0x191a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX0){
    169e:	6f 3f       	cpi	r22, 0xFF	; 255
    16a0:	71 05       	cpc	r23, r1
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <Timer_Start+0xba>
    16a4:	21 c1       	rjmp	.+578    	; 0x18e8 <Timer_Start+0x2fc>
				if(u8_sgv_TimerMode==1)
    16a6:	80 91 53 01 	lds	r24, 0x0153
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	31 f4       	brne	.+12     	; 0x16ba <Timer_Start+0xce>
				{
				Timer_Stop(TIMER_CH0);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
    16b4:	83 b7       	in	r24, 0x33	; 51
    16b6:	84 60       	ori	r24, 0x04	; 4
    16b8:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    16ba:	c0 95       	com	r28
    16bc:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	2c c1       	rjmp	.+600    	; 0x191a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX0){
    16c2:	6f 3f       	cpi	r22, 0xFF	; 255
    16c4:	71 05       	cpc	r23, r1
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <Timer_Start+0xde>
    16c8:	11 c1       	rjmp	.+546    	; 0x18ec <Timer_Start+0x300>
				if(u8_sgv_TimerMode==1)
    16ca:	80 91 53 01 	lds	r24, 0x0153
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	31 f4       	brne	.+12     	; 0x16de <Timer_Start+0xf2>
				{	
				Timer_Stop(TIMER_CH0);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
    16d8:	83 b7       	in	r24, 0x33	; 51
    16da:	85 60       	ori	r24, 0x05	; 5
    16dc:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    16de:	c0 95       	com	r28
    16e0:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	1a c1       	rjmp	.+564    	; 0x191a <Timer_Start+0x32e>
		break;
		}
		else if(u8_timer0_is_init > 1){
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <Timer_Start+0x100>
    16ea:	02 c1       	rjmp	.+516    	; 0x18f0 <Timer_Start+0x304>
			Ret=MULTIPLE_INIT+TIMER_MODULE;
    16ec:	84 e2       	ldi	r24, 0x24	; 36
    16ee:	15 c1       	rjmp	.+554    	; 0x191a <Timer_Start+0x32e>
			Ret=NOT_INIT+TIMER_MODULE;
			break;
			}
	}
	case TIMER_CH1:{
			if(u8_timer1_is_init == 1){
    16f0:	80 91 56 01 	lds	r24, 0x0156
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <Timer_Start+0x10e>
    16f8:	6c c0       	rjmp	.+216    	; 0x17d2 <Timer_Start+0x1e6>
		switch(prescaler_value){
    16fa:	80 91 54 01 	lds	r24, 0x0154
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	91 f1       	breq	.+100    	; 0x1766 <Timer_Start+0x17a>
    1702:	85 30       	cpi	r24, 0x05	; 5
    1704:	30 f4       	brcc	.+12     	; 0x1712 <Timer_Start+0x126>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	51 f0       	breq	.+20     	; 0x171e <Timer_Start+0x132>
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	09 f0       	breq	.+2      	; 0x1710 <Timer_Start+0x124>
    170e:	f2 c0       	rjmp	.+484    	; 0x18f4 <Timer_Start+0x308>
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <Timer_Start+0x156>
    1712:	86 30       	cpi	r24, 0x06	; 6
    1714:	d1 f1       	breq	.+116    	; 0x178a <Timer_Start+0x19e>
    1716:	87 30       	cpi	r24, 0x07	; 7
    1718:	09 f0       	breq	.+2      	; 0x171c <Timer_Start+0x130>
    171a:	ec c0       	rjmp	.+472    	; 0x18f4 <Timer_Start+0x308>
    171c:	48 c0       	rjmp	.+144    	; 0x17ae <Timer_Start+0x1c2>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    171e:	80 91 53 01 	lds	r24, 0x0153
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	39 f4       	brne	.+14     	; 0x1734 <Timer_Start+0x148>
				{
				Timer_Stop(TIMER_CH1);
    1726:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR1 |=TIMER_PRESCALER_NO;
    172a:	8e b5       	in	r24, 0x2e	; 46
    172c:	9f b5       	in	r25, 0x2f	; 47
    172e:	81 60       	ori	r24, 0x01	; 1
    1730:	9f bd       	out	0x2f, r25	; 47
    1732:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    1734:	d0 95       	com	r29
    1736:	c1 95       	neg	r28
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	dd bd       	out	0x2d, r29	; 45
    173c:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    173e:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret=E_NOK;
			}
			break;
    1740:	ec c0       	rjmp	.+472    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1742:	80 91 53 01 	lds	r24, 0x0153
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	39 f4       	brne	.+14     	; 0x1758 <Timer_Start+0x16c>
							{
				Timer_Stop(TIMER_CH1);
    174a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
    174e:	8e b5       	in	r24, 0x2e	; 46
    1750:	9f b5       	in	r25, 0x2f	; 47
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	9f bd       	out	0x2f, r25	; 47
    1756:	8e bd       	out	0x2e, r24	; 46
							}
							
			TCNT1 =MAX1 - Timer_Count;
    1758:	d0 95       	com	r29
    175a:	c1 95       	neg	r28
    175c:	df 4f       	sbci	r29, 0xFF	; 255
    175e:	dd bd       	out	0x2d, r29	; 45
    1760:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1762:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    1764:	da c0       	rjmp	.+436    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1766:	80 91 53 01 	lds	r24, 0x0153
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	39 f4       	brne	.+14     	; 0x177c <Timer_Start+0x190>
			{
				Timer_Stop(TIMER_CH1);
    176e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
    1772:	8e b5       	in	r24, 0x2e	; 46
    1774:	9f b5       	in	r25, 0x2f	; 47
    1776:	83 60       	ori	r24, 0x03	; 3
    1778:	9f bd       	out	0x2f, r25	; 47
    177a:	8e bd       	out	0x2e, r24	; 46
			}
			TCNT1 =MAX1 - Timer_Count;
    177c:	d0 95       	com	r29
    177e:	c1 95       	neg	r28
    1780:	df 4f       	sbci	r29, 0xFF	; 255
    1782:	dd bd       	out	0x2d, r29	; 45
    1784:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1786:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    1788:	c8 c0       	rjmp	.+400    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    178a:	80 91 53 01 	lds	r24, 0x0153
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	39 f4       	brne	.+14     	; 0x17a0 <Timer_Start+0x1b4>
						{
				Timer_Stop(TIMER_CH1);
    1792:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
    1796:	8e b5       	in	r24, 0x2e	; 46
    1798:	9f b5       	in	r25, 0x2f	; 47
    179a:	84 60       	ori	r24, 0x04	; 4
    179c:	9f bd       	out	0x2f, r25	; 47
    179e:	8e bd       	out	0x2e, r24	; 46
						}
				TCNT1 =MAX1 - Timer_Count;
    17a0:	d0 95       	com	r29
    17a2:	c1 95       	neg	r28
    17a4:	df 4f       	sbci	r29, 0xFF	; 255
    17a6:	dd bd       	out	0x2d, r29	; 45
    17a8:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    17aa:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    17ac:	b6 c0       	rjmp	.+364    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    17ae:	80 91 53 01 	lds	r24, 0x0153
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	39 f4       	brne	.+14     	; 0x17c4 <Timer_Start+0x1d8>
				{
			Timer_Stop(TIMER_CH1);
    17b6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
    17ba:	8e b5       	in	r24, 0x2e	; 46
    17bc:	9f b5       	in	r25, 0x2f	; 47
    17be:	85 60       	ori	r24, 0x05	; 5
    17c0:	9f bd       	out	0x2f, r25	; 47
    17c2:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    17c4:	d0 95       	com	r29
    17c6:	c1 95       	neg	r28
    17c8:	df 4f       	sbci	r29, 0xFF	; 255
    17ca:	dd bd       	out	0x2d, r29	; 45
    17cc:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    17d0:	a4 c0       	rjmp	.+328    	; 0x191a <Timer_Start+0x32e>
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <Timer_Start+0x1ec>
    17d6:	90 c0       	rjmp	.+288    	; 0x18f8 <Timer_Start+0x30c>
    17d8:	84 e2       	ldi	r24, 0x24	; 36
    17da:	9f c0       	rjmp	.+318    	; 0x191a <Timer_Start+0x32e>
			break;}
			
	}
	case TIMER_CH2:
	{
		if(u8_timer2_is_init==1){
    17dc:	80 91 57 01 	lds	r24, 0x0157
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <Timer_Start+0x1fa>
    17e4:	73 c0       	rjmp	.+230    	; 0x18cc <Timer_Start+0x2e0>
		switch(prescaler_value){
    17e6:	80 91 54 01 	lds	r24, 0x0154
    17ea:	84 30       	cpi	r24, 0x04	; 4
    17ec:	c9 f1       	breq	.+114    	; 0x1860 <Timer_Start+0x274>
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	40 f4       	brcc	.+16     	; 0x1802 <Timer_Start+0x216>
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	e9 f0       	breq	.+58     	; 0x1830 <Timer_Start+0x244>
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	48 f5       	brcc	.+82     	; 0x184c <Timer_Start+0x260>
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	09 f0       	breq	.+2      	; 0x1800 <Timer_Start+0x214>
    17fe:	7e c0       	rjmp	.+252    	; 0x18fc <Timer_Start+0x310>
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <Timer_Start+0x228>
    1802:	86 30       	cpi	r24, 0x06	; 6
    1804:	09 f4       	brne	.+2      	; 0x1808 <Timer_Start+0x21c>
    1806:	48 c0       	rjmp	.+144    	; 0x1898 <Timer_Start+0x2ac>
    1808:	86 30       	cpi	r24, 0x06	; 6
    180a:	c0 f1       	brcs	.+112    	; 0x187c <Timer_Start+0x290>
    180c:	87 30       	cpi	r24, 0x07	; 7
    180e:	09 f0       	breq	.+2      	; 0x1812 <Timer_Start+0x226>
    1810:	75 c0       	rjmp	.+234    	; 0x18fc <Timer_Start+0x310>
    1812:	4f c0       	rjmp	.+158    	; 0x18b2 <Timer_Start+0x2c6>

		case TIMER_PRESCALER_NO :
		{

			if(Timer_Count < MAX0){
    1814:	6f 3f       	cpi	r22, 0xFF	; 255
    1816:	71 05       	cpc	r23, r1
    1818:	08 f0       	brcs	.+2      	; 0x181c <Timer_Start+0x230>
    181a:	72 c0       	rjmp	.+228    	; 0x1900 <Timer_Start+0x314>
				Timer_Stop(TIMER_CH2);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_NO;
    1822:	85 b5       	in	r24, 0x25	; 37
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	85 bd       	out	0x25, r24	; 37
				TCNT2 = MAX2 - Timer_Count;
    1828:	c0 95       	com	r28
    182a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	75 c0       	rjmp	.+234    	; 0x191a <Timer_Start+0x32e>
			break;
		}

		case TIMER_PRESCALER_8 :
		{
			if(Timer_Count < MAX0)
    1830:	6f 3f       	cpi	r22, 0xFF	; 255
    1832:	71 05       	cpc	r23, r1
    1834:	08 f0       	brcs	.+2      	; 0x1838 <Timer_Start+0x24c>
    1836:	66 c0       	rjmp	.+204    	; 0x1904 <Timer_Start+0x318>
			{ 
				Timer_Stop(TIMER_CH2);
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_8;
    183e:	85 b5       	in	r24, 0x25	; 37
    1840:	82 60       	ori	r24, 0x02	; 2
    1842:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1844:	c0 95       	com	r28
    1846:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	67 c0       	rjmp	.+206    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_32:
		{
			if(Timer_Count < MAX1)
			{
				Timer_Stop(TIMER_CH2);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_32;
    1852:	85 b5       	in	r24, 0x25	; 37
    1854:	83 60       	ori	r24, 0x03	; 3
    1856:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1858:	c0 95       	com	r28
    185a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    185c:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				Ret=E_NOK;
			}

			break;
    185e:	5d c0       	rjmp	.+186    	; 0x191a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :
		{
			if(Timer_Count < MAX2)
    1860:	6f 3f       	cpi	r22, 0xFF	; 255
    1862:	71 05       	cpc	r23, r1
    1864:	08 f0       	brcs	.+2      	; 0x1868 <Timer_Start+0x27c>
    1866:	50 c0       	rjmp	.+160    	; 0x1908 <Timer_Start+0x31c>
			{
				Timer_Stop(TIMER_CH2);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_64;
    186e:	85 b5       	in	r24, 0x25	; 37
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1874:	c0 95       	com	r28
    1876:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	4f c0       	rjmp	.+158    	; 0x191a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_128 :{
			if(Timer_Count < MAX2){
    187c:	6f 3f       	cpi	r22, 0xFF	; 255
    187e:	71 05       	cpc	r23, r1
    1880:	08 f0       	brcs	.+2      	; 0x1884 <Timer_Start+0x298>
    1882:	44 c0       	rjmp	.+136    	; 0x190c <Timer_Start+0x320>
				Timer_Stop(TIMER_CH2);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_128;
    188a:	85 b5       	in	r24, 0x25	; 37
    188c:	85 60       	ori	r24, 0x05	; 5
    188e:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1890:	c0 95       	com	r28
    1892:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	41 c0       	rjmp	.+130    	; 0x191a <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_256 :
		{
			if(Timer_Count < MAX2){
    1898:	6f 3f       	cpi	r22, 0xFF	; 255
    189a:	71 05       	cpc	r23, r1
    189c:	c8 f5       	brcc	.+114    	; 0x1910 <Timer_Start+0x324>
				Timer_Stop(TIMER_CH2);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_256;
    18a4:	85 b5       	in	r24, 0x25	; 37
    18a6:	86 60       	ori	r24, 0x06	; 6
    18a8:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    18aa:	c0 95       	com	r28
    18ac:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	34 c0       	rjmp	.+104    	; 0x191a <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_1024 :
		{
			if(Timer_Count < MAX2){
    18b2:	6f 3f       	cpi	r22, 0xFF	; 255
    18b4:	71 05       	cpc	r23, r1
    18b6:	70 f5       	brcc	.+92     	; 0x1914 <Timer_Start+0x328>
				Timer_Stop(TIMER_CH2);
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_1024;
    18be:	85 b5       	in	r24, 0x25	; 37
    18c0:	87 60       	ori	r24, 0x07	; 7
    18c2:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    18c4:	c0 95       	com	r28
    18c6:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	27 c0       	rjmp	.+78     	; 0x191a <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	20 f1       	brcs	.+72     	; 0x1918 <Timer_Start+0x32c>
    18d0:	84 e2       	ldi	r24, 0x24	; 36
    18d2:	23 c0       	rjmp	.+70     	; 0x191a <Timer_Start+0x32e>
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
			break;}
	}
	default:
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    18d4:	86 e3       	ldi	r24, 0x36	; 54
    18d6:	21 c0       	rjmp	.+66     	; 0x191a <Timer_Start+0x32e>
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	1f c0       	rjmp	.+62     	; 0x191a <Timer_Start+0x32e>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	1d c0       	rjmp	.+58     	; 0x191a <Timer_Start+0x32e>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	1b c0       	rjmp	.+54     	; 0x191a <Timer_Start+0x32e>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	19 c0       	rjmp	.+50     	; 0x191a <Timer_Start+0x32e>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	17 c0       	rjmp	.+46     	; 0x191a <Timer_Start+0x32e>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	15 c0       	rjmp	.+42     	; 0x191a <Timer_Start+0x32e>
		else if(u8_timer0_is_init > 1){
			Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
		}
		else{
			Ret=NOT_INIT+TIMER_MODULE;
    18f0:	82 e2       	ldi	r24, 0x22	; 34
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <Timer_Start+0x32e>
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    18f8:	82 e2       	ldi	r24, 0x22	; 34
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <Timer_Start+0x32e>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0b c0       	rjmp	.+22     	; 0x191a <Timer_Start+0x32e>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	09 c0       	rjmp	.+18     	; 0x191a <Timer_Start+0x32e>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	07 c0       	rjmp	.+14     	; 0x191a <Timer_Start+0x32e>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	05 c0       	rjmp	.+10     	; 0x191a <Timer_Start+0x32e>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	03 c0       	rjmp	.+6      	; 0x191a <Timer_Start+0x32e>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	01 c0       	rjmp	.+2      	; 0x191a <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1918:	82 e2       	ldi	r24, 0x22	; 34
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	return Ret;

}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <Timer_Init>:
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	ec 01       	movw	r28, r24
if (Timer_cfg == 0)
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	09 f4       	brne	.+2      	; 0x192e <Timer_Init+0xe>
    192c:	13 c1       	rjmp	.+550    	; 0x1b54 <Timer_Init+0x234>
{
	Ret=TIMER_MODULE+NULL_PTR;
}else
{
	
if(Timer_cfg->Timer_Mode==TIMER_MODE){u8_sgv_TimerMode=1;}else{u8_sgv_TimerMode=0;}
    192e:	99 81       	ldd	r25, Y+1	; 0x01
    1930:	99 23       	and	r25, r25
    1932:	21 f4       	brne	.+8      	; 0x193c <Timer_Init+0x1c>
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 93 53 01 	sts	0x0153, r24
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <Timer_Init+0x20>
    193c:	10 92 53 01 	sts	0x0153, r1

prescaler_value=Timer_cfg->Timer_Prescaler;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	80 93 54 01 	sts	0x0154, r24
switch (Timer_cfg->Timer_CH_NO) {
    1946:	88 81       	ld	r24, Y
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	09 f4       	brne	.+2      	; 0x194e <Timer_Init+0x2e>
    194c:	5b c0       	rjmp	.+182    	; 0x1a04 <Timer_Init+0xe4>
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	20 f0       	brcs	.+8      	; 0x195a <Timer_Init+0x3a>
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	09 f0       	breq	.+2      	; 0x1958 <Timer_Init+0x38>
    1956:	00 c1       	rjmp	.+512    	; 0x1b58 <Timer_Init+0x238>
    1958:	af c0       	rjmp	.+350    	; 0x1ab8 <Timer_Init+0x198>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
case TIMER_CH0:
{
	u8_timer0_is_init+=1;
    195a:	80 91 55 01 	lds	r24, 0x0155
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 55 01 	sts	0x0155, r24
	
	TCCR0 |=T0_NORMAL_MODE;
    1964:	83 b7       	in	r24, 0x33	; 51
    1966:	83 bf       	out	0x33, r24	; 51

	switch (Timer_cfg->Timer_Mode) {
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	c9 f0       	breq	.+50     	; 0x19a0 <Timer_Init+0x80>
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	20 f0       	brcs	.+8      	; 0x197a <Timer_Init+0x5a>
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	09 f0       	breq	.+2      	; 0x1978 <Timer_Init+0x58>
    1976:	f2 c0       	rjmp	.+484    	; 0x1b5c <Timer_Init+0x23c>
    1978:	2c c0       	rjmp	.+88     	; 0x19d2 <Timer_Init+0xb2>
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 23       	and	r24, r24
    197e:	21 f0       	breq	.+8      	; 0x1988 <Timer_Init+0x68>
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	09 f0       	breq	.+2      	; 0x1986 <Timer_Init+0x66>
    1984:	ed c0       	rjmp	.+474    	; 0x1b60 <Timer_Init+0x240>
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <Timer_Init+0x72>
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    1988:	89 b7       	in	r24, 0x39	; 57
    198a:	8c 7f       	andi	r24, 0xFC	; 252
    198c:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    198e:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    1990:	fa c0       	rjmp	.+500    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
    1992:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    1996:	89 b7       	in	r24, 0x39	; 57
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    199c:	10 e0       	ldi	r17, 0x00	; 0
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
		//	TIMER0OVF_INT=(Timer_cfg->Timer_Cbk_ptr);
			break;
    199e:	f3 c0       	rjmp	.+486    	; 0x1b86 <Timer_Init+0x266>
	/*                             TIMER 0 As a COUNTER_RISING_MODE          */
	/*************************************************************************/

	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH0);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
		TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
    19a6:	83 b7       	in	r24, 0x33	; 51
    19a8:	8d 60       	ori	r24, 0x0D	; 13
    19aa:	83 bf       	out	0x33, r24	; 51
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) 
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	88 23       	and	r24, r24
    19b0:	21 f0       	breq	.+8      	; 0x19ba <Timer_Init+0x9a>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <Timer_Init+0x98>
    19b6:	d6 c0       	rjmp	.+428    	; 0x1b64 <Timer_Init+0x244>
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <Timer_Init+0xa4>
		
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    19ba:	89 b7       	in	r24, 0x39	; 57
    19bc:	8c 7f       	andi	r24, 0xFC	; 252
    19be:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    19c0:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    19c2:	e1 c0       	rjmp	.+450    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
    19c4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    19c8:	89 b7       	in	r24, 0x39	; 57
    19ca:	81 60       	ori	r24, 0x01	; 1
    19cc:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    19ce:	10 e0       	ldi	r17, 0x00	; 0
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    19d0:	da c0       	rjmp	.+436    	; 0x1b86 <Timer_Init+0x266>
		/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
		/*************************************************************************/
	
		case COUNTER_FALLING_MODE:
		{
			Timer_Stop(TIMER_CH0);
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
			TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
    19d8:	83 b7       	in	r24, 0x33	; 51
    19da:	8c 60       	ori	r24, 0x0C	; 12
    19dc:	83 bf       	out	0x33, r24	; 51
			switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	88 23       	and	r24, r24
    19e2:	21 f0       	breq	.+8      	; 0x19ec <Timer_Init+0xcc>
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <Timer_Init+0xca>
    19e8:	bf c0       	rjmp	.+382    	; 0x1b68 <Timer_Init+0x248>
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <Timer_Init+0xd6>
			case TIMER_POLLING_MODE:
			{

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;
    19ec:	89 b7       	in	r24, 0x39	; 57
    19ee:	8c 7f       	andi	r24, 0xFC	; 252
    19f0:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    19f2:	10 e0       	ldi	r17, 0x00	; 0

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;

				break;
    19f4:	c8 c0       	rjmp	.+400    	; 0x1b86 <Timer_Init+0x266>
			case TIMER_INTERRUPT_MODE:
			{
				/*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
    19f6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
				TIMSK |= T0_INTERRUPT_NORMAL;
    19fa:	89 b7       	in	r24, 0x39	; 57
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1a00:	10 e0       	ldi	r17, 0x00	; 0
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
				TIMSK |= T0_INTERRUPT_NORMAL;

				break;
    1a02:	c1 c0       	rjmp	.+386    	; 0x1b86 <Timer_Init+0x266>
/*                             TIMER 1                                   */
/*************************************************************************/

case TIMER_CH1:
{
u8_timer1_is_init+=1;
    1a04:	80 91 56 01 	lds	r24, 0x0156
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	80 93 56 01 	sts	0x0156, r24
	switch (Timer_cfg->Timer_Mode)
    1a0e:	91 30       	cpi	r25, 0x01	; 1
    1a10:	e9 f0       	breq	.+58     	; 0x1a4c <Timer_Init+0x12c>
    1a12:	91 30       	cpi	r25, 0x01	; 1
    1a14:	20 f0       	brcs	.+8      	; 0x1a1e <Timer_Init+0xfe>
    1a16:	92 30       	cpi	r25, 0x02	; 2
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <Timer_Init+0xfc>
    1a1a:	a8 c0       	rjmp	.+336    	; 0x1b6c <Timer_Init+0x24c>
    1a1c:	32 c0       	rjmp	.+100    	; 0x1a82 <Timer_Init+0x162>
	{
	case TIMER_MODE:
	{
		TCCR1 |= T1_NORMAL_MODE_CONFIG;
    1a1e:	8e b5       	in	r24, 0x2e	; 46
    1a20:	9f b5       	in	r25, 0x2f	; 47
    1a22:	9f bd       	out	0x2f, r25	; 47
    1a24:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	88 23       	and	r24, r24
    1a2a:	21 f0       	breq	.+8      	; 0x1a34 <Timer_Init+0x114>
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <Timer_Init+0x112>
    1a30:	9f c0       	rjmp	.+318    	; 0x1b70 <Timer_Init+0x250>
    1a32:	05 c0       	rjmp	.+10     	; 0x1a3e <Timer_Init+0x11e>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1a34:	89 b7       	in	r24, 0x39	; 57
    1a36:	83 7c       	andi	r24, 0xC3	; 195
    1a38:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    1a3c:	a4 c0       	rjmp	.+328    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1a3e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1a42:	89 b7       	in	r24, 0x39	; 57
    1a44:	84 60       	ori	r24, 0x04	; 4
    1a46:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1a48:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    1a4a:	9d c0       	rjmp	.+314    	; 0x1b86 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
		TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
    1a52:	8e b5       	in	r24, 0x2e	; 46
    1a54:	9f b5       	in	r25, 0x2f	; 47
    1a56:	87 60       	ori	r24, 0x07	; 7
    1a58:	9f bd       	out	0x2f, r25	; 47
    1a5a:	8e bd       	out	0x2e, r24	; 46

		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	88 23       	and	r24, r24
    1a60:	21 f0       	breq	.+8      	; 0x1a6a <Timer_Init+0x14a>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <Timer_Init+0x148>
    1a66:	86 c0       	rjmp	.+268    	; 0x1b74 <Timer_Init+0x254>
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <Timer_Init+0x154>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1a6a:	89 b7       	in	r24, 0x39	; 57
    1a6c:	83 7c       	andi	r24, 0xC3	; 195
    1a6e:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1a70:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    1a72:	89 c0       	rjmp	.+274    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1a74:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1a78:	89 b7       	in	r24, 0x39	; 57
    1a7a:	84 60       	ori	r24, 0x04	; 4
    1a7c:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    1a80:	82 c0       	rjmp	.+260    	; 0x1b86 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_FALLING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Timer_Stop>
		TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
    1a88:	8e b5       	in	r24, 0x2e	; 46
    1a8a:	9f b5       	in	r25, 0x2f	; 47
    1a8c:	86 60       	ori	r24, 0x06	; 6
    1a8e:	9f bd       	out	0x2f, r25	; 47
    1a90:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	88 23       	and	r24, r24
    1a96:	21 f0       	breq	.+8      	; 0x1aa0 <Timer_Init+0x180>
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <Timer_Init+0x17e>
    1a9c:	6d c0       	rjmp	.+218    	; 0x1b78 <Timer_Init+0x258>
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <Timer_Init+0x18a>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1aa0:	89 b7       	in	r24, 0x39	; 57
    1aa2:	83 7c       	andi	r24, 0xC3	; 195
    1aa4:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1aa6:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
			break;
    1aa8:	6e c0       	rjmp	.+220    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1aaa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1aae:	89 b7       	in	r24, 0x39	; 57
    1ab0:	84 60       	ori	r24, 0x04	; 4
    1ab2:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */

			break;
    1ab6:	67 c0       	rjmp	.+206    	; 0x1b86 <Timer_Init+0x266>
/*************************************************************************/
/*                             TIMER 2                                   */
/*************************************************************************/

case TIMER_CH2:
{u8_timer2_is_init+=1;
    1ab8:	80 91 57 01 	lds	r24, 0x0157
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	80 93 57 01 	sts	0x0157, r24
	TCCR2 |=T2_NORMAL_MODE_CONFIG;
    1ac2:	85 b5       	in	r24, 0x25	; 37
    1ac4:	85 bd       	out	0x25, r24	; 37
	switch (Timer_cfg->Timer_Mode) 
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	c9 f0       	breq	.+50     	; 0x1afe <Timer_Init+0x1de>
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <Timer_Init+0x1b8>
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <Timer_Init+0x1b6>
    1ad4:	53 c0       	rjmp	.+166    	; 0x1b7c <Timer_Init+0x25c>
    1ad6:	28 c0       	rjmp	.+80     	; 0x1b28 <Timer_Init+0x208>
	{
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	88 23       	and	r24, r24
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <Timer_Init+0x1c6>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <Timer_Init+0x1c4>
    1ae2:	4e c0       	rjmp	.+156    	; 0x1b80 <Timer_Init+0x260>
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <Timer_Init+0x1d0>
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1ae6:	89 b7       	in	r24, 0x39	; 57
    1ae8:	8f 73       	andi	r24, 0x3F	; 63
    1aea:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1aec:	10 e0       	ldi	r17, 0x00	; 0
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
			break;
    1aee:	4b c0       	rjmp	.+150    	; 0x1b86 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1af0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1af4:	89 b7       	in	r24, 0x39	; 57
    1af6:	80 6c       	ori	r24, 0xC0	; 192
    1af8:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1afa:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
    1afc:	44 c0       	rjmp	.+136    	; 0x1b86 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		ASSR |=0x08;
    1afe:	82 b5       	in	r24, 0x22	; 34
    1b00:	88 60       	ori	r24, 0x08	; 8
    1b02:	82 bd       	out	0x22, r24	; 34
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	88 23       	and	r24, r24
    1b08:	19 f0       	breq	.+6      	; 0x1b10 <Timer_Init+0x1f0>
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	79 f4       	brne	.+30     	; 0x1b2c <Timer_Init+0x20c>
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <Timer_Init+0x1fa>
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1b10:	89 b7       	in	r24, 0x39	; 57
    1b12:	8f 73       	andi	r24, 0x3F	; 63
    1b14:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1b16:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;

			break;
    1b18:	0a c0       	rjmp	.+20     	; 0x1b2e <Timer_Init+0x20e>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1b1a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1b1e:	89 b7       	in	r24, 0x39	; 57
    1b20:	80 6c       	ori	r24, 0xC0	; 192
    1b22:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1b24:	10 e0       	ldi	r17, 0x00	; 0
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <Timer_Init+0x20e>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1b28:	10 e0       	ldi	r17, 0x00	; 0
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <Timer_Init+0x20e>
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
		}
		
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    1b2c:	10 e3       	ldi	r17, 0x30	; 48
		}
	}

	case COUNTER_FALLING_MODE:
		{
			ASSR |=0x08;
    1b2e:	82 b5       	in	r24, 0x22	; 34
    1b30:	88 60       	ori	r24, 0x08	; 8
    1b32:	82 bd       	out	0x22, r24	; 34
			switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <Timer_Init+0x220>
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	19 f5       	brne	.+70     	; 0x1b84 <Timer_Init+0x264>
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <Timer_Init+0x228>
			{
			case TIMER_POLLING_MODE:
			{
				TIMSK &= T2_INTERRUPT_DISABLE;
    1b40:	89 b7       	in	r24, 0x39	; 57
    1b42:	8f 73       	andi	r24, 0x3F	; 63
    1b44:	89 bf       	out	0x39, r24	; 57

				break;
    1b46:	1f c0       	rjmp	.+62     	; 0x1b86 <Timer_Init+0x266>
			}
			case TIMER_INTERRUPT_MODE:
			{
				G_interrupt_Enable();
    1b48:	0e 94 62 02 	call	0x4c4	; 0x4c4 <G_interrupt_Enable>
				TIMSK|=T2_INTERRUPT_NORMAL;
    1b4c:	89 b7       	in	r24, 0x39	; 57
    1b4e:	80 6c       	ori	r24, 0xC0	; 192
    1b50:	89 bf       	out	0x39, r24	; 57
				break;
    1b52:	19 c0       	rjmp	.+50     	; 0x1b86 <Timer_Init+0x266>

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
if (Timer_cfg == 0)
{
	Ret=TIMER_MODULE+NULL_PTR;
    1b54:	10 e2       	ldi	r17, 0x20	; 32
    1b56:	17 c0       	rjmp	.+46     	; 0x1b86 <Timer_Init+0x266>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	15 c0       	rjmp	.+42     	; 0x1b86 <Timer_Init+0x266>
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1b5c:	10 e0       	ldi	r17, 0x00	; 0
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <Timer_Init+0x266>
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <Timer_Init+0x266>
    1b64:	10 e0       	ldi	r17, 0x00	; 0
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <Timer_Init+0x266>
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	0d c0       	rjmp	.+26     	; 0x1b86 <Timer_Init+0x266>
			break;
		}
		break;
	}
	default :
		Ret=INVALID_TIMER_MODE+TIMER_MODULE;
    1b6c:	14 e3       	ldi	r17, 0x34	; 52
    1b6e:	0b c0       	rjmp	.+22     	; 0x1b86 <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1b70:	10 e3       	ldi	r17, 0x30	; 48
    1b72:	09 c0       	rjmp	.+18     	; 0x1b86 <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    1b74:	10 e3       	ldi	r17, 0x30	; 48
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <Timer_Init+0x266>
			 */

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1b78:	10 e3       	ldi	r17, 0x30	; 48
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <Timer_Init+0x266>


	}
	
	default :
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1b7c:	16 e3       	ldi	r17, 0x36	; 54
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <Timer_Init+0x266>
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1b80:	10 e3       	ldi	r17, 0x30	; 48
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <Timer_Init+0x266>
				TIMSK|=T2_INTERRUPT_NORMAL;
				break;
			}

			default :
				Ret=INVALID_VALUE+TIMER_MODULE;
    1b84:	10 e3       	ldi	r17, 0x30	; 48
}
}
}
return Ret;

}
    1b86:	81 2f       	mov	r24, r17
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	08 95       	ret

00001b90 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
	if(Data){
    1b90:	61 15       	cp	r22, r1
    1b92:	71 05       	cpc	r23, r1
    1b94:	f9 f0       	breq	.+62     	; 0x1bd4 <Timer_GetStatus+0x44>
	switch (Timer_CH_NO) {
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	59 f0       	breq	.+22     	; 0x1bb0 <Timer_GetStatus+0x20>
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	18 f0       	brcs	.+6      	; 0x1ba4 <Timer_GetStatus+0x14>
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	d9 f4       	brne	.+54     	; 0x1bd8 <Timer_GetStatus+0x48>
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <Timer_GetStatus+0x30>
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
    1ba4:	88 b7       	in	r24, 0x38	; 56
    1ba6:	81 70       	andi	r24, 0x01	; 1
    1ba8:	fb 01       	movw	r30, r22
    1baa:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
	break;
    1bae:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
    1bb0:	88 b7       	in	r24, 0x38	; 56
    1bb2:	86 95       	lsr	r24
    1bb4:	86 95       	lsr	r24
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	fb 01       	movw	r30, r22
    1bba:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
	break;
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
		break;
    1bbe:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
    1bc0:	88 b7       	in	r24, 0x38	; 56
    1bc2:	82 95       	swap	r24
    1bc4:	86 95       	lsr	r24
    1bc6:	86 95       	lsr	r24
    1bc8:	83 70       	andi	r24, 0x03	; 3
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	fb 01       	movw	r30, r22
    1bce:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
		break;
    1bd2:	08 95       	ret
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
    1bd4:	80 e2       	ldi	r24, 0x20	; 32
    1bd6:	08 95       	ret
	{
		*Data =((TIFR>>TOV2)&1);
		break;
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1bd8:	86 e3       	ldi	r24, 0x36	; 54
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
	return ret;
}
    1bda:	08 95       	ret

00001bdc <Timer_GetValue>:
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
	if(Data){
    1bdc:	61 15       	cp	r22, r1
    1bde:	71 05       	cpc	r23, r1
    1be0:	d1 f0       	breq	.+52     	; 0x1c16 <Timer_GetValue+0x3a>
	switch (Timer_CH_NO) {
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <Timer_GetValue+0x20>
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	18 f0       	brcs	.+6      	; 0x1bf0 <Timer_GetValue+0x14>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	b1 f4       	brne	.+44     	; 0x1c1a <Timer_GetValue+0x3e>
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <Timer_GetValue+0x2e>
	case TIMER_CH0:
	{
		*Data =TCNT0;
    1bf0:	82 b7       	in	r24, 0x32	; 50
    1bf2:	fb 01       	movw	r30, r22
    1bf4:	80 83       	st	Z, r24
    1bf6:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =TCNT0;
		break;
    1bfa:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
    1bfc:	8c b5       	in	r24, 0x2c	; 44
    1bfe:	9d b5       	in	r25, 0x2d	; 45
    1c00:	fb 01       	movw	r30, r22
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
		break;
    1c08:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
    1c0a:	84 b5       	in	r24, 0x24	; 36
    1c0c:	fb 01       	movw	r30, r22
    1c0e:	80 83       	st	Z, r24
    1c10:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1c12:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
		break;
    1c14:	08 95       	ret
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	}
	else{
		Ret=NULL_PTR+TIMER_MODULE;
    1c16:	80 e2       	ldi	r24, 0x20	; 32
    1c18:	08 95       	ret
	{
		*Data =TCNT2;
		break;
	}
	default :
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1c1a:	86 e3       	ldi	r24, 0x36	; 54
	else{
		Ret=NULL_PTR+TIMER_MODULE;
		}
	return Ret;

}
    1c1c:	08 95       	ret

00001c1e <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
Ret=DIO_init(&US_Configuration);
    1c1e:	8f e9       	ldi	r24, 0x9F	; 159
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    1c26:	8c e6       	ldi	r24, 0x6C	; 108
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Icu_Init>
return Ret;
}
    1c2e:	08 95       	ret

00001c30 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
Ret=DIO_Write(GPIOC,BIT4,HIGH);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	60 e1       	ldi	r22, 0x10	; 16
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	4f ef       	ldi	r20, 0xFF	; 255
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
/*timer2Start();
timer2DelayMs(1);
*/
Ret=DIO_Write(GPIOC,BIT4,LOW);
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	60 e1       	ldi	r22, 0x10	; 16
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
return Ret;	
}
    1c50:	08 95       	ret

00001c52 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <Us_GetDistance+0xa>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <Us_GetDistance+0xc>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	ae 01       	movw	r20, r28
    1c6a:	4f 5f       	subi	r20, 0xFF	; 255
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	0e 94 83 01 	call	0x306	; 0x306 <Icu_ReadTime>
	*Distance=u32l_Time;
    1c72:	29 81       	ldd	r18, Y+1	; 0x01
    1c74:	3a 81       	ldd	r19, Y+2	; 0x02
    1c76:	f8 01       	movw	r30, r16
    1c78:	31 83       	std	Z+1, r19	; 0x01
    1c7a:	20 83       	st	Z, r18
	return Ret;
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <__divsf3>:
    1c8e:	0c d0       	rcall	.+24     	; 0x1ca8 <__divsf3x>
    1c90:	e6 c0       	rjmp	.+460    	; 0x1e5e <__fp_round>
    1c92:	de d0       	rcall	.+444    	; 0x1e50 <__fp_pscB>
    1c94:	40 f0       	brcs	.+16     	; 0x1ca6 <__divsf3+0x18>
    1c96:	d5 d0       	rcall	.+426    	; 0x1e42 <__fp_pscA>
    1c98:	30 f0       	brcs	.+12     	; 0x1ca6 <__divsf3+0x18>
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <__divsf3+0x16>
    1c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <__divsf3+0x18>
    1ca0:	c7 c0       	rjmp	.+398    	; 0x1e30 <__fp_inf>
    1ca2:	51 11       	cpse	r21, r1
    1ca4:	10 c1       	rjmp	.+544    	; 0x1ec6 <__fp_szero>
    1ca6:	ca c0       	rjmp	.+404    	; 0x1e3c <__fp_nan>

00001ca8 <__divsf3x>:
    1ca8:	eb d0       	rcall	.+470    	; 0x1e80 <__fp_split3>
    1caa:	98 f3       	brcs	.-26     	; 0x1c92 <__divsf3+0x4>

00001cac <__divsf3_pse>:
    1cac:	99 23       	and	r25, r25
    1cae:	c9 f3       	breq	.-14     	; 0x1ca2 <__divsf3+0x14>
    1cb0:	55 23       	and	r21, r21
    1cb2:	b1 f3       	breq	.-20     	; 0x1ca0 <__divsf3+0x12>
    1cb4:	95 1b       	sub	r25, r21
    1cb6:	55 0b       	sbc	r21, r21
    1cb8:	bb 27       	eor	r27, r27
    1cba:	aa 27       	eor	r26, r26
    1cbc:	62 17       	cp	r22, r18
    1cbe:	73 07       	cpc	r23, r19
    1cc0:	84 07       	cpc	r24, r20
    1cc2:	38 f0       	brcs	.+14     	; 0x1cd2 <__divsf3_pse+0x26>
    1cc4:	9f 5f       	subi	r25, 0xFF	; 255
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	44 1f       	adc	r20, r20
    1cce:	aa 1f       	adc	r26, r26
    1cd0:	a9 f3       	breq	.-22     	; 0x1cbc <__divsf3_pse+0x10>
    1cd2:	33 d0       	rcall	.+102    	; 0x1d3a <__divsf3_pse+0x8e>
    1cd4:	0e 2e       	mov	r0, r30
    1cd6:	3a f0       	brmi	.+14     	; 0x1ce6 <__divsf3_pse+0x3a>
    1cd8:	e0 e8       	ldi	r30, 0x80	; 128
    1cda:	30 d0       	rcall	.+96     	; 0x1d3c <__divsf3_pse+0x90>
    1cdc:	91 50       	subi	r25, 0x01	; 1
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	e6 95       	lsr	r30
    1ce2:	00 1c       	adc	r0, r0
    1ce4:	ca f7       	brpl	.-14     	; 0x1cd8 <__divsf3_pse+0x2c>
    1ce6:	29 d0       	rcall	.+82     	; 0x1d3a <__divsf3_pse+0x8e>
    1ce8:	fe 2f       	mov	r31, r30
    1cea:	27 d0       	rcall	.+78     	; 0x1d3a <__divsf3_pse+0x8e>
    1cec:	66 0f       	add	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	26 17       	cp	r18, r22
    1cf6:	37 07       	cpc	r19, r23
    1cf8:	48 07       	cpc	r20, r24
    1cfa:	ab 07       	cpc	r26, r27
    1cfc:	b0 e8       	ldi	r27, 0x80	; 128
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__divsf3_pse+0x56>
    1d00:	bb 0b       	sbc	r27, r27
    1d02:	80 2d       	mov	r24, r0
    1d04:	bf 01       	movw	r22, r30
    1d06:	ff 27       	eor	r31, r31
    1d08:	93 58       	subi	r25, 0x83	; 131
    1d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0c:	2a f0       	brmi	.+10     	; 0x1d18 <__divsf3_pse+0x6c>
    1d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d10:	51 05       	cpc	r21, r1
    1d12:	68 f0       	brcs	.+26     	; 0x1d2e <__divsf3_pse+0x82>
    1d14:	8d c0       	rjmp	.+282    	; 0x1e30 <__fp_inf>
    1d16:	d7 c0       	rjmp	.+430    	; 0x1ec6 <__fp_szero>
    1d18:	5f 3f       	cpi	r21, 0xFF	; 255
    1d1a:	ec f3       	brlt	.-6      	; 0x1d16 <__divsf3_pse+0x6a>
    1d1c:	98 3e       	cpi	r25, 0xE8	; 232
    1d1e:	dc f3       	brlt	.-10     	; 0x1d16 <__divsf3_pse+0x6a>
    1d20:	86 95       	lsr	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	b7 95       	ror	r27
    1d28:	f7 95       	ror	r31
    1d2a:	9f 5f       	subi	r25, 0xFF	; 255
    1d2c:	c9 f7       	brne	.-14     	; 0x1d20 <__divsf3_pse+0x74>
    1d2e:	88 0f       	add	r24, r24
    1d30:	91 1d       	adc	r25, r1
    1d32:	96 95       	lsr	r25
    1d34:	87 95       	ror	r24
    1d36:	97 f9       	bld	r25, 7
    1d38:	08 95       	ret
    1d3a:	e1 e0       	ldi	r30, 0x01	; 1
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	88 1f       	adc	r24, r24
    1d42:	bb 1f       	adc	r27, r27
    1d44:	62 17       	cp	r22, r18
    1d46:	73 07       	cpc	r23, r19
    1d48:	84 07       	cpc	r24, r20
    1d4a:	ba 07       	cpc	r27, r26
    1d4c:	20 f0       	brcs	.+8      	; 0x1d56 <__divsf3_pse+0xaa>
    1d4e:	62 1b       	sub	r22, r18
    1d50:	73 0b       	sbc	r23, r19
    1d52:	84 0b       	sbc	r24, r20
    1d54:	ba 0b       	sbc	r27, r26
    1d56:	ee 1f       	adc	r30, r30
    1d58:	88 f7       	brcc	.-30     	; 0x1d3c <__divsf3_pse+0x90>
    1d5a:	e0 95       	com	r30
    1d5c:	08 95       	ret

00001d5e <__fixunssfsi>:
    1d5e:	98 d0       	rcall	.+304    	; 0x1e90 <__fp_splitA>
    1d60:	88 f0       	brcs	.+34     	; 0x1d84 <__fixunssfsi+0x26>
    1d62:	9f 57       	subi	r25, 0x7F	; 127
    1d64:	90 f0       	brcs	.+36     	; 0x1d8a <__fixunssfsi+0x2c>
    1d66:	b9 2f       	mov	r27, r25
    1d68:	99 27       	eor	r25, r25
    1d6a:	b7 51       	subi	r27, 0x17	; 23
    1d6c:	a0 f0       	brcs	.+40     	; 0x1d96 <__fixunssfsi+0x38>
    1d6e:	d1 f0       	breq	.+52     	; 0x1da4 <__fixunssfsi+0x46>
    1d70:	66 0f       	add	r22, r22
    1d72:	77 1f       	adc	r23, r23
    1d74:	88 1f       	adc	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	1a f0       	brmi	.+6      	; 0x1d80 <__fixunssfsi+0x22>
    1d7a:	ba 95       	dec	r27
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <__fixunssfsi+0x12>
    1d7e:	12 c0       	rjmp	.+36     	; 0x1da4 <__fixunssfsi+0x46>
    1d80:	b1 30       	cpi	r27, 0x01	; 1
    1d82:	81 f0       	breq	.+32     	; 0x1da4 <__fixunssfsi+0x46>
    1d84:	9f d0       	rcall	.+318    	; 0x1ec4 <__fp_zero>
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	08 95       	ret
    1d8a:	9c c0       	rjmp	.+312    	; 0x1ec4 <__fp_zero>
    1d8c:	67 2f       	mov	r22, r23
    1d8e:	78 2f       	mov	r23, r24
    1d90:	88 27       	eor	r24, r24
    1d92:	b8 5f       	subi	r27, 0xF8	; 248
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <__fixunssfsi+0x46>
    1d96:	b9 3f       	cpi	r27, 0xF9	; 249
    1d98:	cc f3       	brlt	.-14     	; 0x1d8c <__fixunssfsi+0x2e>
    1d9a:	86 95       	lsr	r24
    1d9c:	77 95       	ror	r23
    1d9e:	67 95       	ror	r22
    1da0:	b3 95       	inc	r27
    1da2:	d9 f7       	brne	.-10     	; 0x1d9a <__fixunssfsi+0x3c>
    1da4:	3e f4       	brtc	.+14     	; 0x1db4 <__fixunssfsi+0x56>
    1da6:	90 95       	com	r25
    1da8:	80 95       	com	r24
    1daa:	70 95       	com	r23
    1dac:	61 95       	neg	r22
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	8f 4f       	sbci	r24, 0xFF	; 255
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	08 95       	ret

00001db6 <__floatunsisf>:
    1db6:	e8 94       	clt
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <__floatsisf+0x12>

00001dba <__floatsisf>:
    1dba:	97 fb       	bst	r25, 7
    1dbc:	3e f4       	brtc	.+14     	; 0x1dcc <__floatsisf+0x12>
    1dbe:	90 95       	com	r25
    1dc0:	80 95       	com	r24
    1dc2:	70 95       	com	r23
    1dc4:	61 95       	neg	r22
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	99 23       	and	r25, r25
    1dce:	a9 f0       	breq	.+42     	; 0x1dfa <__floatsisf+0x40>
    1dd0:	f9 2f       	mov	r31, r25
    1dd2:	96 e9       	ldi	r25, 0x96	; 150
    1dd4:	bb 27       	eor	r27, r27
    1dd6:	93 95       	inc	r25
    1dd8:	f6 95       	lsr	r31
    1dda:	87 95       	ror	r24
    1ddc:	77 95       	ror	r23
    1dde:	67 95       	ror	r22
    1de0:	b7 95       	ror	r27
    1de2:	f1 11       	cpse	r31, r1
    1de4:	f8 cf       	rjmp	.-16     	; 0x1dd6 <__floatsisf+0x1c>
    1de6:	fa f4       	brpl	.+62     	; 0x1e26 <__floatsisf+0x6c>
    1de8:	bb 0f       	add	r27, r27
    1dea:	11 f4       	brne	.+4      	; 0x1df0 <__floatsisf+0x36>
    1dec:	60 ff       	sbrs	r22, 0
    1dee:	1b c0       	rjmp	.+54     	; 0x1e26 <__floatsisf+0x6c>
    1df0:	6f 5f       	subi	r22, 0xFF	; 255
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	16 c0       	rjmp	.+44     	; 0x1e26 <__floatsisf+0x6c>
    1dfa:	88 23       	and	r24, r24
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <__floatsisf+0x48>
    1dfe:	96 e9       	ldi	r25, 0x96	; 150
    1e00:	11 c0       	rjmp	.+34     	; 0x1e24 <__floatsisf+0x6a>
    1e02:	77 23       	and	r23, r23
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <__floatsisf+0x54>
    1e06:	9e e8       	ldi	r25, 0x8E	; 142
    1e08:	87 2f       	mov	r24, r23
    1e0a:	76 2f       	mov	r23, r22
    1e0c:	05 c0       	rjmp	.+10     	; 0x1e18 <__floatsisf+0x5e>
    1e0e:	66 23       	and	r22, r22
    1e10:	71 f0       	breq	.+28     	; 0x1e2e <__floatsisf+0x74>
    1e12:	96 e8       	ldi	r25, 0x86	; 134
    1e14:	86 2f       	mov	r24, r22
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	2a f0       	brmi	.+10     	; 0x1e26 <__floatsisf+0x6c>
    1e1c:	9a 95       	dec	r25
    1e1e:	66 0f       	add	r22, r22
    1e20:	77 1f       	adc	r23, r23
    1e22:	88 1f       	adc	r24, r24
    1e24:	da f7       	brpl	.-10     	; 0x1e1c <__floatsisf+0x62>
    1e26:	88 0f       	add	r24, r24
    1e28:	96 95       	lsr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	97 f9       	bld	r25, 7
    1e2e:	08 95       	ret

00001e30 <__fp_inf>:
    1e30:	97 f9       	bld	r25, 7
    1e32:	9f 67       	ori	r25, 0x7F	; 127
    1e34:	80 e8       	ldi	r24, 0x80	; 128
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	08 95       	ret

00001e3c <__fp_nan>:
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	80 ec       	ldi	r24, 0xC0	; 192
    1e40:	08 95       	ret

00001e42 <__fp_pscA>:
    1e42:	00 24       	eor	r0, r0
    1e44:	0a 94       	dec	r0
    1e46:	16 16       	cp	r1, r22
    1e48:	17 06       	cpc	r1, r23
    1e4a:	18 06       	cpc	r1, r24
    1e4c:	09 06       	cpc	r0, r25
    1e4e:	08 95       	ret

00001e50 <__fp_pscB>:
    1e50:	00 24       	eor	r0, r0
    1e52:	0a 94       	dec	r0
    1e54:	12 16       	cp	r1, r18
    1e56:	13 06       	cpc	r1, r19
    1e58:	14 06       	cpc	r1, r20
    1e5a:	05 06       	cpc	r0, r21
    1e5c:	08 95       	ret

00001e5e <__fp_round>:
    1e5e:	09 2e       	mov	r0, r25
    1e60:	03 94       	inc	r0
    1e62:	00 0c       	add	r0, r0
    1e64:	11 f4       	brne	.+4      	; 0x1e6a <__fp_round+0xc>
    1e66:	88 23       	and	r24, r24
    1e68:	52 f0       	brmi	.+20     	; 0x1e7e <__fp_round+0x20>
    1e6a:	bb 0f       	add	r27, r27
    1e6c:	40 f4       	brcc	.+16     	; 0x1e7e <__fp_round+0x20>
    1e6e:	bf 2b       	or	r27, r31
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <__fp_round+0x18>
    1e72:	60 ff       	sbrs	r22, 0
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <__fp_round+0x20>
    1e76:	6f 5f       	subi	r22, 0xFF	; 255
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	08 95       	ret

00001e80 <__fp_split3>:
    1e80:	57 fd       	sbrc	r21, 7
    1e82:	90 58       	subi	r25, 0x80	; 128
    1e84:	44 0f       	add	r20, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	59 f0       	breq	.+22     	; 0x1ea0 <__fp_splitA+0x10>
    1e8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e8c:	71 f0       	breq	.+28     	; 0x1eaa <__fp_splitA+0x1a>
    1e8e:	47 95       	ror	r20

00001e90 <__fp_splitA>:
    1e90:	88 0f       	add	r24, r24
    1e92:	97 fb       	bst	r25, 7
    1e94:	99 1f       	adc	r25, r25
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <__fp_splitA+0x20>
    1e98:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9a:	79 f0       	breq	.+30     	; 0x1eba <__fp_splitA+0x2a>
    1e9c:	87 95       	ror	r24
    1e9e:	08 95       	ret
    1ea0:	12 16       	cp	r1, r18
    1ea2:	13 06       	cpc	r1, r19
    1ea4:	14 06       	cpc	r1, r20
    1ea6:	55 1f       	adc	r21, r21
    1ea8:	f2 cf       	rjmp	.-28     	; 0x1e8e <__fp_split3+0xe>
    1eaa:	46 95       	lsr	r20
    1eac:	f1 df       	rcall	.-30     	; 0x1e90 <__fp_splitA>
    1eae:	08 c0       	rjmp	.+16     	; 0x1ec0 <__fp_splitA+0x30>
    1eb0:	16 16       	cp	r1, r22
    1eb2:	17 06       	cpc	r1, r23
    1eb4:	18 06       	cpc	r1, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	f1 cf       	rjmp	.-30     	; 0x1e9c <__fp_splitA+0xc>
    1eba:	86 95       	lsr	r24
    1ebc:	71 05       	cpc	r23, r1
    1ebe:	61 05       	cpc	r22, r1
    1ec0:	08 94       	sec
    1ec2:	08 95       	ret

00001ec4 <__fp_zero>:
    1ec4:	e8 94       	clt

00001ec6 <__fp_szero>:
    1ec6:	bb 27       	eor	r27, r27
    1ec8:	66 27       	eor	r22, r22
    1eca:	77 27       	eor	r23, r23
    1ecc:	cb 01       	movw	r24, r22
    1ece:	97 f9       	bld	r25, 7
    1ed0:	08 95       	ret

00001ed2 <__mulsf3>:
    1ed2:	0b d0       	rcall	.+22     	; 0x1eea <__mulsf3x>
    1ed4:	c4 cf       	rjmp	.-120    	; 0x1e5e <__fp_round>
    1ed6:	b5 df       	rcall	.-150    	; 0x1e42 <__fp_pscA>
    1ed8:	28 f0       	brcs	.+10     	; 0x1ee4 <__mulsf3+0x12>
    1eda:	ba df       	rcall	.-140    	; 0x1e50 <__fp_pscB>
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <__mulsf3+0x12>
    1ede:	95 23       	and	r25, r21
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <__mulsf3+0x12>
    1ee2:	a6 cf       	rjmp	.-180    	; 0x1e30 <__fp_inf>
    1ee4:	ab cf       	rjmp	.-170    	; 0x1e3c <__fp_nan>
    1ee6:	11 24       	eor	r1, r1
    1ee8:	ee cf       	rjmp	.-36     	; 0x1ec6 <__fp_szero>

00001eea <__mulsf3x>:
    1eea:	ca df       	rcall	.-108    	; 0x1e80 <__fp_split3>
    1eec:	a0 f3       	brcs	.-24     	; 0x1ed6 <__mulsf3+0x4>

00001eee <__mulsf3_pse>:
    1eee:	95 9f       	mul	r25, r21
    1ef0:	d1 f3       	breq	.-12     	; 0x1ee6 <__mulsf3+0x14>
    1ef2:	95 0f       	add	r25, r21
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	62 9f       	mul	r22, r18
    1efa:	f0 01       	movw	r30, r0
    1efc:	72 9f       	mul	r23, r18
    1efe:	bb 27       	eor	r27, r27
    1f00:	f0 0d       	add	r31, r0
    1f02:	b1 1d       	adc	r27, r1
    1f04:	63 9f       	mul	r22, r19
    1f06:	aa 27       	eor	r26, r26
    1f08:	f0 0d       	add	r31, r0
    1f0a:	b1 1d       	adc	r27, r1
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	64 9f       	mul	r22, r20
    1f10:	66 27       	eor	r22, r22
    1f12:	b0 0d       	add	r27, r0
    1f14:	a1 1d       	adc	r26, r1
    1f16:	66 1f       	adc	r22, r22
    1f18:	82 9f       	mul	r24, r18
    1f1a:	22 27       	eor	r18, r18
    1f1c:	b0 0d       	add	r27, r0
    1f1e:	a1 1d       	adc	r26, r1
    1f20:	62 1f       	adc	r22, r18
    1f22:	73 9f       	mul	r23, r19
    1f24:	b0 0d       	add	r27, r0
    1f26:	a1 1d       	adc	r26, r1
    1f28:	62 1f       	adc	r22, r18
    1f2a:	83 9f       	mul	r24, r19
    1f2c:	a0 0d       	add	r26, r0
    1f2e:	61 1d       	adc	r22, r1
    1f30:	22 1f       	adc	r18, r18
    1f32:	74 9f       	mul	r23, r20
    1f34:	33 27       	eor	r19, r19
    1f36:	a0 0d       	add	r26, r0
    1f38:	61 1d       	adc	r22, r1
    1f3a:	23 1f       	adc	r18, r19
    1f3c:	84 9f       	mul	r24, r20
    1f3e:	60 0d       	add	r22, r0
    1f40:	21 1d       	adc	r18, r1
    1f42:	82 2f       	mov	r24, r18
    1f44:	76 2f       	mov	r23, r22
    1f46:	6a 2f       	mov	r22, r26
    1f48:	11 24       	eor	r1, r1
    1f4a:	9f 57       	subi	r25, 0x7F	; 127
    1f4c:	50 40       	sbci	r21, 0x00	; 0
    1f4e:	8a f0       	brmi	.+34     	; 0x1f72 <__mulsf3_pse+0x84>
    1f50:	e1 f0       	breq	.+56     	; 0x1f8a <__mulsf3_pse+0x9c>
    1f52:	88 23       	and	r24, r24
    1f54:	4a f0       	brmi	.+18     	; 0x1f68 <__mulsf3_pse+0x7a>
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	bb 1f       	adc	r27, r27
    1f5c:	66 1f       	adc	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	91 50       	subi	r25, 0x01	; 1
    1f64:	50 40       	sbci	r21, 0x00	; 0
    1f66:	a9 f7       	brne	.-22     	; 0x1f52 <__mulsf3_pse+0x64>
    1f68:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	70 f0       	brcs	.+28     	; 0x1f8a <__mulsf3_pse+0x9c>
    1f6e:	60 cf       	rjmp	.-320    	; 0x1e30 <__fp_inf>
    1f70:	aa cf       	rjmp	.-172    	; 0x1ec6 <__fp_szero>
    1f72:	5f 3f       	cpi	r21, 0xFF	; 255
    1f74:	ec f3       	brlt	.-6      	; 0x1f70 <__mulsf3_pse+0x82>
    1f76:	98 3e       	cpi	r25, 0xE8	; 232
    1f78:	dc f3       	brlt	.-10     	; 0x1f70 <__mulsf3_pse+0x82>
    1f7a:	86 95       	lsr	r24
    1f7c:	77 95       	ror	r23
    1f7e:	67 95       	ror	r22
    1f80:	b7 95       	ror	r27
    1f82:	f7 95       	ror	r31
    1f84:	e7 95       	ror	r30
    1f86:	9f 5f       	subi	r25, 0xFF	; 255
    1f88:	c1 f7       	brne	.-16     	; 0x1f7a <__mulsf3_pse+0x8c>
    1f8a:	fe 2b       	or	r31, r30
    1f8c:	88 0f       	add	r24, r24
    1f8e:	91 1d       	adc	r25, r1
    1f90:	96 95       	lsr	r25
    1f92:	87 95       	ror	r24
    1f94:	97 f9       	bld	r25, 7
    1f96:	08 95       	ret

00001f98 <__mulsi3>:
    1f98:	62 9f       	mul	r22, r18
    1f9a:	d0 01       	movw	r26, r0
    1f9c:	73 9f       	mul	r23, r19
    1f9e:	f0 01       	movw	r30, r0
    1fa0:	82 9f       	mul	r24, r18
    1fa2:	e0 0d       	add	r30, r0
    1fa4:	f1 1d       	adc	r31, r1
    1fa6:	64 9f       	mul	r22, r20
    1fa8:	e0 0d       	add	r30, r0
    1faa:	f1 1d       	adc	r31, r1
    1fac:	92 9f       	mul	r25, r18
    1fae:	f0 0d       	add	r31, r0
    1fb0:	83 9f       	mul	r24, r19
    1fb2:	f0 0d       	add	r31, r0
    1fb4:	74 9f       	mul	r23, r20
    1fb6:	f0 0d       	add	r31, r0
    1fb8:	65 9f       	mul	r22, r21
    1fba:	f0 0d       	add	r31, r0
    1fbc:	99 27       	eor	r25, r25
    1fbe:	72 9f       	mul	r23, r18
    1fc0:	b0 0d       	add	r27, r0
    1fc2:	e1 1d       	adc	r30, r1
    1fc4:	f9 1f       	adc	r31, r25
    1fc6:	63 9f       	mul	r22, r19
    1fc8:	b0 0d       	add	r27, r0
    1fca:	e1 1d       	adc	r30, r1
    1fcc:	f9 1f       	adc	r31, r25
    1fce:	bd 01       	movw	r22, r26
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	11 24       	eor	r1, r1
    1fd4:	08 95       	ret

00001fd6 <_exit>:
    1fd6:	f8 94       	cli

00001fd8 <__stop_program>:
    1fd8:	ff cf       	rjmp	.-2      	; 0x1fd8 <__stop_program>
