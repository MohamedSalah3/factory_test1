
factory_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001ca4  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  00800096  00800096  00001d6e  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb9  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  00005fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b47  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a0c  00000000  00000000  0000754c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4e  00000000  00000000  00007f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f2  00000000  00000000  000089a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_1>
       8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_2>
       c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_3>
      10:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_4>
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_5>
      18:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_6>
      1c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_7>
      20:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_8>
      24:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_9>
      28:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_10>
      2c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_11>
      30:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_12>
      34:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_13>
      38:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_14>
      3c:	0c 94 91 03 	jmp	0x722	; 0x722 <__vector_15>
      40:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_16>
      44:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_17>
      48:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_18>
      4c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_19>
      50:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 01 	call	0x282	; 0x282 <main>
      8a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
      92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
      94:	82 81       	ldd	r24, Z+2	; 0x02
      96:	88 23       	and	r24, r24
      98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
      9a:	8f 3f       	cpi	r24, 0xFF	; 255
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
      9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
      a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
      a2:	80 81       	ld	r24, Z
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
      a8:	81 30       	cpi	r24, 0x01	; 1
      aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
      b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
      b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
      b8:	9a b3       	in	r25, 0x1a	; 26
      ba:	81 81       	ldd	r24, Z+1	; 0x01
      bc:	80 95       	com	r24
      be:	89 23       	and	r24, r25
      c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
      c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
      c6:	97 b3       	in	r25, 0x17	; 23
      c8:	81 81       	ldd	r24, Z+1	; 0x01
      ca:	80 95       	com	r24
      cc:	89 23       	and	r24, r25
      ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
      d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
      d4:	94 b3       	in	r25, 0x14	; 20
      d6:	81 81       	ldd	r24, Z+1	; 0x01
      d8:	80 95       	com	r24
      da:	89 23       	and	r24, r25
      dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
      e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
      e2:	91 b3       	in	r25, 0x11	; 17
      e4:	81 81       	ldd	r24, Z+1	; 0x01
      e6:	80 95       	com	r24
      e8:	89 23       	and	r24, r25
      ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
      ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
      ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
      f0:	80 81       	ld	r24, Z
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
     102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
     104:	9a b3       	in	r25, 0x1a	; 26
     106:	81 81       	ldd	r24, Z+1	; 0x01
     108:	89 2b       	or	r24, r25
     10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
     10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
     110:	97 b3       	in	r25, 0x17	; 23
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	89 2b       	or	r24, r25
     116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
     11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
     11c:	94 b3       	in	r25, 0x14	; 20
     11e:	81 81       	ldd	r24, Z+1	; 0x01
     120:	89 2b       	or	r24, r25
     122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
     126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
     128:	91 b3       	in	r25, 0x11	; 17
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
     132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
     13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
     140:	44 23       	and	r20, r20
     142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
     144:	4f 3f       	cpi	r20, 0xFF	; 255
     146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
     14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
     154:	82 30       	cpi	r24, 0x02	; 2
     156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
     158:	83 30       	cpi	r24, 0x03	; 3
     15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
     15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
     15e:	8b b3       	in	r24, 0x1b	; 27
     160:	60 95       	com	r22
     162:	68 23       	and	r22, r24
     164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
     168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
     16a:	88 b3       	in	r24, 0x18	; 24
     16c:	60 95       	com	r22
     16e:	68 23       	and	r22, r24
     170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
     174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
     176:	85 b3       	in	r24, 0x15	; 21
     178:	60 95       	com	r22
     17a:	68 23       	and	r22, r24
     17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
     180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
     182:	82 b3       	in	r24, 0x12	; 18
     184:	60 95       	com	r22
     186:	68 23       	and	r22, r24
     188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
     18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
     19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
     1a0:	8b b3       	in	r24, 0x1b	; 27
     1a2:	68 2b       	or	r22, r24
     1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
     1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
     1aa:	88 b3       	in	r24, 0x18	; 24
     1ac:	68 2b       	or	r22, r24
     1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
     1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
     1b4:	85 b3       	in	r24, 0x15	; 21
     1b6:	68 2b       	or	r22, r24
     1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
     1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
     1be:	82 b3       	in	r24, 0x12	; 18
     1c0:	68 2b       	or	r22, r24
     1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
     1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
     1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     1d4:	fa 01       	movw	r30, r20

switch (GPIO)
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
     1de:	82 30       	cpi	r24, 0x02	; 2
     1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
     1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
     1e8:	89 b3       	in	r24, 0x19	; 25
     1ea:	68 23       	and	r22, r24
     1ec:	60 83       	st	Z, r22
	break;
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
     1f0:	86 b3       	in	r24, 0x16	; 22
     1f2:	68 23       	and	r22, r24
     1f4:	60 83       	st	Z, r22
	break;
     1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
     1f8:	83 b3       	in	r24, 0x13	; 19
     1fa:	68 23       	and	r22, r24
     1fc:	60 83       	st	Z, r22
	break;
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
     200:	80 b3       	in	r24, 0x10	; 16
     202:	68 23       	and	r22, r24
     204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 83       	st	Z, r24
}


}
     210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
     222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
     224:	8b b3       	in	r24, 0x1b	; 27
     226:	68 27       	eor	r22, r24
     228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
     22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
     22e:	88 b3       	in	r24, 0x18	; 24
     230:	68 27       	eor	r22, r24
     232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
     234:	80 e0       	ldi	r24, 0x00	; 0
		break;
     236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
     238:	85 b3       	in	r24, 0x15	; 21
     23a:	68 27       	eor	r22, r24
     23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
     240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
     242:	82 b3       	in	r24, 0x12	; 18
     244:	68 27       	eor	r22, r24
     246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
     248:	80 e0       	ldi	r24, 0x00	; 0
		break;
     24a:	08 95       	ret
		default:
		ret=E_NOK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
     24e:	08 95       	ret

00000250 <system_init>:

#include "motor.h"
#include "pushButton.h"
#include "SOS.h"
void system_init(void){	
SOS_Init (&TMU_Configuration);
     250:	81 e8       	ldi	r24, 0x81	; 129
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 6e 08 	call	0x10dc	; 0x10dc <SOS_Init>
SOS_Create_Task(Task1,1,0,5);
     258:	8a e5       	ldi	r24, 0x5A	; 90
     25a:	99 e0       	ldi	r25, 0x09	; 9
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	25 e0       	ldi	r18, 0x05	; 5
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	0e 94 c1 08 	call	0x1182	; 0x1182 <SOS_Create_Task>
//SOS_Create_Task(Task2,1,0,5);
DIO_init(&ALL_Motor);
     268:	8e e6       	ldi	r24, 0x6E	; 110
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
PORTB_DIR=0;
     270:	17 ba       	out	0x17, r1	; 23
Motor_Init(MOTOR_1|MOTOR_2);
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Motor_Init>
Motor_Direction(MOTOR_1|MOTOR_2,MOTOR_FORWARD);
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_Direction>
}
     280:	08 95       	ret

00000282 <main>:

int main(void)
{
  system_init();
     282:	0e 94 28 01 	call	0x250	; 0x250 <system_init>
    while(1)
    {
	 SOS_Run();
     286:	0e 94 de 08 	call	0x11bc	; 0x11bc <SOS_Run>
     28a:	fd cf       	rjmp	.-6      	; 0x286 <main+0x4>

0000028c <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     28c:	8f b7       	in	r24, 0x3f	; 63
     28e:	80 68       	ori	r24, 0x80	; 128
     290:	8f bf       	out	0x3f, r24	; 63
}
     292:	08 95       	ret

00000294 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     294:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     296:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     298:	8b b7       	in	r24, 0x3b	; 59
     29a:	80 62       	ori	r24, 0x20	; 32
     29c:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     29e:	84 b7       	in	r24, 0x34	; 52
     2a0:	80 64       	ori	r24, 0x40	; 64
     2a2:	84 bf       	out	0x34, r24	; 52
}
     2a4:	08 95       	ret

000002a6 <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     2a6:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     2a8:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     2aa:	8b b7       	in	r24, 0x3b	; 59
     2ac:	80 68       	ori	r24, 0x80	; 128
     2ae:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     2b0:	85 b7       	in	r24, 0x35	; 53
     2b2:	84 60       	ori	r24, 0x04	; 4
     2b4:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     2b6:	85 b7       	in	r24, 0x35	; 53
     2b8:	87 7f       	andi	r24, 0xF7	; 247
     2ba:	85 bf       	out	0x35, r24	; 53
	
}
     2bc:	08 95       	ret

000002be <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     2be:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     2c0:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     2c2:	8b b7       	in	r24, 0x3b	; 59
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     2c8:	85 b7       	in	r24, 0x35	; 53
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     2ce:	85 b7       	in	r24, 0x35	; 53
     2d0:	8d 7f       	andi	r24, 0xFD	; 253
     2d2:	85 bf       	out	0x35, r24	; 53
	
}
     2d4:	08 95       	ret

000002d6 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2d6:	8f b7       	in	r24, 0x3f	; 63
     2d8:	8f 77       	andi	r24, 0x7F	; 127
     2da:	8f bf       	out	0x3f, r24	; 63
}
     2dc:	08 95       	ret

000002de <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	ef 93       	push	r30
     2fe:	ff 93       	push	r31
  INT0_external_interrupt();
     300:	e0 91 2a 01 	lds	r30, 0x012A
     304:	f0 91 2b 01 	lds	r31, 0x012B
     308:	09 95       	icall
}
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	7f 91       	pop	r23
     318:	6f 91       	pop	r22
     31a:	5f 91       	pop	r21
     31c:	4f 91       	pop	r20
     31e:	3f 91       	pop	r19
     320:	2f 91       	pop	r18
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
     326:	0f 90       	pop	r0
     328:	1f 90       	pop	r1
     32a:	18 95       	reti

0000032c <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	11 24       	eor	r1, r1
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
  INT1_external_interrupt();
     34e:	e0 91 32 01 	lds	r30, 0x0132
     352:	f0 91 33 01 	lds	r31, 0x0133
     356:	09 95       	icall
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	5f 93       	push	r21
     38c:	6f 93       	push	r22
     38e:	7f 93       	push	r23
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	af 93       	push	r26
     396:	bf 93       	push	r27
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
  INT2_external_interrupt();
     39c:	e0 91 22 01 	lds	r30, 0x0122
     3a0:	f0 91 23 01 	lds	r31, 0x0123
     3a4:	09 95       	icall
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	2f 93       	push	r18
     3d4:	3f 93       	push	r19
     3d6:	4f 93       	push	r20
     3d8:	5f 93       	push	r21
     3da:	6f 93       	push	r22
     3dc:	7f 93       	push	r23
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
TIMER2COMP();
     3ea:	e0 91 38 01 	lds	r30, 0x0138
     3ee:	f0 91 39 01 	lds	r31, 0x0139
     3f2:	09 95       	icall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	2f 93       	push	r18
     422:	3f 93       	push	r19
     424:	4f 93       	push	r20
     426:	5f 93       	push	r21
     428:	6f 93       	push	r22
     42a:	7f 93       	push	r23
     42c:	8f 93       	push	r24
     42e:	9f 93       	push	r25
     430:	af 93       	push	r26
     432:	bf 93       	push	r27
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
  TIMER2OVF();
     438:	e0 91 18 01 	lds	r30, 0x0118
     43c:	f0 91 19 01 	lds	r31, 0x0119
     440:	09 95       	icall
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	bf 91       	pop	r27
     448:	af 91       	pop	r26
     44a:	9f 91       	pop	r25
     44c:	8f 91       	pop	r24
     44e:	7f 91       	pop	r23
     450:	6f 91       	pop	r22
     452:	5f 91       	pop	r21
     454:	4f 91       	pop	r20
     456:	3f 91       	pop	r19
     458:	2f 91       	pop	r18
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	2f 93       	push	r18
     470:	3f 93       	push	r19
     472:	4f 93       	push	r20
     474:	5f 93       	push	r21
     476:	6f 93       	push	r22
     478:	7f 93       	push	r23
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	af 93       	push	r26
     480:	bf 93       	push	r27
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
  TIMER1CAPT();
     486:	e0 91 34 01 	lds	r30, 0x0134
     48a:	f0 91 35 01 	lds	r31, 0x0135
     48e:	09 95       	icall
}
     490:	ff 91       	pop	r31
     492:	ef 91       	pop	r30
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
     4d2:	ff 93       	push	r31
TIMER1COMPA();
     4d4:	e0 91 1e 01 	lds	r30, 0x011E
     4d8:	f0 91 1f 01 	lds	r31, 0x011F
     4dc:	09 95       	icall
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	4f 93       	push	r20
     510:	5f 93       	push	r21
     512:	6f 93       	push	r22
     514:	7f 93       	push	r23
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
     51a:	af 93       	push	r26
     51c:	bf 93       	push	r27
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
  TIMER1COMPB();
     522:	e0 91 1c 01 	lds	r30, 0x011C
     526:	f0 91 1d 01 	lds	r31, 0x011D
     52a:	09 95       	icall
}
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
  TIMER1OVF();
     570:	e0 91 36 01 	lds	r30, 0x0136
     574:	f0 91 37 01 	lds	r31, 0x0137
     578:	09 95       	icall
}
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31

  TIMER0COMP();
     5be:	e0 91 2e 01 	lds	r30, 0x012E
     5c2:	f0 91 2f 01 	lds	r31, 0x012F
     5c6:	09 95       	icall
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5ea:	1f 92       	push	r1
     5ec:	0f 92       	push	r0
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	0f 92       	push	r0
     5f2:	11 24       	eor	r1, r1
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31

  TIMER0OVF_INT();
     60c:	e0 91 6c 00 	lds	r30, 0x006C
     610:	f0 91 6d 00 	lds	r31, 0x006D
     614:	09 95       	icall
}
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
  SPI_STC();
     65a:	e0 91 20 01 	lds	r30, 0x0120
     65e:	f0 91 21 01 	lds	r31, 0x0121
     662:	09 95       	icall
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
  USART_RXC();
     6a8:	e0 91 16 01 	lds	r30, 0x0116
     6ac:	f0 91 17 01 	lds	r31, 0x0117
     6b0:	09 95       	icall
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
  USART_UDRE();
     6f6:	e0 91 30 01 	lds	r30, 0x0130
     6fa:	f0 91 31 01 	lds	r31, 0x0131
     6fe:	09 95       	icall
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	bf 91       	pop	r27
     706:	af 91       	pop	r26
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	7f 91       	pop	r23
     70e:	6f 91       	pop	r22
     710:	5f 91       	pop	r21
     712:	4f 91       	pop	r20
     714:	3f 91       	pop	r19
     716:	2f 91       	pop	r18
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     722:	1f 92       	push	r1
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
  USART_TXC();
     744:	e0 91 2c 01 	lds	r30, 0x012C
     748:	f0 91 2d 01 	lds	r31, 0x012D
     74c:	09 95       	icall
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
  ADC_INT();
     792:	e0 91 26 01 	lds	r30, 0x0126
     796:	f0 91 27 01 	lds	r31, 0x0127
     79a:	09 95       	icall
}
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
  EE_RDY();
     7e0:	e0 91 28 01 	lds	r30, 0x0128
     7e4:	f0 91 29 01 	lds	r31, 0x0129
     7e8:	09 95       	icall
}
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  ANA_COMP();
     82e:	e0 91 24 01 	lds	r30, 0x0124
     832:	f0 91 25 01 	lds	r31, 0x0125
     836:	09 95       	icall
}
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
  TWI_I2C();
     87c:	e0 91 14 01 	lds	r30, 0x0114
     880:	f0 91 15 01 	lds	r31, 0x0115
     884:	09 95       	icall
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
  SPM_RDY();
     8ca:	e0 91 1a 01 	lds	r30, 0x011A
     8ce:	f0 91 1b 01 	lds	r31, 0x011B
     8d2:	09 95       	icall
}
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	79 f0       	breq	.+30     	; 0x918 <Motor_Init+0x22>
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	c9 f0       	breq	.+50     	; 0x930 <Motor_Init+0x3a>
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	39 f5       	brne	.+78     	; 0x950 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     902:	80 93 96 00 	sts	0x0096, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     906:	8f e7       	ldi	r24, 0x7F	; 127
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Pwm_Init>
			Ret=DIO_init(&Motorone);
     90e:	84 e7       	ldi	r24, 0x74	; 116
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

			  break;
     916:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	80 93 96 00 	sts	0x0096, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     91e:	8d e7       	ldi	r24, 0x7D	; 125
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     926:	81 e7       	ldi	r24, 0x71	; 113
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     92e:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	80 93 96 00 	sts	0x0096, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     936:	8f e7       	ldi	r24, 0x7F	; 127
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     93e:	8d e7       	ldi	r24, 0x7D	; 125
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     946:	8e e6       	ldi	r24, 0x6E	; 110
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     94e:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     950:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     952:	08 95       	ret

00000954 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	79 f1       	breq	.+94     	; 0x9b6 <Motor_Direction+0x62>
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	09 f4       	brne	.+2      	; 0x95e <Motor_Direction+0xa>
     95c:	55 c0       	rjmp	.+170    	; 0xa08 <Motor_Direction+0xb4>
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	09 f0       	breq	.+2      	; 0x964 <Motor_Direction+0x10>
     962:	99 c0       	rjmp	.+306    	; 0xa96 <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     964:	61 30       	cpi	r22, 0x01	; 1
     966:	31 f0       	breq	.+12     	; 0x974 <Motor_Direction+0x20>
     968:	61 30       	cpi	r22, 0x01	; 1
     96a:	d0 f0       	brcs	.+52     	; 0x9a0 <Motor_Direction+0x4c>
     96c:	62 30       	cpi	r22, 0x02	; 2
     96e:	09 f0       	breq	.+2      	; 0x972 <Motor_Direction+0x1e>
     970:	94 c0       	rjmp	.+296    	; 0xa9a <Motor_Direction+0x146>
     972:	0b c0       	rjmp	.+22     	; 0x98a <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	64 e0       	ldi	r22, 0x04	; 4
     978:	4f ef       	ldi	r20, 0xFF	; 255
     97a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	68 e0       	ldi	r22, 0x08	; 8
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     988:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	68 e0       	ldi	r22, 0x08	; 8
     98e:	4f ef       	ldi	r20, 0xFF	; 255
     990:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	64 e0       	ldi	r22, 0x04	; 4
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     99e:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	64 e0       	ldi	r22, 0x04	; 4
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	68 e0       	ldi	r22, 0x08	; 8
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		break;}
     9b4:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     9b6:	61 30       	cpi	r22, 0x01	; 1
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <Motor_Direction+0x72>
     9ba:	61 30       	cpi	r22, 0x01	; 1
     9bc:	d0 f0       	brcs	.+52     	; 0x9f2 <Motor_Direction+0x9e>
     9be:	62 30       	cpi	r22, 0x02	; 2
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <Motor_Direction+0x70>
     9c2:	6d c0       	rjmp	.+218    	; 0xa9e <Motor_Direction+0x14a>
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	4f ef       	ldi	r20, 0xFF	; 255
     9cc:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  				break;
     9da:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	4f ef       	ldi	r20, 0xFF	; 255
     9e2:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     9f0:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     a06:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     a08:	61 30       	cpi	r22, 0x01	; 1
     a0a:	31 f0       	breq	.+12     	; 0xa18 <Motor_Direction+0xc4>
     a0c:	61 30       	cpi	r22, 0x01	; 1
     a0e:	70 f1       	brcs	.+92     	; 0xa6c <Motor_Direction+0x118>
     a10:	62 30       	cpi	r22, 0x02	; 2
     a12:	09 f0       	breq	.+2      	; 0xa16 <Motor_Direction+0xc2>
     a14:	46 c0       	rjmp	.+140    	; 0xaa2 <Motor_Direction+0x14e>
     a16:	15 c0       	rjmp	.+42     	; 0xa42 <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	64 e0       	ldi	r22, 0x04	; 4
     a1c:	4f ef       	ldi	r20, 0xFF	; 255
     a1e:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	68 e0       	ldi	r22, 0x08	; 8
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	62 e0       	ldi	r22, 0x02	; 2
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     a40:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	64 e0       	ldi	r22, 0x04	; 4
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	68 e0       	ldi	r22, 0x08	; 8
     a50:	4f ef       	ldi	r20, 0xFF	; 255
     a52:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	4f ef       	ldi	r20, 0xFF	; 255
     a5c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;	}
     a6a:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	64 e0       	ldi	r22, 0x04	; 4
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	68 e0       	ldi	r22, 0x08	; 8
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     a94:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	08 95       	ret
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     aa2:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     aa4:	08 95       	ret

00000aa6 <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	69 f0       	breq	.+26     	; 0xac4 <Motor_Start+0x1e>
     aaa:	83 30       	cpi	r24, 0x03	; 3
     aac:	a9 f0       	breq	.+42     	; 0xad8 <Motor_Start+0x32>
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	f1 f4       	brne	.+60     	; 0xaee <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     ab2:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,31372);
     ab6:	2c e8       	ldi	r18, 0x8C	; 140
     ab8:	3a e7       	ldi	r19, 0x7A	; 122
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
    break;
     ac2:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     aca:	2c e8       	ldi	r18, 0x8C	; 140
     acc:	3a e7       	ldi	r19, 0x7A	; 122
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
    break;
     ad6:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	2c e8       	ldi	r18, 0x8C	; 140
     ae2:	3a e7       	ldi	r19, 0x7A	; 122
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
    break;
     aec:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     aee:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     af0:	08 95       	ret

00000af2 <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	79 f0       	breq	.+30     	; 0xb14 <Motor_SpeedUpdate+0x22>
     af6:	83 30       	cpi	r24, 0x03	; 3
     af8:	c1 f0       	breq	.+48     	; 0xb2a <Motor_SpeedUpdate+0x38>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	11 f5       	brne	.+68     	; 0xb42 <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     afe:	80 91 96 00 	lds	r24, 0x0096
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	01 f5       	brne	.+64     	; 0xb46 <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     b06:	2e e1       	ldi	r18, 0x1E	; 30
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
     b12:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     b14:	80 91 96 00 	lds	r24, 0x0096
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	b9 f4       	brne	.+46     	; 0xb4a <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     b1c:	2e e1       	ldi	r18, 0x1E	; 30
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
     b28:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     b2a:	80 91 96 00 	lds	r24, 0x0096
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	71 f4       	brne	.+28     	; 0xb4e <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	2e e1       	ldi	r18, 0x1E	; 30
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
     b40:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     b4e:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     b50:	08 95       	ret

00000b52 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	19 f0       	breq	.+6      	; 0xb5c <Motor_Stop+0xa>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	49 f4       	brne	.+18     	; 0xb6c <Motor_Stop+0x1a>
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 55 08 	call	0x10aa	; 0x10aa <Pwm_Stop>
		break;
     b62:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 55 08 	call	0x10aa	; 0x10aa <Pwm_Stop>
		break;
     b6a:	08 95       	ret
		default:
		Ret=E_NOK;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     b6e:	08 95       	ret

00000b70 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     b70:	90 91 96 00 	lds	r25, 0x0096
     b74:	98 17       	cp	r25, r24
     b76:	21 f4       	brne	.+8      	; 0xb80 <Motor_GetStatus+0x10>
		*Mot_status=1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	fb 01       	movw	r30, r22
     b7c:	80 83       	st	Z, r24
     b7e:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     b80:	fb 01       	movw	r30, r22
     b82:	10 82       	st	Z, r1
	 }
	 
 }
     b84:	08 95       	ret

00000b86 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
static uint8_t u8_Button_press[3];
static uint8_t u8_S_button_status[3];
switch(en_butotn_id)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	c1 f0       	breq	.+48     	; 0xbba <pushButtonGetStatus+0x34>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	18 f0       	brcs	.+6      	; 0xb94 <pushButtonGetStatus+0xe>
     b8e:	82 30       	cpi	r24, 0x02	; 2
     b90:	d1 f5       	brne	.+116    	; 0xc06 <pushButtonGetStatus+0x80>
     b92:	26 c0       	rjmp	.+76     	; 0xbe0 <pushButtonGetStatus+0x5a>
{
case BTN_0:
{DIO_Read(BTN_0_GPIO,BTN_0_BIT,&(u8_Button_press[0]));
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	48 e9       	ldi	r20, 0x98	; 152
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[0]== Pressed)
     ba0:	80 91 98 00 	lds	r24, 0x0098
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	81 f5       	brne	.+96     	; 0xc08 <pushButtonGetStatus+0x82>
{ 
	(u8_S_button_status[0])++;
     ba8:	90 91 9b 00 	lds	r25, 0x009B
     bac:	9f 5f       	subi	r25, 0xFF	; 255
     bae:	90 93 9b 00 	sts	0x009B, r25
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     bb2:	95 36       	cpi	r25, 0x65	; 101
     bb4:	70 f5       	brcc	.+92     	; 0xc12 <pushButtonGetStatus+0x8c>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_1:
{DIO_Read(BTN_1_GPIO,BTN_1_BIT,&(u8_Button_press[1]));
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	49 e9       	ldi	r20, 0x99	; 153
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[1] == Pressed)
     bc6:	80 91 99 00 	lds	r24, 0x0099
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	f9 f4       	brne	.+62     	; 0xc0c <pushButtonGetStatus+0x86>
{
	(u8_S_button_status[0])++;
     bce:	90 91 9b 00 	lds	r25, 0x009B
     bd2:	9f 5f       	subi	r25, 0xFF	; 255
     bd4:	90 93 9b 00 	sts	0x009B, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     bd8:	93 33       	cpi	r25, 0x33	; 51
     bda:	d8 f4       	brcc	.+54     	; 0xc12 <pushButtonGetStatus+0x8c>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_2:
{DIO_Read(BTN_2_GPIO,BTN_2_BIT,&(u8_Button_press[2]));
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	64 e0       	ldi	r22, 0x04	; 4
     be4:	4a e9       	ldi	r20, 0x9A	; 154
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if((u8_Button_press[2])== Pressed)
     bec:	80 91 9a 00 	lds	r24, 0x009A
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	71 f4       	brne	.+28     	; 0xc10 <pushButtonGetStatus+0x8a>
{	(u8_S_button_status[1])++;
     bf4:	90 91 9c 00 	lds	r25, 0x009C
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	90 93 9c 00 	sts	0x009C, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 100)
	return Pressed;
     bfe:	95 31       	cpi	r25, 0x15	; 21
     c00:	40 f4       	brcc	.+16     	; 0xc12 <pushButtonGetStatus+0x8c>
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
     c06:	08 95       	ret
	else {return Released;}
}else{return Released;}
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
return Pressed;
	else {return Released;}
}else{return Released;}
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[1]) > 20)
	return Pressed;
else {return Released;}
}else{return Released;}
     c10:	80 e0       	ldi	r24, 0x00	; 0


	}


}
     c12:	08 95       	ret

00000c14 <pushButtonGetState>:
{
static uint8_t u8_state_of_Button;

static uint8_t com=0;
	
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com]))//pushButtonGetStatus(BTN_0)== Released)
     c14:	40 91 9e 00 	lds	r20, 0x009E
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	41 56       	subi	r20, 0x61	; 97
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     c26:	88 23       	and	r24, r24
     c28:	81 f0       	breq	.+32     	; 0xc4a <pushButtonGetState+0x36>
{
	
	if (flag == 0)
     c2a:	80 91 77 00 	lds	r24, 0x0077
     c2e:	88 23       	and	r24, r24
     c30:	41 f4       	brne	.+16     	; 0xc42 <pushButtonGetState+0x2e>
	{
	counter++;
     c32:	80 91 03 01 	lds	r24, 0x0103
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	80 93 03 01 	sts	0x0103, r24
	flag = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 77 00 	sts	0x0077, r24
	}
	counter2=0;
     c42:	10 92 04 01 	sts	0x0104, r1
	flag2=0;
     c46:	10 92 78 00 	sts	0x0078, r1
}
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com])==0)//pushButtonGetStatus(BTN_0) == Pressed)
     c4a:	40 91 9e 00 	lds	r20, 0x009E
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	41 56       	subi	r20, 0x61	; 97
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     c5c:	88 23       	and	r24, r24
     c5e:	e9 f4       	brne	.+58     	; 0xc9a <pushButtonGetState+0x86>
{	
	if (counter<20)
     c60:	80 91 03 01 	lds	r24, 0x0103
     c64:	84 31       	cpi	r24, 0x14	; 20
     c66:	18 f4       	brcc	.+6      	; 0xc6e <pushButtonGetState+0x5a>
	{
		ret_state = 0 ;
     c68:	10 92 05 01 	sts	0x0105, r1
     c6c:	0d c0       	rjmp	.+26     	; 0xc88 <pushButtonGetState+0x74>
	}else if(counter >20 && counter<50)
     c6e:	98 2f       	mov	r25, r24
     c70:	95 51       	subi	r25, 0x15	; 21
     c72:	9d 31       	cpi	r25, 0x1D	; 29
     c74:	20 f4       	brcc	.+8      	; 0xc7e <pushButtonGetState+0x6a>
	{
		ret_state=1;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 05 01 	sts	0x0105, r24
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <pushButtonGetState+0x74>
	}else if(counter >50){
     c7e:	83 33       	cpi	r24, 0x33	; 51
     c80:	18 f0       	brcs	.+6      	; 0xc88 <pushButtonGetState+0x74>
		ret_state=3;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	80 93 05 01 	sts	0x0105, r24
	}
		flag = 0;
     c88:	10 92 77 00 	sts	0x0077, r1
		counter2++;
     c8c:	80 91 04 01 	lds	r24, 0x0104
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	80 93 04 01 	sts	0x0104, r24
		counter=0;
     c96:	10 92 03 01 	sts	0x0103, r1
}
if (com<=100)
     c9a:	80 91 9e 00 	lds	r24, 0x009E
     c9e:	85 36       	cpi	r24, 0x65	; 101
     ca0:	20 f4       	brcc	.+8      	; 0xcaa <pushButtonGetState+0x96>
{
	com++;
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 93 9e 00 	sts	0x009E, r24
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <pushButtonGetState+0x9a>
}else{
com=0;/*
     caa:	10 92 9e 00 	sts	0x009E, r1
//arr_u8_instant_state[com++]=counter;



return ret_state;
}/*
     cae:	80 91 05 01 	lds	r24, 0x0105
     cb2:	08 95       	ret

00000cb4 <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
     cb4:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
     cb6:	80 81       	ld	r24, Z
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	61 f0       	breq	.+24     	; 0xcd4 <Pwm_Init+0x20>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	28 f0       	brcs	.+10     	; 0xcca <Pwm_Init+0x16>
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	81 f0       	breq	.+32     	; 0xce4 <Pwm_Init+0x30>
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	d9 f4       	brne	.+54     	; 0xcfe <Pwm_Init+0x4a>
     cc8:	15 c0       	rjmp	.+42     	; 0xcf4 <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     cca:	83 b7       	in	r24, 0x33	; 51
     ccc:	88 66       	ori	r24, 0x68	; 104
     cce:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
     cd0:	80 e0       	ldi	r24, 0x00	; 0
			break;
     cd2:	16 c0       	rjmp	.+44     	; 0xd00 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
     cd4:	8e b5       	in	r24, 0x2e	; 46
     cd6:	9f b5       	in	r25, 0x2f	; 47
     cd8:	80 62       	ori	r24, 0x20	; 32
     cda:	91 6a       	ori	r25, 0xA1	; 161
     cdc:	9f bd       	out	0x2f, r25	; 47
     cde:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
			break;
     ce2:	0e c0       	rjmp	.+28     	; 0xd00 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
     ce4:	8e b5       	in	r24, 0x2e	; 46
     ce6:	9f b5       	in	r25, 0x2f	; 47
     ce8:	80 62       	ori	r24, 0x20	; 32
     cea:	91 6a       	ori	r25, 0xA1	; 161
     cec:	9f bd       	out	0x2f, r25	; 47
     cee:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
			break;
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
     cf4:	85 b5       	in	r24, 0x25	; 37
     cf6:	88 66       	ori	r24, 0x68	; 104
     cf8:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
			break;
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	90 93 06 01 	sts	0x0106, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
     d06:	08 95       	ret

00000d08 <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	89 01       	movw	r16, r18
     d16:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     d18:	0f 2e       	mov	r0, r31
     d1a:	fe ea       	ldi	r31, 0xAE	; 174
     d1c:	cf 2e       	mov	r12, r31
     d1e:	f0 ef       	ldi	r31, 0xF0	; 240
     d20:	df 2e       	mov	r13, r31
     d22:	ff ef       	ldi	r31, 0xFF	; 255
     d24:	ef 2e       	mov	r14, r31
     d26:	ff ef       	ldi	r31, 0xFF	; 255
     d28:	ff 2e       	mov	r15, r31
     d2a:	f0 2d       	mov	r31, r0
     d2c:	c0 0e       	add	r12, r16
     d2e:	d1 1e       	adc	r13, r17
     d30:	e2 1e       	adc	r14, r18
     d32:	f3 1e       	adc	r15, r19
     d34:	9b e3       	ldi	r25, 0x3B	; 59
     d36:	c9 16       	cp	r12, r25
     d38:	9b e6       	ldi	r25, 0x6B	; 107
     d3a:	d9 06       	cpc	r13, r25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	e9 06       	cpc	r14, r25
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	f9 06       	cpc	r15, r25
     d44:	18 f4       	brcc	.+6      	; 0xd4c <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
     d46:	10 92 06 01 	sts	0x0106, r1
     d4a:	a2 c0       	rjmp	.+324    	; 0xe90 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
     d4c:	0f 2e       	mov	r0, r31
     d4e:	fb e2       	ldi	r31, 0x2B	; 43
     d50:	cf 2e       	mov	r12, r31
     d52:	fc ef       	ldi	r31, 0xFC	; 252
     d54:	df 2e       	mov	r13, r31
     d56:	ff ef       	ldi	r31, 0xFF	; 255
     d58:	ef 2e       	mov	r14, r31
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	ff 2e       	mov	r15, r31
     d5e:	f0 2d       	mov	r31, r0
     d60:	c0 0e       	add	r12, r16
     d62:	d1 1e       	adc	r13, r17
     d64:	e2 1e       	adc	r14, r18
     d66:	f3 1e       	adc	r15, r19
     d68:	9d e7       	ldi	r25, 0x7D	; 125
     d6a:	c9 16       	cp	r12, r25
     d6c:	9b e0       	ldi	r25, 0x0B	; 11
     d6e:	d9 06       	cpc	r13, r25
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	e9 06       	cpc	r14, r25
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	f9 06       	cpc	r15, r25
     d78:	20 f4       	brcc	.+8      	; 0xd82 <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	90 93 06 01 	sts	0x0106, r25
     d80:	a5 c0       	rjmp	.+330    	; 0xecc <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
     d82:	0f 2e       	mov	r0, r31
     d84:	f5 e1       	ldi	r31, 0x15	; 21
     d86:	cf 2e       	mov	r12, r31
     d88:	fe ef       	ldi	r31, 0xFE	; 254
     d8a:	df 2e       	mov	r13, r31
     d8c:	ff ef       	ldi	r31, 0xFF	; 255
     d8e:	ef 2e       	mov	r14, r31
     d90:	ff ef       	ldi	r31, 0xFF	; 255
     d92:	ff 2e       	mov	r15, r31
     d94:	f0 2d       	mov	r31, r0
     d96:	c0 0e       	add	r12, r16
     d98:	d1 1e       	adc	r13, r17
     d9a:	e2 1e       	adc	r14, r18
     d9c:	f3 1e       	adc	r15, r19
     d9e:	9a ee       	ldi	r25, 0xEA	; 234
     da0:	c9 16       	cp	r12, r25
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	d9 06       	cpc	r13, r25
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	e9 06       	cpc	r14, r25
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	f9 06       	cpc	r15, r25
     dae:	20 f4       	brcc	.+8      	; 0xdb8 <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	90 93 06 01 	sts	0x0106, r25
     db6:	a1 c0       	rjmp	.+322    	; 0xefa <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
     db8:	0f 2e       	mov	r0, r31
     dba:	fa e0       	ldi	r31, 0x0A	; 10
     dbc:	cf 2e       	mov	r12, r31
     dbe:	ff ef       	ldi	r31, 0xFF	; 255
     dc0:	df 2e       	mov	r13, r31
     dc2:	ff ef       	ldi	r31, 0xFF	; 255
     dc4:	ef 2e       	mov	r14, r31
     dc6:	ff ef       	ldi	r31, 0xFF	; 255
     dc8:	ff 2e       	mov	r15, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	c0 0e       	add	r12, r16
     dce:	d1 1e       	adc	r13, r17
     dd0:	e2 1e       	adc	r14, r18
     dd2:	f3 1e       	adc	r15, r19
     dd4:	95 ef       	ldi	r25, 0xF5	; 245
     dd6:	c9 16       	cp	r12, r25
     dd8:	d1 04       	cpc	r13, r1
     dda:	e1 04       	cpc	r14, r1
     ddc:	f1 04       	cpc	r15, r1
     dde:	20 f4       	brcc	.+8      	; 0xde8 <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	90 93 06 01 	sts	0x0106, r25
     de6:	90 c0       	rjmp	.+288    	; 0xf08 <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
     de8:	0f 2e       	mov	r0, r31
     dea:	f5 e8       	ldi	r31, 0x85	; 133
     dec:	cf 2e       	mov	r12, r31
     dee:	ff ef       	ldi	r31, 0xFF	; 255
     df0:	df 2e       	mov	r13, r31
     df2:	ff ef       	ldi	r31, 0xFF	; 255
     df4:	ef 2e       	mov	r14, r31
     df6:	ff ef       	ldi	r31, 0xFF	; 255
     df8:	ff 2e       	mov	r15, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	c0 0e       	add	r12, r16
     dfe:	d1 1e       	adc	r13, r17
     e00:	e2 1e       	adc	r14, r18
     e02:	f3 1e       	adc	r15, r19
     e04:	9b e7       	ldi	r25, 0x7B	; 123
     e06:	c9 16       	cp	r12, r25
     e08:	d1 04       	cpc	r13, r1
     e0a:	e1 04       	cpc	r14, r1
     e0c:	f1 04       	cpc	r15, r1
     e0e:	20 f4       	brcc	.+8      	; 0xe18 <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	90 93 06 01 	sts	0x0106, r25
     e16:	a5 c0       	rjmp	.+330    	; 0xf62 <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
     e18:	0f 2e       	mov	r0, r31
     e1a:	f0 ee       	ldi	r31, 0xE0	; 224
     e1c:	cf 2e       	mov	r12, r31
     e1e:	ff ef       	ldi	r31, 0xFF	; 255
     e20:	df 2e       	mov	r13, r31
     e22:	ff ef       	ldi	r31, 0xFF	; 255
     e24:	ef 2e       	mov	r14, r31
     e26:	ff ef       	ldi	r31, 0xFF	; 255
     e28:	ff 2e       	mov	r15, r31
     e2a:	f0 2d       	mov	r31, r0
     e2c:	c0 0e       	add	r12, r16
     e2e:	d1 1e       	adc	r13, r17
     e30:	e2 1e       	adc	r14, r18
     e32:	f3 1e       	adc	r15, r19
     e34:	9b e5       	ldi	r25, 0x5B	; 91
     e36:	c9 16       	cp	r12, r25
     e38:	d1 04       	cpc	r13, r1
     e3a:	e1 04       	cpc	r14, r1
     e3c:	f1 04       	cpc	r15, r1
     e3e:	20 f4       	brcc	.+8      	; 0xe48 <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
     e40:	95 e0       	ldi	r25, 0x05	; 5
     e42:	90 93 06 01 	sts	0x0106, r25
     e46:	77 c0       	rjmp	.+238    	; 0xf36 <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
     e48:	01 50       	subi	r16, 0x01	; 1
     e4a:	10 40       	sbci	r17, 0x00	; 0
     e4c:	20 40       	sbci	r18, 0x00	; 0
     e4e:	30 40       	sbci	r19, 0x00	; 0
     e50:	0f 31       	cpi	r16, 0x1F	; 31
     e52:	11 05       	cpc	r17, r1
     e54:	21 05       	cpc	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	20 f4       	brcc	.+8      	; 0xe62 <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
     e5a:	96 e0       	ldi	r25, 0x06	; 6
     e5c:	90 93 06 01 	sts	0x0106, r25
     e60:	86 c0       	rjmp	.+268    	; 0xf6e <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     e62:	90 91 06 01 	lds	r25, 0x0106
     e66:	93 30       	cpi	r25, 0x03	; 3
     e68:	09 f4       	brne	.+2      	; 0xe6c <Pwm_Start+0x164>
     e6a:	4e c0       	rjmp	.+156    	; 0xf08 <Pwm_Start+0x200>
     e6c:	94 30       	cpi	r25, 0x04	; 4
     e6e:	30 f4       	brcc	.+12     	; 0xe7c <Pwm_Start+0x174>
     e70:	91 30       	cpi	r25, 0x01	; 1
     e72:	61 f1       	breq	.+88     	; 0xecc <Pwm_Start+0x1c4>
     e74:	92 30       	cpi	r25, 0x02	; 2
     e76:	08 f0       	brcs	.+2      	; 0xe7a <Pwm_Start+0x172>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <Pwm_Start+0x1f2>
     e7a:	0a c0       	rjmp	.+20     	; 0xe90 <Pwm_Start+0x188>
     e7c:	95 30       	cpi	r25, 0x05	; 5
     e7e:	09 f4       	brne	.+2      	; 0xe82 <Pwm_Start+0x17a>
     e80:	5a c0       	rjmp	.+180    	; 0xf36 <Pwm_Start+0x22e>
     e82:	95 30       	cpi	r25, 0x05	; 5
     e84:	08 f4       	brcc	.+2      	; 0xe88 <Pwm_Start+0x180>
     e86:	6d c0       	rjmp	.+218    	; 0xf62 <Pwm_Start+0x25a>
     e88:	96 30       	cpi	r25, 0x06	; 6
     e8a:	09 f0       	breq	.+2      	; 0xe8e <Pwm_Start+0x186>
     e8c:	8d c0       	rjmp	.+282    	; 0xfa8 <Pwm_Start+0x2a0>
     e8e:	6f c0       	rjmp	.+222    	; 0xf6e <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	61 f0       	breq	.+24     	; 0xeac <Pwm_Start+0x1a4>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	30 f0       	brcs	.+12     	; 0xea4 <Pwm_Start+0x19c>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <Pwm_Start+0x1b0>
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	09 f0       	breq	.+2      	; 0xea2 <Pwm_Start+0x19a>
     ea0:	83 c0       	rjmp	.+262    	; 0xfa8 <Pwm_Start+0x2a0>
     ea2:	10 c0       	rjmp	.+32     	; 0xec4 <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
     ea4:	83 b7       	in	r24, 0x33	; 51
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     eaa:	88 c0       	rjmp	.+272    	; 0xfbc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
     eac:	8e b5       	in	r24, 0x2e	; 46
     eae:	9f b5       	in	r25, 0x2f	; 47
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	9f bd       	out	0x2f, r25	; 47
     eb4:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
     eb6:	98 c0       	rjmp	.+304    	; 0xfe8 <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
     eb8:	8e b5       	in	r24, 0x2e	; 46
     eba:	9f b5       	in	r25, 0x2f	; 47
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	9f bd       	out	0x2f, r25	; 47
     ec0:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     ec2:	ad c0       	rjmp	.+346    	; 0x101e <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
     ec4:	85 b5       	in	r24, 0x25	; 37
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     eca:	c4 c0       	rjmp	.+392    	; 0x1054 <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	18 f4       	brcc	.+6      	; 0xed6 <Pwm_Start+0x1ce>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	48 f4       	brcc	.+18     	; 0xee6 <Pwm_Start+0x1de>
     ed4:	04 c0       	rjmp	.+8      	; 0xede <Pwm_Start+0x1d6>
     ed6:	83 30       	cpi	r24, 0x03	; 3
     ed8:	09 f0       	breq	.+2      	; 0xedc <Pwm_Start+0x1d4>
     eda:	66 c0       	rjmp	.+204    	; 0xfa8 <Pwm_Start+0x2a0>
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
     ede:	83 b7       	in	r24, 0x33	; 51
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     ee4:	6b c0       	rjmp	.+214    	; 0xfbc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
     ee6:	2e b5       	in	r18, 0x2e	; 46
     ee8:	3f b5       	in	r19, 0x2f	; 47
     eea:	22 60       	ori	r18, 0x02	; 2
     eec:	3f bd       	out	0x2f, r19	; 47
     eee:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     ef0:	5b c0       	rjmp	.+182    	; 0xfa8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
     ef2:	85 b5       	in	r24, 0x25	; 37
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
     ef8:	ad c0       	rjmp	.+346    	; 0x1054 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	09 f0       	breq	.+2      	; 0xf00 <Pwm_Start+0x1f8>
     efe:	54 c0       	rjmp	.+168    	; 0xfa8 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     f00:	85 b5       	in	r24, 0x25	; 37
     f02:	83 60       	ori	r24, 0x03	; 3
     f04:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f06:	a6 c0       	rjmp	.+332    	; 0x1054 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <Pwm_Start+0x20a>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	48 f4       	brcc	.+18     	; 0xf22 <Pwm_Start+0x21a>
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <Pwm_Start+0x212>
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	09 f0       	breq	.+2      	; 0xf18 <Pwm_Start+0x210>
     f16:	48 c0       	rjmp	.+144    	; 0xfa8 <Pwm_Start+0x2a0>
     f18:	0a c0       	rjmp	.+20     	; 0xf2e <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
     f1a:	83 b7       	in	r24, 0x33	; 51
     f1c:	83 60       	ori	r24, 0x03	; 3
     f1e:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f20:	4d c0       	rjmp	.+154    	; 0xfbc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
     f22:	2e b5       	in	r18, 0x2e	; 46
     f24:	3f b5       	in	r19, 0x2f	; 47
     f26:	23 60       	ori	r18, 0x03	; 3
     f28:	3f bd       	out	0x2f, r19	; 47
     f2a:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     f2c:	3d c0       	rjmp	.+122    	; 0xfa8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f34:	8f c0       	rjmp	.+286    	; 0x1054 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	18 f4       	brcc	.+6      	; 0xf40 <Pwm_Start+0x238>
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	40 f4       	brcc	.+16     	; 0xf4e <Pwm_Start+0x246>
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <Pwm_Start+0x23e>
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	91 f5       	brne	.+100    	; 0xfa8 <Pwm_Start+0x2a0>
     f44:	0a c0       	rjmp	.+20     	; 0xf5a <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
     f46:	83 b7       	in	r24, 0x33	; 51
     f48:	83 60       	ori	r24, 0x03	; 3
     f4a:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f4c:	37 c0       	rjmp	.+110    	; 0xfbc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
     f4e:	2e b5       	in	r18, 0x2e	; 46
     f50:	3f b5       	in	r19, 0x2f	; 47
     f52:	23 60       	ori	r18, 0x03	; 3
     f54:	3f bd       	out	0x2f, r19	; 47
     f56:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     f58:	27 c0       	rjmp	.+78     	; 0xfa8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
     f5a:	85 b5       	in	r24, 0x25	; 37
     f5c:	84 60       	ori	r24, 0x04	; 4
     f5e:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f60:	79 c0       	rjmp	.+242    	; 0x1054 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	09 f5       	brne	.+66     	; 0xfa8 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
     f66:	85 b5       	in	r24, 0x25	; 37
     f68:	85 60       	ori	r24, 0x05	; 5
     f6a:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f6c:	73 c0       	rjmp	.+230    	; 0x1054 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	59 f0       	breq	.+22     	; 0xf88 <Pwm_Start+0x280>
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	28 f0       	brcs	.+10     	; 0xf80 <Pwm_Start+0x278>
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	69 f0       	breq	.+26     	; 0xf94 <Pwm_Start+0x28c>
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	a9 f4       	brne	.+42     	; 0xfa8 <Pwm_Start+0x2a0>
     f7e:	10 c0       	rjmp	.+32     	; 0xfa0 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
     f80:	83 b7       	in	r24, 0x33	; 51
     f82:	85 60       	ori	r24, 0x05	; 5
     f84:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f86:	1a c0       	rjmp	.+52     	; 0xfbc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
     f88:	8e b5       	in	r24, 0x2e	; 46
     f8a:	9f b5       	in	r25, 0x2f	; 47
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	9f bd       	out	0x2f, r25	; 47
     f90:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     f92:	2a c0       	rjmp	.+84     	; 0xfe8 <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
     f94:	8e b5       	in	r24, 0x2e	; 46
     f96:	9f b5       	in	r25, 0x2f	; 47
     f98:	85 60       	ori	r24, 0x05	; 5
     f9a:	9f bd       	out	0x2f, r25	; 47
     f9c:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     f9e:	3f c0       	rjmp	.+126    	; 0x101e <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
     fa0:	85 b5       	in	r24, 0x25	; 37
     fa2:	87 60       	ori	r24, 0x07	; 7
     fa4:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     fa6:	56 c0       	rjmp	.+172    	; 0x1054 <Pwm_Start+0x34c>

	
	
}

switch(Channel)
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	f1 f0       	breq	.+60     	; 0xfe8 <Pwm_Start+0x2e0>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	30 f0       	brcs	.+12     	; 0xfbc <Pwm_Start+0x2b4>
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	a9 f1       	breq	.+106    	; 0x101e <Pwm_Start+0x316>
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	09 f0       	breq	.+2      	; 0xfba <Pwm_Start+0x2b2>
     fb8:	63 c0       	rjmp	.+198    	; 0x1080 <Pwm_Start+0x378>
     fba:	4c c0       	rjmp	.+152    	; 0x1054 <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	48 ec       	ldi	r20, 0xC8	; 200
     fcc:	52 e4       	ldi	r21, 0x42	; 66
     fce:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__mulsf3>
     fde:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fixunssfsi>
			OCR0=pwm_time_on;
     fe2:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
			break;
     fe6:	4d c0       	rjmp	.+154    	; 0x1082 <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	48 ec       	ldi	r20, 0xC8	; 200
     ff8:	52 e4       	ldi	r21, 0x42	; 66
     ffa:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	53 e4       	ldi	r21, 0x43	; 67
    1006:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__mulsf3>
    100a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1012:	9b bd       	out	0x2b, r25	; 43
    1014:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    1016:	99 bd       	out	0x29, r25	; 41
    1018:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    101a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    101c:	32 c0       	rjmp	.+100    	; 0x1082 <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	48 ec       	ldi	r20, 0xC8	; 200
    102e:	52 e4       	ldi	r21, 0x42	; 66
    1030:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	53 e4       	ldi	r21, 0x43	; 67
    103c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__mulsf3>
    1040:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1048:	9b bd       	out	0x2b, r25	; 43
    104a:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    104c:	99 bd       	out	0x29, r25	; 41
    104e:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1050:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1052:	17 c0       	rjmp	.+46     	; 0x1082 <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	48 ec       	ldi	r20, 0xC8	; 200
    1064:	52 e4       	ldi	r21, 0x42	; 66
    1066:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	53 e4       	ldi	r21, 0x43	; 67
    1072:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__mulsf3>
    1076:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__fixunssfsi>
			OCR2=pwm_time_on;
    107a:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    107c:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	90 93 07 01 	sts	0x0107, r25
return Ret;
}
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	08 95       	ret

00001096 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    1096:	90 91 07 01 	lds	r25, 0x0107
    109a:	91 30       	cpi	r25, 0x01	; 1
    109c:	21 f4       	brne	.+8      	; 0x10a6 <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    109e:	0e 94 84 06 	call	0xd08	; 0xd08 <Pwm_Start>
Ret=E_OK;
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
}else{Ret=E_NOK;}
    10a6:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    10a8:	08 95       	ret

000010aa <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	18 f4       	brcc	.+6      	; 0x10b4 <Pwm_Stop+0xa>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	48 f4       	brcc	.+18     	; 0x10c4 <Pwm_Stop+0x1a>
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <Pwm_Stop+0x10>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	81 f4       	brne	.+32     	; 0x10d8 <Pwm_Stop+0x2e>
    10b8:	0a c0       	rjmp	.+20     	; 0x10ce <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    10ba:	83 b7       	in	r24, 0x33	; 51
    10bc:	88 7f       	andi	r24, 0xF8	; 248
    10be:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10c2:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    10c4:	83 b7       	in	r24, 0x33	; 51
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10cc:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    10ce:	85 b5       	in	r24, 0x25	; 37
    10d0:	88 7f       	andi	r24, 0xF8	; 248
    10d2:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10d6:	08 95       	ret
	default:
	Ret=E_NOK;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    10da:	08 95       	ret

000010dc <SOS_Init>:
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
    10e8:	80 91 0a 01 	lds	r24, 0x010A
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	80 93 0a 01 	sts	0x010A, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    10f2:	20 97       	sbiw	r28, 0x00	; 0
    10f4:	11 f0       	breq	.+4      	; 0x10fa <SOS_Init+0x1e>
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <SOS_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    10fa:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
    10fc:	00 23       	and	r16, r16
    10fe:	19 f0       	breq	.+6      	; 0x1106 <SOS_Init+0x2a>
    1100:	02 30       	cpi	r16, 0x02	; 2
    1102:	79 f4       	brne	.+30     	; 0x1122 <SOS_Init+0x46>
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <SOS_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
    1106:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
    110a:	89 e8       	ldi	r24, 0x89	; 137
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Timer_Init>
				break;
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <SOS_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
    1114:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
    1118:	8f e8       	ldi	r24, 0x8F	; 143
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Timer_Init>
			break;
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <SOS_Init+0x48>
	default:
			ret+=E_NOK;
    1122:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
    1124:	88 81       	ld	r24, Y
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	99 f4       	brne	.+38     	; 0x1150 <SOS_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
    112a:	00 23       	and	r16, r16
    112c:	19 f0       	breq	.+6      	; 0x1134 <SOS_Init+0x58>
    112e:	02 30       	cpi	r16, 0x02	; 2
    1130:	69 f4       	brne	.+26     	; 0x114c <SOS_Init+0x70>
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <SOS_Init+0x64>
		{
			case TIMER_CH0 :
		Timer_Start(TIMER_CH0,250);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	6a ef       	ldi	r22, 0xFA	; 250
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer_Start>
					//TCNT0=5;
					break;
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <SOS_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,14);
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	6e e0       	ldi	r22, 0x0E	; 14
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer_Start>
					break;
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <SOS_Init+0x76>
			default:
				ret+=E_NOK;
    114c:	1f 5f       	subi	r17, 0xFF	; 255
					break;
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <SOS_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
    1150:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
    1152:	81 2f       	mov	r24, r17
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
    115e:	80 91 0a 01 	lds	r24, 0x010A
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	41 f4       	brne	.+16     	; 0x1176 <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
    1166:	83 e8       	ldi	r24, 0x83	; 131
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Timer_Init>

	u8_Is_Intialized=0;
    116e:	10 92 0a 01 	sts	0x010A, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	10 f0       	brcs	.+4      	; 0x117e <TMU_DeInit+0x20>
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	08 95       	ret
	else{
	ret=E_NOK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
    1180:	08 95       	ret

00001182 <SOS_Create_Task>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
  	*/
	if(u8_Is_Intialized == 1)
    1182:	50 91 0a 01 	lds	r21, 0x010A
    1186:	51 30       	cpi	r21, 0x01	; 1
    1188:	99 f4       	brne	.+38     	; 0x11b0 <SOS_Create_Task+0x2e>
	{
		
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
    118a:	e4 2f       	mov	r30, r20
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	e2 5c       	subi	r30, 0xC2	; 194
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
    11a2:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
    11a4:	34 83       	std	Z+4, r19	; 0x04
    11a6:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	82 83       	std	Z+2, r24	; 0x02
	
return ret;	
}

ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
    11b0:	52 30       	cpi	r21, 0x02	; 2
    11b2:	10 f0       	brcs	.+4      	; 0x11b8 <SOS_Create_Task+0x36>
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	08 95       	ret
		ret+=NOT_INIT;
    11b8:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
    11ba:	08 95       	ret

000011bc <SOS_Run>:

ERROR_STATUS SOS_Run(void)
{	uint8_t ret=E_OK;
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	*//***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
    11c0:	80 91 08 01 	lds	r24, 0x0108
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <SOS_Run+0xe>
    11c8:	65 c0       	rjmp	.+202    	; 0x1294 <SOS_Run+0xd8>
{	u8Excution_to_be_done=0;
    11ca:	10 92 08 01 	sts	0x0108, r1

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    11ce:	10 92 09 01 	sts	0x0109, r1
    11d2:	20 e0       	ldi	r18, 0x00	; 0
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
*/
/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if((Buffer_Array[u8_FUN_index]).u8_flag_is_stopped==0){ret=E_OK;}
    11d4:	ce e3       	ldi	r28, 0x3E	; 62
    11d6:	d1 e0       	ldi	r29, 0x01	; 1
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	f9 01       	movw	r30, r18
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	ec 0f       	add	r30, r28
    11ea:	fd 1f       	adc	r31, r29
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <SOS_Run+0x38>
    11f2:	48 c0       	rjmp	.+144    	; 0x1284 <SOS_Run+0xc8>
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
    11f4:	f9 01       	movw	r30, r18
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ec 0f       	add	r30, r28
    1204:	fd 1f       	adc	r31, r29
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	97 81       	ldd	r25, Z+7	; 0x07
    120a:	ac 01       	movw	r20, r24
    120c:	4f 5f       	subi	r20, 0xFF	; 255
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	57 83       	std	Z+7, r21	; 0x07
    1212:	46 83       	std	Z+6, r20	; 0x06
	/*make the flag down*/
							
			
/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
    1214:	83 81       	ldd	r24, Z+3	; 0x03
    1216:	94 81       	ldd	r25, Z+4	; 0x04
    1218:	48 17       	cp	r20, r24
    121a:	59 07       	cpc	r21, r25
    121c:	d1 f4       	brne	.+52     	; 0x1252 <SOS_Run+0x96>
	{
		((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
    121e:	f9 01       	movw	r30, r18
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	ec 0f       	add	r30, r28
    122e:	fd 1f       	adc	r31, r29
    1230:	01 90       	ld	r0, Z+
    1232:	f0 81       	ld	r31, Z
    1234:	e0 2d       	mov	r30, r0
    1236:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
    1238:	e0 91 09 01 	lds	r30, 0x0109
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ec 0f       	add	r30, r28
    124c:	fd 1f       	adc	r31, r29
    124e:	17 82       	std	Z+7, r1	; 0x07
    1250:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if((Buffer_Array[u8_FUN_index]).preodic==0)
    1252:	80 91 09 01 	lds	r24, 0x0109
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	fc 01       	movw	r30, r24
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ec 0f       	add	r30, r28
    1268:	fd 1f       	adc	r31, r29
    126a:	25 81       	ldd	r18, Z+5	; 0x05
    126c:	22 23       	and	r18, r18
    126e:	51 f4       	brne	.+20     	; 0x1284 <SOS_Run+0xc8>
	{
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;	
    1270:	fc 01       	movw	r30, r24
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ec 0f       	add	r30, r28
    1280:	fd 1f       	adc	r31, r29
    1282:	12 82       	std	Z+2, r1	; 0x02
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
{	u8Excution_to_be_done=0;

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1284:	20 91 09 01 	lds	r18, 0x0109
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	20 93 09 01 	sts	0x0109, r18
    128e:	24 30       	cpi	r18, 0x04	; 4
    1290:	08 f4       	brcc	.+2      	; 0x1294 <SOS_Run+0xd8>
    1292:	a2 cf       	rjmp	.-188    	; 0x11d8 <SOS_Run+0x1c>

		}		
	}
}	
return ret;
}
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
    129c:	e8 2f       	mov	r30, r24
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	e2 5c       	subi	r30, 0xC2	; 194
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	12 82       	std	Z+2, r1	; 0x02
}
    12b2:	08 95       	ret

000012b4 <Task1>:
static uint8_t flag;
static uint8_t u8_motor_state;
static uint8_t u8_counter;
void Task1(void)
{		
if(pushButtonGetStatus(BTN_0))
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 c3 05 	call	0xb86	; 0xb86 <pushButtonGetStatus>
    12ba:	88 23       	and	r24, r24
    12bc:	b9 f0       	breq	.+46     	; 0x12ec <Task1+0x38>
{
	u8_counter++;
    12be:	90 91 0c 01 	lds	r25, 0x010C
    12c2:	89 2f       	mov	r24, r25
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 0c 01 	sts	0x010C, r24
	if (u8_counter <= 50)
    12ca:	83 33       	cpi	r24, 0x33	; 51
    12cc:	20 f4       	brcc	.+8      	; 0x12d6 <Task1+0x22>
	{
		u8_motor_state=UNHOLD;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 0d 01 	sts	0x010D, r24
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <Task1+0x38>
		
	}
	else if (u8_counter > 50 && u8_counter < 255)
    12d6:	92 53       	subi	r25, 0x32	; 50
    12d8:	9c 3c       	cpi	r25, 0xCC	; 204
    12da:	20 f4       	brcc	.+8      	; 0x12e4 <Task1+0x30>
	{
		u8_motor_state=PRESSED_AND_HOLD;
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	80 93 0d 01 	sts	0x010D, r24
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <Task1+0x38>
		
	}else{u8_counter=0;
    12e4:	10 92 0c 01 	sts	0x010C, r1
	u8_motor_state=0;}
    12e8:	10 92 0d 01 	sts	0x010D, r1
	
/*two times routine*/



if(pushButtonGetStatus(BTN_0)== Released && u8_counter > 20 && u8_counter < 50)
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 c3 05 	call	0xb86	; 0xb86 <pushButtonGetStatus>
    12f2:	88 23       	and	r24, r24
    12f4:	49 f4       	brne	.+18     	; 0x1308 <Task1+0x54>
    12f6:	80 91 0c 01 	lds	r24, 0x010C
    12fa:	85 31       	cpi	r24, 0x15	; 21
    12fc:	28 f0       	brcs	.+10     	; 0x1308 <Task1+0x54>
    12fe:	82 33       	cpi	r24, 0x32	; 50
    1300:	18 f4       	brcc	.+6      	; 0x1308 <Task1+0x54>
{
flag=0;
    1302:	10 92 0e 01 	sts	0x010E, r1
    1306:	08 95       	ret

}
else if (pushButtonGetStatus(BTN_0)==Pressed)
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 c3 05 	call	0xb86	; 0xb86 <pushButtonGetStatus>
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	51 f4       	brne	.+20     	; 0x1326 <Task1+0x72>
{
if(flag == 0)
    1312:	80 91 0e 01 	lds	r24, 0x010E
    1316:	88 23       	and	r24, r24
    1318:	31 f4       	brne	.+12     	; 0x1326 <Task1+0x72>
{
	u8_motor_state=FIFTY_PRECENT_PWM;
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	80 93 0d 01 	sts	0x010D, r24
	flag = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 0e 01 	sts	0x010E, r24
    1326:	08 95       	ret

00001328 <timer_interrupt>:



void timer_interrupt(void)
{
	u8Excution_to_be_done =1;	
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 08 01 	sts	0x0108, r24
    132e:	08 95       	ret

00001330 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
switch (Timer_CH_NO) {
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	51 f0       	breq	.+20     	; 0x1348 <Timer_Stop+0x18>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	18 f0       	brcs	.+6      	; 0x133e <Timer_Stop+0xe>
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	91 f4       	brne	.+36     	; 0x1360 <Timer_Stop+0x30>
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <Timer_Stop+0x26>
case TIMER_CH0:
{
	TCCR0 &=0xF8;
    133e:	83 b7       	in	r24, 0x33	; 51
    1340:	88 7f       	andi	r24, 0xF8	; 248
    1342:	83 bf       	out	0x33, r24	; 51
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    1344:	80 e0       	ldi	r24, 0x00	; 0
switch (Timer_CH_NO) {
case TIMER_CH0:
{
	TCCR0 &=0xF8;
	break;
    1346:	08 95       	ret
}
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
    1348:	8e b5       	in	r24, 0x2e	; 46
    134a:	9f b5       	in	r25, 0x2f	; 47
    134c:	88 7f       	andi	r24, 0xF8	; 248
    134e:	9f bd       	out	0x2f, r25	; 47
    1350:	8e bd       	out	0x2e, r24	; 46
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    1352:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
	
	
	break;
    1354:	08 95       	ret
}
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
    1356:	85 b5       	in	r24, 0x25	; 37
    1358:	88 7f       	andi	r24, 0xF8	; 248
    135a:	85 bd       	out	0x25, r24	; 37
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    135c:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
	
	
	break;
    135e:	08 95       	ret
}
default :
	Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1360:	86 e3       	ldi	r24, 0x36	; 54
	break;
}

return Ret;

}
    1362:	08 95       	ret

00001364 <Timer_Start>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	eb 01       	movw	r28, r22
	uint8_t Ret;
	switch (Timer_CH_NO) {
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	09 f4       	brne	.+2      	; 0x1370 <Timer_Start+0xc>
    136e:	7c c0       	rjmp	.+248    	; 0x1468 <Timer_Start+0x104>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	20 f0       	brcs	.+8      	; 0x137c <Timer_Start+0x18>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	09 f0       	breq	.+2      	; 0x137a <Timer_Start+0x16>
    1378:	69 c1       	rjmp	.+722    	; 0x164c <Timer_Start+0x2e8>
    137a:	ec c0       	rjmp	.+472    	; 0x1554 <Timer_Start+0x1f0>
	case TIMER_CH0:{
		if(u8_timer0_is_init == 1)
    137c:	80 91 11 01 	lds	r24, 0x0111
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	09 f0       	breq	.+2      	; 0x1386 <Timer_Start+0x22>
    1384:	6c c0       	rjmp	.+216    	; 0x145e <Timer_Start+0xfa>
		/***********************************************************************************************************************/
			{
		switch(prescaler_value){
    1386:	80 91 10 01 	lds	r24, 0x0110
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	91 f1       	breq	.+100    	; 0x13f2 <Timer_Start+0x8e>
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	30 f4       	brcc	.+12     	; 0x139e <Timer_Start+0x3a>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	51 f0       	breq	.+20     	; 0x13aa <Timer_Start+0x46>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	09 f0       	breq	.+2      	; 0x139c <Timer_Start+0x38>
    139a:	5a c1       	rjmp	.+692    	; 0x1650 <Timer_Start+0x2ec>
    139c:	18 c0       	rjmp	.+48     	; 0x13ce <Timer_Start+0x6a>
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	d1 f1       	breq	.+116    	; 0x1416 <Timer_Start+0xb2>
    13a2:	87 30       	cpi	r24, 0x07	; 7
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <Timer_Start+0x44>
    13a6:	54 c1       	rjmp	.+680    	; 0x1650 <Timer_Start+0x2ec>
    13a8:	48 c0       	rjmp	.+144    	; 0x143a <Timer_Start+0xd6>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX0){
    13aa:	6f 3f       	cpi	r22, 0xFF	; 255
    13ac:	71 05       	cpc	r23, r1
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <Timer_Start+0x4e>
    13b0:	51 c1       	rjmp	.+674    	; 0x1654 <Timer_Start+0x2f0>
				if(u8_sgv_TimerMode==1)
    13b2:	80 91 0f 01 	lds	r24, 0x010F
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <Timer_Start+0x62>
				{
				Timer_Stop(TIMER_CH0);	
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR0 |=TIMER_PRESCALER_NO;
    13c0:	83 b7       	in	r24, 0x33	; 51
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =	MAX0 - Timer_Count;
    13c6:	c0 95       	com	r28
    13c8:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	62 c1       	rjmp	.+708    	; 0x1692 <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX0){
    13ce:	6f 3f       	cpi	r22, 0xFF	; 255
    13d0:	71 05       	cpc	r23, r1
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <Timer_Start+0x72>
    13d4:	41 c1       	rjmp	.+642    	; 0x1658 <Timer_Start+0x2f4>
				if(u8_sgv_TimerMode==1)
    13d6:	80 91 0f 01 	lds	r24, 0x010F
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	31 f4       	brne	.+12     	; 0x13ea <Timer_Start+0x86>
				{
				Timer_Stop(TIMER_CH0);	
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
    13e4:	83 b7       	in	r24, 0x33	; 51
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    13ea:	c0 95       	com	r28
    13ec:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	50 c1       	rjmp	.+672    	; 0x1692 <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX0){
    13f2:	6f 3f       	cpi	r22, 0xFF	; 255
    13f4:	71 05       	cpc	r23, r1
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <Timer_Start+0x96>
    13f8:	31 c1       	rjmp	.+610    	; 0x165c <Timer_Start+0x2f8>
				if(u8_sgv_TimerMode==1)
    13fa:	80 91 0f 01 	lds	r24, 0x010F
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	31 f4       	brne	.+12     	; 0x140e <Timer_Start+0xaa>
				{
				Timer_Stop(TIMER_CH0);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	83 60       	ori	r24, 0x03	; 3
    140c:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 = MAX0 - Timer_Count;
    140e:	c0 95       	com	r28
    1410:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	3e c1       	rjmp	.+636    	; 0x1692 <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX0){
    1416:	6f 3f       	cpi	r22, 0xFF	; 255
    1418:	71 05       	cpc	r23, r1
    141a:	08 f0       	brcs	.+2      	; 0x141e <Timer_Start+0xba>
    141c:	21 c1       	rjmp	.+578    	; 0x1660 <Timer_Start+0x2fc>
				if(u8_sgv_TimerMode==1)
    141e:	80 91 0f 01 	lds	r24, 0x010F
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	31 f4       	brne	.+12     	; 0x1432 <Timer_Start+0xce>
				{
				Timer_Stop(TIMER_CH0);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
    142c:	83 b7       	in	r24, 0x33	; 51
    142e:	84 60       	ori	r24, 0x04	; 4
    1430:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    1432:	c0 95       	com	r28
    1434:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	2c c1       	rjmp	.+600    	; 0x1692 <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX0){
    143a:	6f 3f       	cpi	r22, 0xFF	; 255
    143c:	71 05       	cpc	r23, r1
    143e:	08 f0       	brcs	.+2      	; 0x1442 <Timer_Start+0xde>
    1440:	11 c1       	rjmp	.+546    	; 0x1664 <Timer_Start+0x300>
				if(u8_sgv_TimerMode==1)
    1442:	80 91 0f 01 	lds	r24, 0x010F
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	31 f4       	brne	.+12     	; 0x1456 <Timer_Start+0xf2>
				{	
				Timer_Stop(TIMER_CH0);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
    1450:	83 b7       	in	r24, 0x33	; 51
    1452:	85 60       	ori	r24, 0x05	; 5
    1454:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    1456:	c0 95       	com	r28
    1458:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	1a c1       	rjmp	.+564    	; 0x1692 <Timer_Start+0x32e>
		break;
		}
		else if(u8_timer0_is_init > 1){
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	08 f4       	brcc	.+2      	; 0x1464 <Timer_Start+0x100>
    1462:	02 c1       	rjmp	.+516    	; 0x1668 <Timer_Start+0x304>
			Ret=MULTIPLE_INIT+TIMER_MODULE;
    1464:	84 e2       	ldi	r24, 0x24	; 36
    1466:	15 c1       	rjmp	.+554    	; 0x1692 <Timer_Start+0x32e>
			Ret=NOT_INIT+TIMER_MODULE;
			break;
			}
	}
	case TIMER_CH1:{
			if(u8_timer1_is_init == 1){
    1468:	80 91 12 01 	lds	r24, 0x0112
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f0       	breq	.+2      	; 0x1472 <Timer_Start+0x10e>
    1470:	6c c0       	rjmp	.+216    	; 0x154a <Timer_Start+0x1e6>
		switch(prescaler_value){
    1472:	80 91 10 01 	lds	r24, 0x0110
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	91 f1       	breq	.+100    	; 0x14de <Timer_Start+0x17a>
    147a:	85 30       	cpi	r24, 0x05	; 5
    147c:	30 f4       	brcc	.+12     	; 0x148a <Timer_Start+0x126>
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	51 f0       	breq	.+20     	; 0x1496 <Timer_Start+0x132>
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	09 f0       	breq	.+2      	; 0x1488 <Timer_Start+0x124>
    1486:	f2 c0       	rjmp	.+484    	; 0x166c <Timer_Start+0x308>
    1488:	18 c0       	rjmp	.+48     	; 0x14ba <Timer_Start+0x156>
    148a:	86 30       	cpi	r24, 0x06	; 6
    148c:	d1 f1       	breq	.+116    	; 0x1502 <Timer_Start+0x19e>
    148e:	87 30       	cpi	r24, 0x07	; 7
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_Start+0x130>
    1492:	ec c0       	rjmp	.+472    	; 0x166c <Timer_Start+0x308>
    1494:	48 c0       	rjmp	.+144    	; 0x1526 <Timer_Start+0x1c2>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1496:	80 91 0f 01 	lds	r24, 0x010F
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	39 f4       	brne	.+14     	; 0x14ac <Timer_Start+0x148>
				{
				Timer_Stop(TIMER_CH1);
    149e:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR1 |=TIMER_PRESCALER_NO;
    14a2:	8e b5       	in	r24, 0x2e	; 46
    14a4:	9f b5       	in	r25, 0x2f	; 47
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	9f bd       	out	0x2f, r25	; 47
    14aa:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    14ac:	d0 95       	com	r29
    14ae:	c1 95       	neg	r28
    14b0:	df 4f       	sbci	r29, 0xFF	; 255
    14b2:	dd bd       	out	0x2d, r29	; 45
    14b4:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret=E_NOK;
			}
			break;
    14b8:	ec c0       	rjmp	.+472    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    14ba:	80 91 0f 01 	lds	r24, 0x010F
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <Timer_Start+0x16c>
							{
				Timer_Stop(TIMER_CH1);
    14c2:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
    14c6:	8e b5       	in	r24, 0x2e	; 46
    14c8:	9f b5       	in	r25, 0x2f	; 47
    14ca:	82 60       	ori	r24, 0x02	; 2
    14cc:	9f bd       	out	0x2f, r25	; 47
    14ce:	8e bd       	out	0x2e, r24	; 46
							}
							
			TCNT1 =MAX1 - Timer_Count;
    14d0:	d0 95       	com	r29
    14d2:	c1 95       	neg	r28
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	dd bd       	out	0x2d, r29	; 45
    14d8:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14da:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    14dc:	da c0       	rjmp	.+436    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    14de:	80 91 0f 01 	lds	r24, 0x010F
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	39 f4       	brne	.+14     	; 0x14f4 <Timer_Start+0x190>
			{
				Timer_Stop(TIMER_CH1);
    14e6:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
    14ea:	8e b5       	in	r24, 0x2e	; 46
    14ec:	9f b5       	in	r25, 0x2f	; 47
    14ee:	83 60       	ori	r24, 0x03	; 3
    14f0:	9f bd       	out	0x2f, r25	; 47
    14f2:	8e bd       	out	0x2e, r24	; 46
			}
			TCNT1 =MAX1 - Timer_Count;
    14f4:	d0 95       	com	r29
    14f6:	c1 95       	neg	r28
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	dd bd       	out	0x2d, r29	; 45
    14fc:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    1500:	c8 c0       	rjmp	.+400    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1502:	80 91 0f 01 	lds	r24, 0x010F
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	39 f4       	brne	.+14     	; 0x1518 <Timer_Start+0x1b4>
						{
				Timer_Stop(TIMER_CH1);
    150a:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
    150e:	8e b5       	in	r24, 0x2e	; 46
    1510:	9f b5       	in	r25, 0x2f	; 47
    1512:	84 60       	ori	r24, 0x04	; 4
    1514:	9f bd       	out	0x2f, r25	; 47
    1516:	8e bd       	out	0x2e, r24	; 46
						}
				TCNT1 =MAX1 - Timer_Count;
    1518:	d0 95       	com	r29
    151a:	c1 95       	neg	r28
    151c:	df 4f       	sbci	r29, 0xFF	; 255
    151e:	dd bd       	out	0x2d, r29	; 45
    1520:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1522:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    1524:	b6 c0       	rjmp	.+364    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1526:	80 91 0f 01 	lds	r24, 0x010F
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	39 f4       	brne	.+14     	; 0x153c <Timer_Start+0x1d8>
				{
			Timer_Stop(TIMER_CH1);
    152e:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
    1532:	8e b5       	in	r24, 0x2e	; 46
    1534:	9f b5       	in	r25, 0x2f	; 47
    1536:	85 60       	ori	r24, 0x05	; 5
    1538:	9f bd       	out	0x2f, r25	; 47
    153a:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    153c:	d0 95       	com	r29
    153e:	c1 95       	neg	r28
    1540:	df 4f       	sbci	r29, 0xFF	; 255
    1542:	dd bd       	out	0x2d, r29	; 45
    1544:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1546:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    1548:	a4 c0       	rjmp	.+328    	; 0x1692 <Timer_Start+0x32e>
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	08 f4       	brcc	.+2      	; 0x1550 <Timer_Start+0x1ec>
    154e:	90 c0       	rjmp	.+288    	; 0x1670 <Timer_Start+0x30c>
    1550:	84 e2       	ldi	r24, 0x24	; 36
    1552:	9f c0       	rjmp	.+318    	; 0x1692 <Timer_Start+0x32e>
			break;}
			
	}
	case TIMER_CH2:
	{
		if(u8_timer2_is_init==1){
    1554:	80 91 13 01 	lds	r24, 0x0113
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <Timer_Start+0x1fa>
    155c:	73 c0       	rjmp	.+230    	; 0x1644 <Timer_Start+0x2e0>
		switch(prescaler_value){
    155e:	80 91 10 01 	lds	r24, 0x0110
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	c9 f1       	breq	.+114    	; 0x15d8 <Timer_Start+0x274>
    1566:	85 30       	cpi	r24, 0x05	; 5
    1568:	40 f4       	brcc	.+16     	; 0x157a <Timer_Start+0x216>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <Timer_Start+0x244>
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	48 f5       	brcc	.+82     	; 0x15c4 <Timer_Start+0x260>
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	09 f0       	breq	.+2      	; 0x1578 <Timer_Start+0x214>
    1576:	7e c0       	rjmp	.+252    	; 0x1674 <Timer_Start+0x310>
    1578:	09 c0       	rjmp	.+18     	; 0x158c <Timer_Start+0x228>
    157a:	86 30       	cpi	r24, 0x06	; 6
    157c:	09 f4       	brne	.+2      	; 0x1580 <Timer_Start+0x21c>
    157e:	48 c0       	rjmp	.+144    	; 0x1610 <Timer_Start+0x2ac>
    1580:	86 30       	cpi	r24, 0x06	; 6
    1582:	c0 f1       	brcs	.+112    	; 0x15f4 <Timer_Start+0x290>
    1584:	87 30       	cpi	r24, 0x07	; 7
    1586:	09 f0       	breq	.+2      	; 0x158a <Timer_Start+0x226>
    1588:	75 c0       	rjmp	.+234    	; 0x1674 <Timer_Start+0x310>
    158a:	4f c0       	rjmp	.+158    	; 0x162a <Timer_Start+0x2c6>

		case TIMER_PRESCALER_NO :
		{

			if(Timer_Count < MAX0){
    158c:	6f 3f       	cpi	r22, 0xFF	; 255
    158e:	71 05       	cpc	r23, r1
    1590:	08 f0       	brcs	.+2      	; 0x1594 <Timer_Start+0x230>
    1592:	72 c0       	rjmp	.+228    	; 0x1678 <Timer_Start+0x314>
				Timer_Stop(TIMER_CH2);
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_NO;
    159a:	85 b5       	in	r24, 0x25	; 37
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	85 bd       	out	0x25, r24	; 37
				TCNT2 = MAX2 - Timer_Count;
    15a0:	c0 95       	com	r28
    15a2:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	75 c0       	rjmp	.+234    	; 0x1692 <Timer_Start+0x32e>
			break;
		}

		case TIMER_PRESCALER_8 :
		{
			if(Timer_Count < MAX0)
    15a8:	6f 3f       	cpi	r22, 0xFF	; 255
    15aa:	71 05       	cpc	r23, r1
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <Timer_Start+0x24c>
    15ae:	66 c0       	rjmp	.+204    	; 0x167c <Timer_Start+0x318>
			{ 
				Timer_Stop(TIMER_CH2);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_8;
    15b6:	85 b5       	in	r24, 0x25	; 37
    15b8:	82 60       	ori	r24, 0x02	; 2
    15ba:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15bc:	c0 95       	com	r28
    15be:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	67 c0       	rjmp	.+206    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_32:
		{
			if(Timer_Count < MAX1)
			{
				Timer_Stop(TIMER_CH2);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_32;
    15ca:	85 b5       	in	r24, 0x25	; 37
    15cc:	83 60       	ori	r24, 0x03	; 3
    15ce:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15d0:	c0 95       	com	r28
    15d2:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				Ret=E_NOK;
			}

			break;
    15d6:	5d c0       	rjmp	.+186    	; 0x1692 <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :
		{
			if(Timer_Count < MAX2)
    15d8:	6f 3f       	cpi	r22, 0xFF	; 255
    15da:	71 05       	cpc	r23, r1
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <Timer_Start+0x27c>
    15de:	50 c0       	rjmp	.+160    	; 0x1680 <Timer_Start+0x31c>
			{
				Timer_Stop(TIMER_CH2);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_64;
    15e6:	85 b5       	in	r24, 0x25	; 37
    15e8:	84 60       	ori	r24, 0x04	; 4
    15ea:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15ec:	c0 95       	com	r28
    15ee:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	4f c0       	rjmp	.+158    	; 0x1692 <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_128 :{
			if(Timer_Count < MAX2){
    15f4:	6f 3f       	cpi	r22, 0xFF	; 255
    15f6:	71 05       	cpc	r23, r1
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <Timer_Start+0x298>
    15fa:	44 c0       	rjmp	.+136    	; 0x1684 <Timer_Start+0x320>
				Timer_Stop(TIMER_CH2);
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_128;
    1602:	85 b5       	in	r24, 0x25	; 37
    1604:	85 60       	ori	r24, 0x05	; 5
    1606:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1608:	c0 95       	com	r28
    160a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	41 c0       	rjmp	.+130    	; 0x1692 <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_256 :
		{
			if(Timer_Count < MAX2){
    1610:	6f 3f       	cpi	r22, 0xFF	; 255
    1612:	71 05       	cpc	r23, r1
    1614:	c8 f5       	brcc	.+114    	; 0x1688 <Timer_Start+0x324>
				Timer_Stop(TIMER_CH2);
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_256;
    161c:	85 b5       	in	r24, 0x25	; 37
    161e:	86 60       	ori	r24, 0x06	; 6
    1620:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1622:	c0 95       	com	r28
    1624:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	34 c0       	rjmp	.+104    	; 0x1692 <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_1024 :
		{
			if(Timer_Count < MAX2){
    162a:	6f 3f       	cpi	r22, 0xFF	; 255
    162c:	71 05       	cpc	r23, r1
    162e:	70 f5       	brcc	.+92     	; 0x168c <Timer_Start+0x328>
				Timer_Stop(TIMER_CH2);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_1024;
    1636:	85 b5       	in	r24, 0x25	; 37
    1638:	87 60       	ori	r24, 0x07	; 7
    163a:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    163c:	c0 95       	com	r28
    163e:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	27 c0       	rjmp	.+78     	; 0x1692 <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	20 f1       	brcs	.+72     	; 0x1690 <Timer_Start+0x32c>
    1648:	84 e2       	ldi	r24, 0x24	; 36
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <Timer_Start+0x32e>
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
			break;}
	}
	default:
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    164c:	86 e3       	ldi	r24, 0x36	; 54
    164e:	21 c0       	rjmp	.+66     	; 0x1692 <Timer_Start+0x32e>
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	1f c0       	rjmp	.+62     	; 0x1692 <Timer_Start+0x32e>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	1d c0       	rjmp	.+58     	; 0x1692 <Timer_Start+0x32e>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	1b c0       	rjmp	.+54     	; 0x1692 <Timer_Start+0x32e>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	19 c0       	rjmp	.+50     	; 0x1692 <Timer_Start+0x32e>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <Timer_Start+0x32e>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	15 c0       	rjmp	.+42     	; 0x1692 <Timer_Start+0x32e>
		else if(u8_timer0_is_init > 1){
			Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
		}
		else{
			Ret=NOT_INIT+TIMER_MODULE;
    1668:	82 e2       	ldi	r24, 0x22	; 34
    166a:	13 c0       	rjmp	.+38     	; 0x1692 <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	11 c0       	rjmp	.+34     	; 0x1692 <Timer_Start+0x32e>
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1670:	82 e2       	ldi	r24, 0x22	; 34
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <Timer_Start+0x32e>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <Timer_Start+0x32e>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <Timer_Start+0x32e>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <Timer_Start+0x32e>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <Timer_Start+0x32e>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <Timer_Start+0x32e>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1690:	82 e2       	ldi	r24, 0x22	; 34
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	return Ret;

}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <Timer_Init>:
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
if (Timer_cfg == 0)
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <Timer_Init+0xe>
    16a4:	13 c1       	rjmp	.+550    	; 0x18cc <Timer_Init+0x234>
{
	Ret=TIMER_MODULE+NULL_PTR;
}else
{
	
if(Timer_cfg->Timer_Mode==TIMER_MODE){u8_sgv_TimerMode=1;}else{u8_sgv_TimerMode=0;}
    16a6:	99 81       	ldd	r25, Y+1	; 0x01
    16a8:	99 23       	and	r25, r25
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <Timer_Init+0x1c>
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 0f 01 	sts	0x010F, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <Timer_Init+0x20>
    16b4:	10 92 0f 01 	sts	0x010F, r1

prescaler_value=Timer_cfg->Timer_Prescaler;
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	80 93 10 01 	sts	0x0110, r24
switch (Timer_cfg->Timer_CH_NO) {
    16be:	88 81       	ld	r24, Y
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <Timer_Init+0x2e>
    16c4:	5b c0       	rjmp	.+182    	; 0x177c <Timer_Init+0xe4>
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <Timer_Init+0x3a>
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <Timer_Init+0x38>
    16ce:	00 c1       	rjmp	.+512    	; 0x18d0 <Timer_Init+0x238>
    16d0:	af c0       	rjmp	.+350    	; 0x1830 <Timer_Init+0x198>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
case TIMER_CH0:
{
	u8_timer0_is_init+=1;
    16d2:	80 91 11 01 	lds	r24, 0x0111
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 11 01 	sts	0x0111, r24
	
	TCCR0 |=T0_NORMAL_MODE;
    16dc:	83 b7       	in	r24, 0x33	; 51
    16de:	83 bf       	out	0x33, r24	; 51

	switch (Timer_cfg->Timer_Mode) {
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	c9 f0       	breq	.+50     	; 0x1718 <Timer_Init+0x80>
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <Timer_Init+0x5a>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <Timer_Init+0x58>
    16ee:	f2 c0       	rjmp	.+484    	; 0x18d4 <Timer_Init+0x23c>
    16f0:	2c c0       	rjmp	.+88     	; 0x174a <Timer_Init+0xb2>
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	88 23       	and	r24, r24
    16f6:	21 f0       	breq	.+8      	; 0x1700 <Timer_Init+0x68>
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <Timer_Init+0x66>
    16fc:	ed c0       	rjmp	.+474    	; 0x18d8 <Timer_Init+0x240>
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <Timer_Init+0x72>
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    1700:	89 b7       	in	r24, 0x39	; 57
    1702:	8c 7f       	andi	r24, 0xFC	; 252
    1704:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1706:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    1708:	fa c0       	rjmp	.+500    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
    170a:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    170e:	89 b7       	in	r24, 0x39	; 57
    1710:	81 60       	ori	r24, 0x01	; 1
    1712:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1714:	10 e0       	ldi	r17, 0x00	; 0
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    1716:	f3 c0       	rjmp	.+486    	; 0x18fe <Timer_Init+0x266>
	/*                             TIMER 0 As a COUNTER_RISING_MODE          */
	/*************************************************************************/

	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH0);
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
		TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
    171e:	83 b7       	in	r24, 0x33	; 51
    1720:	8d 60       	ori	r24, 0x0D	; 13
    1722:	83 bf       	out	0x33, r24	; 51
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) 
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 23       	and	r24, r24
    1728:	21 f0       	breq	.+8      	; 0x1732 <Timer_Init+0x9a>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	09 f0       	breq	.+2      	; 0x1730 <Timer_Init+0x98>
    172e:	d6 c0       	rjmp	.+428    	; 0x18dc <Timer_Init+0x244>
    1730:	05 c0       	rjmp	.+10     	; 0x173c <Timer_Init+0xa4>
		
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    1732:	89 b7       	in	r24, 0x39	; 57
    1734:	8c 7f       	andi	r24, 0xFC	; 252
    1736:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1738:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    173a:	e1 c0       	rjmp	.+450    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
    173c:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    1740:	89 b7       	in	r24, 0x39	; 57
    1742:	81 60       	ori	r24, 0x01	; 1
    1744:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1746:	10 e0       	ldi	r17, 0x00	; 0
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    1748:	da c0       	rjmp	.+436    	; 0x18fe <Timer_Init+0x266>
		/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
		/*************************************************************************/
	
		case COUNTER_FALLING_MODE:
		{
			Timer_Stop(TIMER_CH0);
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
			TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
    1750:	83 b7       	in	r24, 0x33	; 51
    1752:	8c 60       	ori	r24, 0x0C	; 12
    1754:	83 bf       	out	0x33, r24	; 51
			switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 23       	and	r24, r24
    175a:	21 f0       	breq	.+8      	; 0x1764 <Timer_Init+0xcc>
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	09 f0       	breq	.+2      	; 0x1762 <Timer_Init+0xca>
    1760:	bf c0       	rjmp	.+382    	; 0x18e0 <Timer_Init+0x248>
    1762:	05 c0       	rjmp	.+10     	; 0x176e <Timer_Init+0xd6>
			case TIMER_POLLING_MODE:
			{

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;
    1764:	89 b7       	in	r24, 0x39	; 57
    1766:	8c 7f       	andi	r24, 0xFC	; 252
    1768:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    176a:	10 e0       	ldi	r17, 0x00	; 0

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;

				break;
    176c:	c8 c0       	rjmp	.+400    	; 0x18fe <Timer_Init+0x266>
			case TIMER_INTERRUPT_MODE:
			{
				/*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
    176e:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
				TIMSK |= T0_INTERRUPT_NORMAL;
    1772:	89 b7       	in	r24, 0x39	; 57
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1778:	10 e0       	ldi	r17, 0x00	; 0
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
				TIMSK |= T0_INTERRUPT_NORMAL;

				break;
    177a:	c1 c0       	rjmp	.+386    	; 0x18fe <Timer_Init+0x266>
/*                             TIMER 1                                   */
/*************************************************************************/

case TIMER_CH1:
{
u8_timer1_is_init+=1;
    177c:	80 91 12 01 	lds	r24, 0x0112
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	80 93 12 01 	sts	0x0112, r24
	switch (Timer_cfg->Timer_Mode)
    1786:	91 30       	cpi	r25, 0x01	; 1
    1788:	e9 f0       	breq	.+58     	; 0x17c4 <Timer_Init+0x12c>
    178a:	91 30       	cpi	r25, 0x01	; 1
    178c:	20 f0       	brcs	.+8      	; 0x1796 <Timer_Init+0xfe>
    178e:	92 30       	cpi	r25, 0x02	; 2
    1790:	09 f0       	breq	.+2      	; 0x1794 <Timer_Init+0xfc>
    1792:	a8 c0       	rjmp	.+336    	; 0x18e4 <Timer_Init+0x24c>
    1794:	32 c0       	rjmp	.+100    	; 0x17fa <Timer_Init+0x162>
	{
	case TIMER_MODE:
	{
		TCCR1 |= T1_NORMAL_MODE_CONFIG;
    1796:	8e b5       	in	r24, 0x2e	; 46
    1798:	9f b5       	in	r25, 0x2f	; 47
    179a:	9f bd       	out	0x2f, r25	; 47
    179c:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 23       	and	r24, r24
    17a2:	21 f0       	breq	.+8      	; 0x17ac <Timer_Init+0x114>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	09 f0       	breq	.+2      	; 0x17aa <Timer_Init+0x112>
    17a8:	9f c0       	rjmp	.+318    	; 0x18e8 <Timer_Init+0x250>
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <Timer_Init+0x11e>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    17ac:	89 b7       	in	r24, 0x39	; 57
    17ae:	83 7c       	andi	r24, 0xC3	; 195
    17b0:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17b2:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    17b4:	a4 c0       	rjmp	.+328    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    17b6:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    17ba:	89 b7       	in	r24, 0x39	; 57
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17c0:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    17c2:	9d c0       	rjmp	.+314    	; 0x18fe <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
		TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
    17ca:	8e b5       	in	r24, 0x2e	; 46
    17cc:	9f b5       	in	r25, 0x2f	; 47
    17ce:	87 60       	ori	r24, 0x07	; 7
    17d0:	9f bd       	out	0x2f, r25	; 47
    17d2:	8e bd       	out	0x2e, r24	; 46

		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	88 23       	and	r24, r24
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <Timer_Init+0x14a>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <Timer_Init+0x148>
    17de:	86 c0       	rjmp	.+268    	; 0x18ec <Timer_Init+0x254>
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <Timer_Init+0x154>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    17e2:	89 b7       	in	r24, 0x39	; 57
    17e4:	83 7c       	andi	r24, 0xC3	; 195
    17e6:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17e8:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    17ea:	89 c0       	rjmp	.+274    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    17ec:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    17f0:	89 b7       	in	r24, 0x39	; 57
    17f2:	84 60       	ori	r24, 0x04	; 4
    17f4:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17f6:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    17f8:	82 c0       	rjmp	.+260    	; 0x18fe <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_FALLING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer_Stop>
		TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
    1800:	8e b5       	in	r24, 0x2e	; 46
    1802:	9f b5       	in	r25, 0x2f	; 47
    1804:	86 60       	ori	r24, 0x06	; 6
    1806:	9f bd       	out	0x2f, r25	; 47
    1808:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 23       	and	r24, r24
    180e:	21 f0       	breq	.+8      	; 0x1818 <Timer_Init+0x180>
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	09 f0       	breq	.+2      	; 0x1816 <Timer_Init+0x17e>
    1814:	6d c0       	rjmp	.+218    	; 0x18f0 <Timer_Init+0x258>
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <Timer_Init+0x18a>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1818:	89 b7       	in	r24, 0x39	; 57
    181a:	83 7c       	andi	r24, 0xC3	; 195
    181c:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    181e:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
			break;
    1820:	6e c0       	rjmp	.+220    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1822:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1826:	89 b7       	in	r24, 0x39	; 57
    1828:	84 60       	ori	r24, 0x04	; 4
    182a:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    182c:	10 e0       	ldi	r17, 0x00	; 0
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */

			break;
    182e:	67 c0       	rjmp	.+206    	; 0x18fe <Timer_Init+0x266>
/*************************************************************************/
/*                             TIMER 2                                   */
/*************************************************************************/

case TIMER_CH2:
{u8_timer2_is_init+=1;
    1830:	80 91 13 01 	lds	r24, 0x0113
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 13 01 	sts	0x0113, r24
	TCCR2 |=T2_NORMAL_MODE_CONFIG;
    183a:	85 b5       	in	r24, 0x25	; 37
    183c:	85 bd       	out	0x25, r24	; 37
	switch (Timer_cfg->Timer_Mode) 
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	c9 f0       	breq	.+50     	; 0x1876 <Timer_Init+0x1de>
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	20 f0       	brcs	.+8      	; 0x1850 <Timer_Init+0x1b8>
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	09 f0       	breq	.+2      	; 0x184e <Timer_Init+0x1b6>
    184c:	53 c0       	rjmp	.+166    	; 0x18f4 <Timer_Init+0x25c>
    184e:	28 c0       	rjmp	.+80     	; 0x18a0 <Timer_Init+0x208>
	{
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 23       	and	r24, r24
    1854:	21 f0       	breq	.+8      	; 0x185e <Timer_Init+0x1c6>
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	09 f0       	breq	.+2      	; 0x185c <Timer_Init+0x1c4>
    185a:	4e c0       	rjmp	.+156    	; 0x18f8 <Timer_Init+0x260>
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <Timer_Init+0x1d0>
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    185e:	89 b7       	in	r24, 0x39	; 57
    1860:	8f 73       	andi	r24, 0x3F	; 63
    1862:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1864:	10 e0       	ldi	r17, 0x00	; 0
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
			break;
    1866:	4b c0       	rjmp	.+150    	; 0x18fe <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1868:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    186c:	89 b7       	in	r24, 0x39	; 57
    186e:	80 6c       	ori	r24, 0xC0	; 192
    1870:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1872:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
    1874:	44 c0       	rjmp	.+136    	; 0x18fe <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		ASSR |=0x08;
    1876:	82 b5       	in	r24, 0x22	; 34
    1878:	88 60       	ori	r24, 0x08	; 8
    187a:	82 bd       	out	0x22, r24	; 34
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	88 23       	and	r24, r24
    1880:	19 f0       	breq	.+6      	; 0x1888 <Timer_Init+0x1f0>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	79 f4       	brne	.+30     	; 0x18a4 <Timer_Init+0x20c>
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <Timer_Init+0x1fa>
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1888:	89 b7       	in	r24, 0x39	; 57
    188a:	8f 73       	andi	r24, 0x3F	; 63
    188c:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    188e:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;

			break;
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <Timer_Init+0x20e>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1892:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1896:	89 b7       	in	r24, 0x39	; 57
    1898:	80 6c       	ori	r24, 0xC0	; 192
    189a:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    189c:	10 e0       	ldi	r17, 0x00	; 0
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <Timer_Init+0x20e>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <Timer_Init+0x20e>
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
		}
		
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    18a4:	10 e3       	ldi	r17, 0x30	; 48
		}
	}

	case COUNTER_FALLING_MODE:
		{
			ASSR |=0x08;
    18a6:	82 b5       	in	r24, 0x22	; 34
    18a8:	88 60       	ori	r24, 0x08	; 8
    18aa:	82 bd       	out	0x22, r24	; 34
			switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 23       	and	r24, r24
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <Timer_Init+0x220>
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	19 f5       	brne	.+70     	; 0x18fc <Timer_Init+0x264>
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <Timer_Init+0x228>
			{
			case TIMER_POLLING_MODE:
			{
				TIMSK &= T2_INTERRUPT_DISABLE;
    18b8:	89 b7       	in	r24, 0x39	; 57
    18ba:	8f 73       	andi	r24, 0x3F	; 63
    18bc:	89 bf       	out	0x39, r24	; 57

				break;
    18be:	1f c0       	rjmp	.+62     	; 0x18fe <Timer_Init+0x266>
			}
			case TIMER_INTERRUPT_MODE:
			{
				G_interrupt_Enable();
    18c0:	0e 94 46 01 	call	0x28c	; 0x28c <G_interrupt_Enable>
				TIMSK|=T2_INTERRUPT_NORMAL;
    18c4:	89 b7       	in	r24, 0x39	; 57
    18c6:	80 6c       	ori	r24, 0xC0	; 192
    18c8:	89 bf       	out	0x39, r24	; 57
				break;
    18ca:	19 c0       	rjmp	.+50     	; 0x18fe <Timer_Init+0x266>

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
if (Timer_cfg == 0)
{
	Ret=TIMER_MODULE+NULL_PTR;
    18cc:	10 e2       	ldi	r17, 0x20	; 32
    18ce:	17 c0       	rjmp	.+46     	; 0x18fe <Timer_Init+0x266>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	15 c0       	rjmp	.+42     	; 0x18fe <Timer_Init+0x266>
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <Timer_Init+0x266>
    18d8:	10 e0       	ldi	r17, 0x00	; 0
    18da:	11 c0       	rjmp	.+34     	; 0x18fe <Timer_Init+0x266>
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <Timer_Init+0x266>
    18e0:	10 e0       	ldi	r17, 0x00	; 0
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <Timer_Init+0x266>
			break;
		}
		break;
	}
	default :
		Ret=INVALID_TIMER_MODE+TIMER_MODULE;
    18e4:	14 e3       	ldi	r17, 0x34	; 52
    18e6:	0b c0       	rjmp	.+22     	; 0x18fe <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18e8:	10 e3       	ldi	r17, 0x30	; 48
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    18ec:	10 e3       	ldi	r17, 0x30	; 48
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <Timer_Init+0x266>
			 */

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18f0:	10 e3       	ldi	r17, 0x30	; 48
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <Timer_Init+0x266>


	}
	
	default :
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    18f4:	16 e3       	ldi	r17, 0x36	; 54
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <Timer_Init+0x266>
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18f8:	10 e3       	ldi	r17, 0x30	; 48
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <Timer_Init+0x266>
				TIMSK|=T2_INTERRUPT_NORMAL;
				break;
			}

			default :
				Ret=INVALID_VALUE+TIMER_MODULE;
    18fc:	10 e3       	ldi	r17, 0x30	; 48
}
}
}
return Ret;

}
    18fe:	81 2f       	mov	r24, r17
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	08 95       	ret

00001908 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
	if(Data){
    1908:	61 15       	cp	r22, r1
    190a:	71 05       	cpc	r23, r1
    190c:	f9 f0       	breq	.+62     	; 0x194c <Timer_GetStatus+0x44>
	switch (Timer_CH_NO) {
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	59 f0       	breq	.+22     	; 0x1928 <Timer_GetStatus+0x20>
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	18 f0       	brcs	.+6      	; 0x191c <Timer_GetStatus+0x14>
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	d9 f4       	brne	.+54     	; 0x1950 <Timer_GetStatus+0x48>
    191a:	0e c0       	rjmp	.+28     	; 0x1938 <Timer_GetStatus+0x30>
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
    191c:	88 b7       	in	r24, 0x38	; 56
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	fb 01       	movw	r30, r22
    1922:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
	break;
    1926:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
    1928:	88 b7       	in	r24, 0x38	; 56
    192a:	86 95       	lsr	r24
    192c:	86 95       	lsr	r24
    192e:	81 70       	andi	r24, 0x01	; 1
    1930:	fb 01       	movw	r30, r22
    1932:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1934:	80 e0       	ldi	r24, 0x00	; 0
	break;
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
		break;
    1936:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
    1938:	88 b7       	in	r24, 0x38	; 56
    193a:	82 95       	swap	r24
    193c:	86 95       	lsr	r24
    193e:	86 95       	lsr	r24
    1940:	83 70       	andi	r24, 0x03	; 3
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	fb 01       	movw	r30, r22
    1946:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1948:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
		break;
    194a:	08 95       	ret
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	08 95       	ret
	{
		*Data =((TIFR>>TOV2)&1);
		break;
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1950:	86 e3       	ldi	r24, 0x36	; 54
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
	return ret;
}
    1952:	08 95       	ret

00001954 <Timer_GetValue>:
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
	if(Data){
    1954:	61 15       	cp	r22, r1
    1956:	71 05       	cpc	r23, r1
    1958:	d1 f0       	breq	.+52     	; 0x198e <Timer_GetValue+0x3a>
	switch (Timer_CH_NO) {
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	59 f0       	breq	.+22     	; 0x1974 <Timer_GetValue+0x20>
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	18 f0       	brcs	.+6      	; 0x1968 <Timer_GetValue+0x14>
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	b1 f4       	brne	.+44     	; 0x1992 <Timer_GetValue+0x3e>
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <Timer_GetValue+0x2e>
	case TIMER_CH0:
	{
		*Data =TCNT0;
    1968:	82 b7       	in	r24, 0x32	; 50
    196a:	fb 01       	movw	r30, r22
    196c:	80 83       	st	Z, r24
    196e:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1970:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =TCNT0;
		break;
    1972:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
    1974:	8c b5       	in	r24, 0x2c	; 44
    1976:	9d b5       	in	r25, 0x2d	; 45
    1978:	fb 01       	movw	r30, r22
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    197e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
		break;
    1980:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
    1982:	84 b5       	in	r24, 0x24	; 36
    1984:	fb 01       	movw	r30, r22
    1986:	80 83       	st	Z, r24
    1988:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    198a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
		break;
    198c:	08 95       	ret
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	}
	else{
		Ret=NULL_PTR+TIMER_MODULE;
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	08 95       	ret
	{
		*Data =TCNT2;
		break;
	}
	default :
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1992:	86 e3       	ldi	r24, 0x36	; 54
	else{
		Ret=NULL_PTR+TIMER_MODULE;
		}
	return Ret;

}
    1994:	08 95       	ret

00001996 <__divsf3>:
    1996:	0c d0       	rcall	.+24     	; 0x19b0 <__divsf3x>
    1998:	e6 c0       	rjmp	.+460    	; 0x1b66 <__fp_round>
    199a:	de d0       	rcall	.+444    	; 0x1b58 <__fp_pscB>
    199c:	40 f0       	brcs	.+16     	; 0x19ae <__divsf3+0x18>
    199e:	d5 d0       	rcall	.+426    	; 0x1b4a <__fp_pscA>
    19a0:	30 f0       	brcs	.+12     	; 0x19ae <__divsf3+0x18>
    19a2:	21 f4       	brne	.+8      	; 0x19ac <__divsf3+0x16>
    19a4:	5f 3f       	cpi	r21, 0xFF	; 255
    19a6:	19 f0       	breq	.+6      	; 0x19ae <__divsf3+0x18>
    19a8:	c7 c0       	rjmp	.+398    	; 0x1b38 <__fp_inf>
    19aa:	51 11       	cpse	r21, r1
    19ac:	10 c1       	rjmp	.+544    	; 0x1bce <__fp_szero>
    19ae:	ca c0       	rjmp	.+404    	; 0x1b44 <__fp_nan>

000019b0 <__divsf3x>:
    19b0:	eb d0       	rcall	.+470    	; 0x1b88 <__fp_split3>
    19b2:	98 f3       	brcs	.-26     	; 0x199a <__divsf3+0x4>

000019b4 <__divsf3_pse>:
    19b4:	99 23       	and	r25, r25
    19b6:	c9 f3       	breq	.-14     	; 0x19aa <__divsf3+0x14>
    19b8:	55 23       	and	r21, r21
    19ba:	b1 f3       	breq	.-20     	; 0x19a8 <__divsf3+0x12>
    19bc:	95 1b       	sub	r25, r21
    19be:	55 0b       	sbc	r21, r21
    19c0:	bb 27       	eor	r27, r27
    19c2:	aa 27       	eor	r26, r26
    19c4:	62 17       	cp	r22, r18
    19c6:	73 07       	cpc	r23, r19
    19c8:	84 07       	cpc	r24, r20
    19ca:	38 f0       	brcs	.+14     	; 0x19da <__divsf3_pse+0x26>
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	44 1f       	adc	r20, r20
    19d6:	aa 1f       	adc	r26, r26
    19d8:	a9 f3       	breq	.-22     	; 0x19c4 <__divsf3_pse+0x10>
    19da:	33 d0       	rcall	.+102    	; 0x1a42 <__divsf3_pse+0x8e>
    19dc:	0e 2e       	mov	r0, r30
    19de:	3a f0       	brmi	.+14     	; 0x19ee <__divsf3_pse+0x3a>
    19e0:	e0 e8       	ldi	r30, 0x80	; 128
    19e2:	30 d0       	rcall	.+96     	; 0x1a44 <__divsf3_pse+0x90>
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	e6 95       	lsr	r30
    19ea:	00 1c       	adc	r0, r0
    19ec:	ca f7       	brpl	.-14     	; 0x19e0 <__divsf3_pse+0x2c>
    19ee:	29 d0       	rcall	.+82     	; 0x1a42 <__divsf3_pse+0x8e>
    19f0:	fe 2f       	mov	r31, r30
    19f2:	27 d0       	rcall	.+78     	; 0x1a42 <__divsf3_pse+0x8e>
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	bb 1f       	adc	r27, r27
    19fc:	26 17       	cp	r18, r22
    19fe:	37 07       	cpc	r19, r23
    1a00:	48 07       	cpc	r20, r24
    1a02:	ab 07       	cpc	r26, r27
    1a04:	b0 e8       	ldi	r27, 0x80	; 128
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <__divsf3_pse+0x56>
    1a08:	bb 0b       	sbc	r27, r27
    1a0a:	80 2d       	mov	r24, r0
    1a0c:	bf 01       	movw	r22, r30
    1a0e:	ff 27       	eor	r31, r31
    1a10:	93 58       	subi	r25, 0x83	; 131
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	2a f0       	brmi	.+10     	; 0x1a20 <__divsf3_pse+0x6c>
    1a16:	9e 3f       	cpi	r25, 0xFE	; 254
    1a18:	51 05       	cpc	r21, r1
    1a1a:	68 f0       	brcs	.+26     	; 0x1a36 <__divsf3_pse+0x82>
    1a1c:	8d c0       	rjmp	.+282    	; 0x1b38 <__fp_inf>
    1a1e:	d7 c0       	rjmp	.+430    	; 0x1bce <__fp_szero>
    1a20:	5f 3f       	cpi	r21, 0xFF	; 255
    1a22:	ec f3       	brlt	.-6      	; 0x1a1e <__divsf3_pse+0x6a>
    1a24:	98 3e       	cpi	r25, 0xE8	; 232
    1a26:	dc f3       	brlt	.-10     	; 0x1a1e <__divsf3_pse+0x6a>
    1a28:	86 95       	lsr	r24
    1a2a:	77 95       	ror	r23
    1a2c:	67 95       	ror	r22
    1a2e:	b7 95       	ror	r27
    1a30:	f7 95       	ror	r31
    1a32:	9f 5f       	subi	r25, 0xFF	; 255
    1a34:	c9 f7       	brne	.-14     	; 0x1a28 <__divsf3_pse+0x74>
    1a36:	88 0f       	add	r24, r24
    1a38:	91 1d       	adc	r25, r1
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	97 f9       	bld	r25, 7
    1a40:	08 95       	ret
    1a42:	e1 e0       	ldi	r30, 0x01	; 1
    1a44:	66 0f       	add	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	bb 1f       	adc	r27, r27
    1a4c:	62 17       	cp	r22, r18
    1a4e:	73 07       	cpc	r23, r19
    1a50:	84 07       	cpc	r24, r20
    1a52:	ba 07       	cpc	r27, r26
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__divsf3_pse+0xaa>
    1a56:	62 1b       	sub	r22, r18
    1a58:	73 0b       	sbc	r23, r19
    1a5a:	84 0b       	sbc	r24, r20
    1a5c:	ba 0b       	sbc	r27, r26
    1a5e:	ee 1f       	adc	r30, r30
    1a60:	88 f7       	brcc	.-30     	; 0x1a44 <__divsf3_pse+0x90>
    1a62:	e0 95       	com	r30
    1a64:	08 95       	ret

00001a66 <__fixunssfsi>:
    1a66:	98 d0       	rcall	.+304    	; 0x1b98 <__fp_splitA>
    1a68:	88 f0       	brcs	.+34     	; 0x1a8c <__fixunssfsi+0x26>
    1a6a:	9f 57       	subi	r25, 0x7F	; 127
    1a6c:	90 f0       	brcs	.+36     	; 0x1a92 <__fixunssfsi+0x2c>
    1a6e:	b9 2f       	mov	r27, r25
    1a70:	99 27       	eor	r25, r25
    1a72:	b7 51       	subi	r27, 0x17	; 23
    1a74:	a0 f0       	brcs	.+40     	; 0x1a9e <__fixunssfsi+0x38>
    1a76:	d1 f0       	breq	.+52     	; 0x1aac <__fixunssfsi+0x46>
    1a78:	66 0f       	add	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	1a f0       	brmi	.+6      	; 0x1a88 <__fixunssfsi+0x22>
    1a82:	ba 95       	dec	r27
    1a84:	c9 f7       	brne	.-14     	; 0x1a78 <__fixunssfsi+0x12>
    1a86:	12 c0       	rjmp	.+36     	; 0x1aac <__fixunssfsi+0x46>
    1a88:	b1 30       	cpi	r27, 0x01	; 1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <__fixunssfsi+0x46>
    1a8c:	9f d0       	rcall	.+318    	; 0x1bcc <__fp_zero>
    1a8e:	b1 e0       	ldi	r27, 0x01	; 1
    1a90:	08 95       	ret
    1a92:	9c c0       	rjmp	.+312    	; 0x1bcc <__fp_zero>
    1a94:	67 2f       	mov	r22, r23
    1a96:	78 2f       	mov	r23, r24
    1a98:	88 27       	eor	r24, r24
    1a9a:	b8 5f       	subi	r27, 0xF8	; 248
    1a9c:	39 f0       	breq	.+14     	; 0x1aac <__fixunssfsi+0x46>
    1a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa0:	cc f3       	brlt	.-14     	; 0x1a94 <__fixunssfsi+0x2e>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b3 95       	inc	r27
    1aaa:	d9 f7       	brne	.-10     	; 0x1aa2 <__fixunssfsi+0x3c>
    1aac:	3e f4       	brtc	.+14     	; 0x1abc <__fixunssfsi+0x56>
    1aae:	90 95       	com	r25
    1ab0:	80 95       	com	r24
    1ab2:	70 95       	com	r23
    1ab4:	61 95       	neg	r22
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__floatunsisf>:
    1abe:	e8 94       	clt
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <__floatsisf+0x12>

00001ac2 <__floatsisf>:
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__floatsisf+0x12>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	99 23       	and	r25, r25
    1ad6:	a9 f0       	breq	.+42     	; 0x1b02 <__floatsisf+0x40>
    1ad8:	f9 2f       	mov	r31, r25
    1ada:	96 e9       	ldi	r25, 0x96	; 150
    1adc:	bb 27       	eor	r27, r27
    1ade:	93 95       	inc	r25
    1ae0:	f6 95       	lsr	r31
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	b7 95       	ror	r27
    1aea:	f1 11       	cpse	r31, r1
    1aec:	f8 cf       	rjmp	.-16     	; 0x1ade <__floatsisf+0x1c>
    1aee:	fa f4       	brpl	.+62     	; 0x1b2e <__floatsisf+0x6c>
    1af0:	bb 0f       	add	r27, r27
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <__floatsisf+0x36>
    1af4:	60 ff       	sbrs	r22, 0
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <__floatsisf+0x6c>
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <__floatsisf+0x6c>
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <__floatsisf+0x48>
    1b06:	96 e9       	ldi	r25, 0x96	; 150
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <__floatsisf+0x6a>
    1b0a:	77 23       	and	r23, r23
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <__floatsisf+0x54>
    1b0e:	9e e8       	ldi	r25, 0x8E	; 142
    1b10:	87 2f       	mov	r24, r23
    1b12:	76 2f       	mov	r23, r22
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <__floatsisf+0x5e>
    1b16:	66 23       	and	r22, r22
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__floatsisf+0x74>
    1b1a:	96 e8       	ldi	r25, 0x86	; 134
    1b1c:	86 2f       	mov	r24, r22
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	2a f0       	brmi	.+10     	; 0x1b2e <__floatsisf+0x6c>
    1b24:	9a 95       	dec	r25
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	da f7       	brpl	.-10     	; 0x1b24 <__floatsisf+0x62>
    1b2e:	88 0f       	add	r24, r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__fp_inf>:
    1b38:	97 f9       	bld	r25, 7
    1b3a:	9f 67       	ori	r25, 0x7F	; 127
    1b3c:	80 e8       	ldi	r24, 0x80	; 128
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	08 95       	ret

00001b44 <__fp_nan>:
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	80 ec       	ldi	r24, 0xC0	; 192
    1b48:	08 95       	ret

00001b4a <__fp_pscA>:
    1b4a:	00 24       	eor	r0, r0
    1b4c:	0a 94       	dec	r0
    1b4e:	16 16       	cp	r1, r22
    1b50:	17 06       	cpc	r1, r23
    1b52:	18 06       	cpc	r1, r24
    1b54:	09 06       	cpc	r0, r25
    1b56:	08 95       	ret

00001b58 <__fp_pscB>:
    1b58:	00 24       	eor	r0, r0
    1b5a:	0a 94       	dec	r0
    1b5c:	12 16       	cp	r1, r18
    1b5e:	13 06       	cpc	r1, r19
    1b60:	14 06       	cpc	r1, r20
    1b62:	05 06       	cpc	r0, r21
    1b64:	08 95       	ret

00001b66 <__fp_round>:
    1b66:	09 2e       	mov	r0, r25
    1b68:	03 94       	inc	r0
    1b6a:	00 0c       	add	r0, r0
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <__fp_round+0xc>
    1b6e:	88 23       	and	r24, r24
    1b70:	52 f0       	brmi	.+20     	; 0x1b86 <__fp_round+0x20>
    1b72:	bb 0f       	add	r27, r27
    1b74:	40 f4       	brcc	.+16     	; 0x1b86 <__fp_round+0x20>
    1b76:	bf 2b       	or	r27, r31
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__fp_round+0x18>
    1b7a:	60 ff       	sbrs	r22, 0
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__fp_round+0x20>
    1b7e:	6f 5f       	subi	r22, 0xFF	; 255
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	8f 4f       	sbci	r24, 0xFF	; 255
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	08 95       	ret

00001b88 <__fp_split3>:
    1b88:	57 fd       	sbrc	r21, 7
    1b8a:	90 58       	subi	r25, 0x80	; 128
    1b8c:	44 0f       	add	r20, r20
    1b8e:	55 1f       	adc	r21, r21
    1b90:	59 f0       	breq	.+22     	; 0x1ba8 <__fp_splitA+0x10>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <__fp_splitA+0x1a>
    1b96:	47 95       	ror	r20

00001b98 <__fp_splitA>:
    1b98:	88 0f       	add	r24, r24
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <__fp_splitA+0x20>
    1ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba2:	79 f0       	breq	.+30     	; 0x1bc2 <__fp_splitA+0x2a>
    1ba4:	87 95       	ror	r24
    1ba6:	08 95       	ret
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	14 06       	cpc	r1, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <__fp_split3+0xe>
    1bb2:	46 95       	lsr	r20
    1bb4:	f1 df       	rcall	.-30     	; 0x1b98 <__fp_splitA>
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <__fp_splitA+0x30>
    1bb8:	16 16       	cp	r1, r22
    1bba:	17 06       	cpc	r1, r23
    1bbc:	18 06       	cpc	r1, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	f1 cf       	rjmp	.-30     	; 0x1ba4 <__fp_splitA+0xc>
    1bc2:	86 95       	lsr	r24
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	61 05       	cpc	r22, r1
    1bc8:	08 94       	sec
    1bca:	08 95       	ret

00001bcc <__fp_zero>:
    1bcc:	e8 94       	clt

00001bce <__fp_szero>:
    1bce:	bb 27       	eor	r27, r27
    1bd0:	66 27       	eor	r22, r22
    1bd2:	77 27       	eor	r23, r23
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	97 f9       	bld	r25, 7
    1bd8:	08 95       	ret

00001bda <__mulsf3>:
    1bda:	0b d0       	rcall	.+22     	; 0x1bf2 <__mulsf3x>
    1bdc:	c4 cf       	rjmp	.-120    	; 0x1b66 <__fp_round>
    1bde:	b5 df       	rcall	.-150    	; 0x1b4a <__fp_pscA>
    1be0:	28 f0       	brcs	.+10     	; 0x1bec <__mulsf3+0x12>
    1be2:	ba df       	rcall	.-140    	; 0x1b58 <__fp_pscB>
    1be4:	18 f0       	brcs	.+6      	; 0x1bec <__mulsf3+0x12>
    1be6:	95 23       	and	r25, r21
    1be8:	09 f0       	breq	.+2      	; 0x1bec <__mulsf3+0x12>
    1bea:	a6 cf       	rjmp	.-180    	; 0x1b38 <__fp_inf>
    1bec:	ab cf       	rjmp	.-170    	; 0x1b44 <__fp_nan>
    1bee:	11 24       	eor	r1, r1
    1bf0:	ee cf       	rjmp	.-36     	; 0x1bce <__fp_szero>

00001bf2 <__mulsf3x>:
    1bf2:	ca df       	rcall	.-108    	; 0x1b88 <__fp_split3>
    1bf4:	a0 f3       	brcs	.-24     	; 0x1bde <__mulsf3+0x4>

00001bf6 <__mulsf3_pse>:
    1bf6:	95 9f       	mul	r25, r21
    1bf8:	d1 f3       	breq	.-12     	; 0x1bee <__mulsf3+0x14>
    1bfa:	95 0f       	add	r25, r21
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	55 1f       	adc	r21, r21
    1c00:	62 9f       	mul	r22, r18
    1c02:	f0 01       	movw	r30, r0
    1c04:	72 9f       	mul	r23, r18
    1c06:	bb 27       	eor	r27, r27
    1c08:	f0 0d       	add	r31, r0
    1c0a:	b1 1d       	adc	r27, r1
    1c0c:	63 9f       	mul	r22, r19
    1c0e:	aa 27       	eor	r26, r26
    1c10:	f0 0d       	add	r31, r0
    1c12:	b1 1d       	adc	r27, r1
    1c14:	aa 1f       	adc	r26, r26
    1c16:	64 9f       	mul	r22, r20
    1c18:	66 27       	eor	r22, r22
    1c1a:	b0 0d       	add	r27, r0
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	66 1f       	adc	r22, r22
    1c20:	82 9f       	mul	r24, r18
    1c22:	22 27       	eor	r18, r18
    1c24:	b0 0d       	add	r27, r0
    1c26:	a1 1d       	adc	r26, r1
    1c28:	62 1f       	adc	r22, r18
    1c2a:	73 9f       	mul	r23, r19
    1c2c:	b0 0d       	add	r27, r0
    1c2e:	a1 1d       	adc	r26, r1
    1c30:	62 1f       	adc	r22, r18
    1c32:	83 9f       	mul	r24, r19
    1c34:	a0 0d       	add	r26, r0
    1c36:	61 1d       	adc	r22, r1
    1c38:	22 1f       	adc	r18, r18
    1c3a:	74 9f       	mul	r23, r20
    1c3c:	33 27       	eor	r19, r19
    1c3e:	a0 0d       	add	r26, r0
    1c40:	61 1d       	adc	r22, r1
    1c42:	23 1f       	adc	r18, r19
    1c44:	84 9f       	mul	r24, r20
    1c46:	60 0d       	add	r22, r0
    1c48:	21 1d       	adc	r18, r1
    1c4a:	82 2f       	mov	r24, r18
    1c4c:	76 2f       	mov	r23, r22
    1c4e:	6a 2f       	mov	r22, r26
    1c50:	11 24       	eor	r1, r1
    1c52:	9f 57       	subi	r25, 0x7F	; 127
    1c54:	50 40       	sbci	r21, 0x00	; 0
    1c56:	8a f0       	brmi	.+34     	; 0x1c7a <__mulsf3_pse+0x84>
    1c58:	e1 f0       	breq	.+56     	; 0x1c92 <__mulsf3_pse+0x9c>
    1c5a:	88 23       	and	r24, r24
    1c5c:	4a f0       	brmi	.+18     	; 0x1c70 <__mulsf3_pse+0x7a>
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	bb 1f       	adc	r27, r27
    1c64:	66 1f       	adc	r22, r22
    1c66:	77 1f       	adc	r23, r23
    1c68:	88 1f       	adc	r24, r24
    1c6a:	91 50       	subi	r25, 0x01	; 1
    1c6c:	50 40       	sbci	r21, 0x00	; 0
    1c6e:	a9 f7       	brne	.-22     	; 0x1c5a <__mulsf3_pse+0x64>
    1c70:	9e 3f       	cpi	r25, 0xFE	; 254
    1c72:	51 05       	cpc	r21, r1
    1c74:	70 f0       	brcs	.+28     	; 0x1c92 <__mulsf3_pse+0x9c>
    1c76:	60 cf       	rjmp	.-320    	; 0x1b38 <__fp_inf>
    1c78:	aa cf       	rjmp	.-172    	; 0x1bce <__fp_szero>
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	ec f3       	brlt	.-6      	; 0x1c78 <__mulsf3_pse+0x82>
    1c7e:	98 3e       	cpi	r25, 0xE8	; 232
    1c80:	dc f3       	brlt	.-10     	; 0x1c78 <__mulsf3_pse+0x82>
    1c82:	86 95       	lsr	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	f7 95       	ror	r31
    1c8c:	e7 95       	ror	r30
    1c8e:	9f 5f       	subi	r25, 0xFF	; 255
    1c90:	c1 f7       	brne	.-16     	; 0x1c82 <__mulsf3_pse+0x8c>
    1c92:	fe 2b       	or	r31, r30
    1c94:	88 0f       	add	r24, r24
    1c96:	91 1d       	adc	r25, r1
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	97 f9       	bld	r25, 7
    1c9e:	08 95       	ret

00001ca0 <_exit>:
    1ca0:	f8 94       	cli

00001ca2 <__stop_program>:
    1ca2:	ff cf       	rjmp	.-2      	; 0x1ca2 <__stop_program>
