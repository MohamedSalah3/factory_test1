
factory_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001c6c  00001d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cf  00800096  00800096  00001d36  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f83  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  00005f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b46  00000000  00000000  00006996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a0c  00000000  00000000  000074dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a41  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f2  00000000  00000000  00008929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
       8:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_2>
       c:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_3>
      10:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_4>
      14:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_5>
      18:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_6>
      1c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_7>
      20:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_8>
      24:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_9>
      28:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_10>
      2c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_11>
      30:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_12>
      34:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_13>
      38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_14>
      3c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_15>
      40:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_16>
      44:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_17>
      48:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_18>
      4c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_19>
      50:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 01 	call	0x282	; 0x282 <main>
      8a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
      92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
      94:	82 81       	ldd	r24, Z+2	; 0x02
      96:	88 23       	and	r24, r24
      98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
      9a:	8f 3f       	cpi	r24, 0xFF	; 255
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
      9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
      a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
      a2:	80 81       	ld	r24, Z
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
      a8:	81 30       	cpi	r24, 0x01	; 1
      aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
      b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
      b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
      b8:	9a b3       	in	r25, 0x1a	; 26
      ba:	81 81       	ldd	r24, Z+1	; 0x01
      bc:	80 95       	com	r24
      be:	89 23       	and	r24, r25
      c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
      c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
      c6:	97 b3       	in	r25, 0x17	; 23
      c8:	81 81       	ldd	r24, Z+1	; 0x01
      ca:	80 95       	com	r24
      cc:	89 23       	and	r24, r25
      ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
      d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
      d4:	94 b3       	in	r25, 0x14	; 20
      d6:	81 81       	ldd	r24, Z+1	; 0x01
      d8:	80 95       	com	r24
      da:	89 23       	and	r24, r25
      dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
      de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
      e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
      e2:	91 b3       	in	r25, 0x11	; 17
      e4:	81 81       	ldd	r24, Z+1	; 0x01
      e6:	80 95       	com	r24
      e8:	89 23       	and	r24, r25
      ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
      ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
      ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
      f0:	80 81       	ld	r24, Z
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
     102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
     104:	9a b3       	in	r25, 0x1a	; 26
     106:	81 81       	ldd	r24, Z+1	; 0x01
     108:	89 2b       	or	r24, r25
     10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
     10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
     110:	97 b3       	in	r25, 0x17	; 23
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	89 2b       	or	r24, r25
     116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
     11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
     11c:	94 b3       	in	r25, 0x14	; 20
     11e:	81 81       	ldd	r24, Z+1	; 0x01
     120:	89 2b       	or	r24, r25
     122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
     126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
     128:	91 b3       	in	r25, 0x11	; 17
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
     132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
     13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
     140:	44 23       	and	r20, r20
     142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
     144:	4f 3f       	cpi	r20, 0xFF	; 255
     146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
     14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
     154:	82 30       	cpi	r24, 0x02	; 2
     156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
     158:	83 30       	cpi	r24, 0x03	; 3
     15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
     15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
     15e:	8b b3       	in	r24, 0x1b	; 27
     160:	60 95       	com	r22
     162:	68 23       	and	r22, r24
     164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
     168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
     16a:	88 b3       	in	r24, 0x18	; 24
     16c:	60 95       	com	r22
     16e:	68 23       	and	r22, r24
     170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
     174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
     176:	85 b3       	in	r24, 0x15	; 21
     178:	60 95       	com	r22
     17a:	68 23       	and	r22, r24
     17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
     180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
     182:	82 b3       	in	r24, 0x12	; 18
     184:	60 95       	com	r22
     186:	68 23       	and	r22, r24
     188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
     18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
     19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
     1a0:	8b b3       	in	r24, 0x1b	; 27
     1a2:	68 2b       	or	r22, r24
     1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
     1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
     1aa:	88 b3       	in	r24, 0x18	; 24
     1ac:	68 2b       	or	r22, r24
     1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
     1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
     1b4:	85 b3       	in	r24, 0x15	; 21
     1b6:	68 2b       	or	r22, r24
     1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
     1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
     1be:	82 b3       	in	r24, 0x12	; 18
     1c0:	68 2b       	or	r22, r24
     1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
     1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
     1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     1d4:	fa 01       	movw	r30, r20

switch (GPIO)
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
     1de:	82 30       	cpi	r24, 0x02	; 2
     1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
     1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
     1e8:	89 b3       	in	r24, 0x19	; 25
     1ea:	68 23       	and	r22, r24
     1ec:	60 83       	st	Z, r22
	break;
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
     1f0:	86 b3       	in	r24, 0x16	; 22
     1f2:	68 23       	and	r22, r24
     1f4:	60 83       	st	Z, r22
	break;
     1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
     1f8:	83 b3       	in	r24, 0x13	; 19
     1fa:	68 23       	and	r22, r24
     1fc:	60 83       	st	Z, r22
	break;
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
     200:	80 b3       	in	r24, 0x10	; 16
     202:	68 23       	and	r22, r24
     204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 83       	st	Z, r24
}


}
     210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
     222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
     224:	8b b3       	in	r24, 0x1b	; 27
     226:	68 27       	eor	r22, r24
     228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
     22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
     22e:	88 b3       	in	r24, 0x18	; 24
     230:	68 27       	eor	r22, r24
     232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
     234:	80 e0       	ldi	r24, 0x00	; 0
		break;
     236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
     238:	85 b3       	in	r24, 0x15	; 21
     23a:	68 27       	eor	r22, r24
     23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
     240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
     242:	82 b3       	in	r24, 0x12	; 18
     244:	68 27       	eor	r22, r24
     246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
     248:	80 e0       	ldi	r24, 0x00	; 0
		break;
     24a:	08 95       	ret
		default:
		ret=E_NOK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
     24e:	08 95       	ret

00000250 <system_init>:

#include "motor.h"
#include "pushButton.h"
#include "SOS.h"
void system_init(void){	
SOS_Init (&TMU_Configuration);
     250:	81 e8       	ldi	r24, 0x81	; 129
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 7e 08 	call	0x10fc	; 0x10fc <SOS_Init>
SOS_Create_Task(Task1,1,0,1);
     258:	8a e6       	ldi	r24, 0x6A	; 106
     25a:	99 e0       	ldi	r25, 0x09	; 9
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <SOS_Create_Task>
DIO_init(&ALL_Motor);
     268:	8e e6       	ldi	r24, 0x6E	; 110
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
PORTB_DIR=0;
     270:	17 ba       	out	0x17, r1	; 23
Motor_Init(MOTOR_1|MOTOR_2);
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	0e 94 8b 04 	call	0x916	; 0x916 <Motor_Init>
Motor_Direction(MOTOR_1|MOTOR_2,MOTOR_FORWARD);
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_Direction>
}
     280:	08 95       	ret

00000282 <main>:

int main(void)
{
  system_init();
     282:	0e 94 28 01 	call	0x250	; 0x250 <system_init>
    while(1)
    {
	 SOS_Run();
     286:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SOS_Run>
	
	Motor_Start(MOTOR_1|MOTOR_2 , 10);/*ON*/
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	6a e0       	ldi	r22, 0x0A	; 10
     28e:	0e 94 63 05 	call	0xac6	; 0xac6 <Motor_Start>
			Motor_Start(MOTOR_1|MOTOR_2 , 50);/*half speed*/
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	62 e3       	ldi	r22, 0x32	; 50
     296:	0e 94 63 05 	call	0xac6	; 0xac6 <Motor_Start>
				Motor_Start(MOTOR_1|MOTOR_2 , 100);/*full speed*/
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	64 e6       	ldi	r22, 0x64	; 100
     29e:	0e 94 63 05 	call	0xac6	; 0xac6 <Motor_Start>
					Motor_Start(MOTOR_1|MOTOR_2 , 0);/*off*/
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	0e 94 63 05 	call	0xac6	; 0xac6 <Motor_Start>
     2aa:	ed cf       	rjmp	.-38     	; 0x286 <main+0x4>

000002ac <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     2ac:	8f b7       	in	r24, 0x3f	; 63
     2ae:	80 68       	ori	r24, 0x80	; 128
     2b0:	8f bf       	out	0x3f, r24	; 63
}
     2b2:	08 95       	ret

000002b4 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     2b4:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     2b6:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     2b8:	8b b7       	in	r24, 0x3b	; 59
     2ba:	80 62       	ori	r24, 0x20	; 32
     2bc:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     2be:	84 b7       	in	r24, 0x34	; 52
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	84 bf       	out	0x34, r24	; 52
}
     2c4:	08 95       	ret

000002c6 <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     2c6:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     2c8:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     2ca:	8b b7       	in	r24, 0x3b	; 59
     2cc:	80 68       	ori	r24, 0x80	; 128
     2ce:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     2d0:	85 b7       	in	r24, 0x35	; 53
     2d2:	84 60       	ori	r24, 0x04	; 4
     2d4:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     2d6:	85 b7       	in	r24, 0x35	; 53
     2d8:	87 7f       	andi	r24, 0xF7	; 247
     2da:	85 bf       	out	0x35, r24	; 53
	
}
     2dc:	08 95       	ret

000002de <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     2de:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     2e0:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     2e2:	8b b7       	in	r24, 0x3b	; 59
     2e4:	80 64       	ori	r24, 0x40	; 64
     2e6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     2e8:	85 b7       	in	r24, 0x35	; 53
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     2ee:	85 b7       	in	r24, 0x35	; 53
     2f0:	8d 7f       	andi	r24, 0xFD	; 253
     2f2:	85 bf       	out	0x35, r24	; 53
	
}
     2f4:	08 95       	ret

000002f6 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2f6:	8f b7       	in	r24, 0x3f	; 63
     2f8:	8f 77       	andi	r24, 0x7F	; 127
     2fa:	8f bf       	out	0x3f, r24	; 63
}
     2fc:	08 95       	ret

000002fe <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
  INT0_external_interrupt();
     320:	e0 91 29 01 	lds	r30, 0x0129
     324:	f0 91 2a 01 	lds	r31, 0x012A
     328:	09 95       	icall
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	2f 93       	push	r18
     358:	3f 93       	push	r19
     35a:	4f 93       	push	r20
     35c:	5f 93       	push	r21
     35e:	6f 93       	push	r22
     360:	7f 93       	push	r23
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	af 93       	push	r26
     368:	bf 93       	push	r27
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
  INT1_external_interrupt();
     36e:	e0 91 31 01 	lds	r30, 0x0131
     372:	f0 91 32 01 	lds	r31, 0x0132
     376:	09 95       	icall
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	6f 93       	push	r22
     3ae:	7f 93       	push	r23
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	bf 93       	push	r27
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
  INT2_external_interrupt();
     3bc:	e0 91 21 01 	lds	r30, 0x0121
     3c0:	f0 91 22 01 	lds	r31, 0x0122
     3c4:	09 95       	icall
}
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	bf 91       	pop	r27
     3cc:	af 91       	pop	r26
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	7f 91       	pop	r23
     3d4:	6f 91       	pop	r22
     3d6:	5f 91       	pop	r21
     3d8:	4f 91       	pop	r20
     3da:	3f 91       	pop	r19
     3dc:	2f 91       	pop	r18
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
TIMER2COMP();
     40a:	e0 91 37 01 	lds	r30, 0x0137
     40e:	f0 91 38 01 	lds	r31, 0x0138
     412:	09 95       	icall
}
     414:	ff 91       	pop	r31
     416:	ef 91       	pop	r30
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	7f 91       	pop	r23
     422:	6f 91       	pop	r22
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
  TIMER2OVF();
     458:	e0 91 17 01 	lds	r30, 0x0117
     45c:	f0 91 18 01 	lds	r31, 0x0118
     460:	09 95       	icall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	2f 93       	push	r18
     490:	3f 93       	push	r19
     492:	4f 93       	push	r20
     494:	5f 93       	push	r21
     496:	6f 93       	push	r22
     498:	7f 93       	push	r23
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	ef 93       	push	r30
     4a4:	ff 93       	push	r31
  TIMER1CAPT();
     4a6:	e0 91 33 01 	lds	r30, 0x0133
     4aa:	f0 91 34 01 	lds	r31, 0x0134
     4ae:	09 95       	icall
}
     4b0:	ff 91       	pop	r31
     4b2:	ef 91       	pop	r30
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	7f 91       	pop	r23
     4be:	6f 91       	pop	r22
     4c0:	5f 91       	pop	r21
     4c2:	4f 91       	pop	r20
     4c4:	3f 91       	pop	r19
     4c6:	2f 91       	pop	r18
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
TIMER1COMPA();
     4f4:	e0 91 1d 01 	lds	r30, 0x011D
     4f8:	f0 91 1e 01 	lds	r31, 0x011E
     4fc:	09 95       	icall
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
  TIMER1COMPB();
     542:	e0 91 1b 01 	lds	r30, 0x011B
     546:	f0 91 1c 01 	lds	r31, 0x011C
     54a:	09 95       	icall
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
  TIMER1OVF();
     590:	e0 91 35 01 	lds	r30, 0x0135
     594:	f0 91 36 01 	lds	r31, 0x0136
     598:	09 95       	icall
}
     59a:	ff 91       	pop	r31
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31

  TIMER0COMP();
     5de:	e0 91 2d 01 	lds	r30, 0x012D
     5e2:	f0 91 2e 01 	lds	r31, 0x012E
     5e6:	09 95       	icall
}
     5e8:	ff 91       	pop	r31
     5ea:	ef 91       	pop	r30
     5ec:	bf 91       	pop	r27
     5ee:	af 91       	pop	r26
     5f0:	9f 91       	pop	r25
     5f2:	8f 91       	pop	r24
     5f4:	7f 91       	pop	r23
     5f6:	6f 91       	pop	r22
     5f8:	5f 91       	pop	r21
     5fa:	4f 91       	pop	r20
     5fc:	3f 91       	pop	r19
     5fe:	2f 91       	pop	r18
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	ef 93       	push	r30
     62a:	ff 93       	push	r31

  TIMER0OVF_INT();
     62c:	e0 91 6c 00 	lds	r30, 0x006C
     630:	f0 91 6d 00 	lds	r31, 0x006D
     634:	09 95       	icall
}
     636:	ff 91       	pop	r31
     638:	ef 91       	pop	r30
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
  SPI_STC();
     67a:	e0 91 1f 01 	lds	r30, 0x011F
     67e:	f0 91 20 01 	lds	r31, 0x0120
     682:	09 95       	icall
}
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	7f 91       	pop	r23
     692:	6f 91       	pop	r22
     694:	5f 91       	pop	r21
     696:	4f 91       	pop	r20
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	4f 93       	push	r20
     6b6:	5f 93       	push	r21
     6b8:	6f 93       	push	r22
     6ba:	7f 93       	push	r23
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
     6c4:	ef 93       	push	r30
     6c6:	ff 93       	push	r31
  USART_RXC();
     6c8:	e0 91 15 01 	lds	r30, 0x0115
     6cc:	f0 91 16 01 	lds	r31, 0x0116
     6d0:	09 95       	icall
}
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	bf 91       	pop	r27
     6d8:	af 91       	pop	r26
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	7f 91       	pop	r23
     6e0:	6f 91       	pop	r22
     6e2:	5f 91       	pop	r21
     6e4:	4f 91       	pop	r20
     6e6:	3f 91       	pop	r19
     6e8:	2f 91       	pop	r18
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
  USART_UDRE();
     716:	e0 91 2f 01 	lds	r30, 0x012F
     71a:	f0 91 30 01 	lds	r31, 0x0130
     71e:	09 95       	icall
}
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
  USART_TXC();
     764:	e0 91 2b 01 	lds	r30, 0x012B
     768:	f0 91 2c 01 	lds	r31, 0x012C
     76c:	09 95       	icall
}
     76e:	ff 91       	pop	r31
     770:	ef 91       	pop	r30
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	7f 91       	pop	r23
     77c:	6f 91       	pop	r22
     77e:	5f 91       	pop	r21
     780:	4f 91       	pop	r20
     782:	3f 91       	pop	r19
     784:	2f 91       	pop	r18
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	1f 90       	pop	r1
     78e:	18 95       	reti

00000790 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
  ADC_INT();
     7b2:	e0 91 25 01 	lds	r30, 0x0125
     7b6:	f0 91 26 01 	lds	r31, 0x0126
     7ba:	09 95       	icall
}
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
  EE_RDY();
     800:	e0 91 27 01 	lds	r30, 0x0127
     804:	f0 91 28 01 	lds	r31, 0x0128
     808:	09 95       	icall
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
  ANA_COMP();
     84e:	e0 91 23 01 	lds	r30, 0x0123
     852:	f0 91 24 01 	lds	r31, 0x0124
     856:	09 95       	icall
}
     858:	ff 91       	pop	r31
     85a:	ef 91       	pop	r30
     85c:	bf 91       	pop	r27
     85e:	af 91       	pop	r26
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	7f 91       	pop	r23
     866:	6f 91       	pop	r22
     868:	5f 91       	pop	r21
     86a:	4f 91       	pop	r20
     86c:	3f 91       	pop	r19
     86e:	2f 91       	pop	r18
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
  TWI_I2C();
     89c:	e0 91 13 01 	lds	r30, 0x0113
     8a0:	f0 91 14 01 	lds	r31, 0x0114
     8a4:	09 95       	icall
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	0f 90       	pop	r0
     8c4:	1f 90       	pop	r1
     8c6:	18 95       	reti

000008c8 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
  SPM_RDY();
     8ea:	e0 91 19 01 	lds	r30, 0x0119
     8ee:	f0 91 1a 01 	lds	r31, 0x011A
     8f2:	09 95       	icall
}
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	79 f0       	breq	.+30     	; 0x938 <Motor_Init+0x22>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	c9 f0       	breq	.+50     	; 0x950 <Motor_Init+0x3a>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	39 f5       	brne	.+78     	; 0x970 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     922:	80 93 96 00 	sts	0x0096, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     926:	8f e7       	ldi	r24, 0x7F	; 127
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Pwm_Init>
			Ret=DIO_init(&Motorone);
     92e:	84 e7       	ldi	r24, 0x74	; 116
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>

			  break;
     936:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	80 93 96 00 	sts	0x0096, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     93e:	8d e7       	ldi	r24, 0x7D	; 125
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     946:	81 e7       	ldi	r24, 0x71	; 113
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     94e:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	80 93 96 00 	sts	0x0096, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     956:	8f e7       	ldi	r24, 0x7F	; 127
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     95e:	8d e7       	ldi	r24, 0x7D	; 125
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     966:	8e e6       	ldi	r24, 0x6E	; 110
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
				break;
     96e:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     970:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     972:	08 95       	ret

00000974 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	79 f1       	breq	.+94     	; 0x9d6 <Motor_Direction+0x62>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	09 f4       	brne	.+2      	; 0x97e <Motor_Direction+0xa>
     97c:	55 c0       	rjmp	.+170    	; 0xa28 <Motor_Direction+0xb4>
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	09 f0       	breq	.+2      	; 0x984 <Motor_Direction+0x10>
     982:	99 c0       	rjmp	.+306    	; 0xab6 <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     984:	61 30       	cpi	r22, 0x01	; 1
     986:	31 f0       	breq	.+12     	; 0x994 <Motor_Direction+0x20>
     988:	61 30       	cpi	r22, 0x01	; 1
     98a:	d0 f0       	brcs	.+52     	; 0x9c0 <Motor_Direction+0x4c>
     98c:	62 30       	cpi	r22, 0x02	; 2
     98e:	09 f0       	breq	.+2      	; 0x992 <Motor_Direction+0x1e>
     990:	94 c0       	rjmp	.+296    	; 0xaba <Motor_Direction+0x146>
     992:	0b c0       	rjmp	.+22     	; 0x9aa <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	64 e0       	ldi	r22, 0x04	; 4
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	68 e0       	ldi	r22, 0x08	; 8
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     9a8:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	68 e0       	ldi	r22, 0x08	; 8
     9ae:	4f ef       	ldi	r20, 0xFF	; 255
     9b0:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	64 e0       	ldi	r22, 0x04	; 4
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			break;
     9be:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	64 e0       	ldi	r22, 0x04	; 4
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	68 e0       	ldi	r22, 0x08	; 8
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		break;}
     9d4:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     9d6:	61 30       	cpi	r22, 0x01	; 1
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <Motor_Direction+0x72>
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	d0 f0       	brcs	.+52     	; 0xa12 <Motor_Direction+0x9e>
     9de:	62 30       	cpi	r22, 0x02	; 2
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <Motor_Direction+0x70>
     9e2:	6d c0       	rjmp	.+218    	; 0xabe <Motor_Direction+0x14a>
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	4f ef       	ldi	r20, 0xFF	; 255
     9ec:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  				break;
     9fa:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     a10:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  				break;
     a26:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     a28:	61 30       	cpi	r22, 0x01	; 1
     a2a:	31 f0       	breq	.+12     	; 0xa38 <Motor_Direction+0xc4>
     a2c:	61 30       	cpi	r22, 0x01	; 1
     a2e:	70 f1       	brcs	.+92     	; 0xa8c <Motor_Direction+0x118>
     a30:	62 30       	cpi	r22, 0x02	; 2
     a32:	09 f0       	breq	.+2      	; 0xa36 <Motor_Direction+0xc2>
     a34:	46 c0       	rjmp	.+140    	; 0xac2 <Motor_Direction+0x14e>
     a36:	15 c0       	rjmp	.+42     	; 0xa62 <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	64 e0       	ldi	r22, 0x04	; 4
     a3c:	4f ef       	ldi	r20, 0xFF	; 255
     a3e:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	68 e0       	ldi	r22, 0x08	; 8
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	4f ef       	ldi	r20, 0xFF	; 255
     a5c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     a60:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	64 e0       	ldi	r22, 0x04	; 4
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	68 e0       	ldi	r22, 0x08	; 8
     a70:	4f ef       	ldi	r20, 0xFF	; 255
     a72:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	4f ef       	ldi	r20, 0xFF	; 255
     a7c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;	}
     a8a:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	64 e0       	ldi	r22, 0x04	; 4
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	62 e0       	ldi	r22, 0x02	; 2
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>

  		break;
     ab4:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 95       	ret
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     ac2:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     ac4:	08 95       	ret

00000ac6 <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	69 f0       	breq	.+26     	; 0xae4 <Motor_Start+0x1e>
     aca:	83 30       	cpi	r24, 0x03	; 3
     acc:	a9 f0       	breq	.+42     	; 0xaf8 <Motor_Start+0x32>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	f1 f4       	brne	.+60     	; 0xb0e <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     ad2:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,31372);
     ad6:	2c e8       	ldi	r18, 0x8C	; 140
     ad8:	3a e7       	ldi	r19, 0x7A	; 122
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
    break;
     ae2:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     aea:	2c e8       	ldi	r18, 0x8C	; 140
     aec:	3a e7       	ldi	r19, 0x7A	; 122
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
    break;
     af6:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	80 93 97 00 	sts	0x0097, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,31372);
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	2c e8       	ldi	r18, 0x8C	; 140
     b02:	3a e7       	ldi	r19, 0x7A	; 122
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
    break;
     b0c:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     b10:	08 95       	ret

00000b12 <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	79 f0       	breq	.+30     	; 0xb34 <Motor_SpeedUpdate+0x22>
     b16:	83 30       	cpi	r24, 0x03	; 3
     b18:	c1 f0       	breq	.+48     	; 0xb4a <Motor_SpeedUpdate+0x38>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	11 f5       	brne	.+68     	; 0xb62 <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     b1e:	80 91 96 00 	lds	r24, 0x0096
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	01 f5       	brne	.+64     	; 0xb66 <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     b26:	2e e1       	ldi	r18, 0x1E	; 30
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
     b32:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     b34:	80 91 96 00 	lds	r24, 0x0096
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	b9 f4       	brne	.+46     	; 0xb6a <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     b3c:	2e e1       	ldi	r18, 0x1E	; 30
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
     b48:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     b4a:	80 91 96 00 	lds	r24, 0x0096
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	71 f4       	brne	.+28     	; 0xb6e <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	2e e1       	ldi	r18, 0x1E	; 30
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
     b60:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     b6e:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     b70:	08 95       	ret

00000b72 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	19 f0       	breq	.+6      	; 0xb7c <Motor_Stop+0xa>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	49 f4       	brne	.+18     	; 0xb8c <Motor_Stop+0x1a>
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 65 08 	call	0x10ca	; 0x10ca <Pwm_Stop>
		break;
     b82:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	0e 94 65 08 	call	0x10ca	; 0x10ca <Pwm_Stop>
		break;
     b8a:	08 95       	ret
		default:
		Ret=E_NOK;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     b8e:	08 95       	ret

00000b90 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     b90:	90 91 96 00 	lds	r25, 0x0096
     b94:	98 17       	cp	r25, r24
     b96:	21 f4       	brne	.+8      	; 0xba0 <Motor_GetStatus+0x10>
		*Mot_status=1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	fb 01       	movw	r30, r22
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     ba0:	fb 01       	movw	r30, r22
     ba2:	10 82       	st	Z, r1
	 }
	 
 }
     ba4:	08 95       	ret

00000ba6 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
static uint8_t u8_Button_press[3];
static uint8_t u8_S_button_status[3];
switch(en_butotn_id)
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	c1 f0       	breq	.+48     	; 0xbda <pushButtonGetStatus+0x34>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	18 f0       	brcs	.+6      	; 0xbb4 <pushButtonGetStatus+0xe>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	d1 f5       	brne	.+116    	; 0xc26 <pushButtonGetStatus+0x80>
     bb2:	26 c0       	rjmp	.+76     	; 0xc00 <pushButtonGetStatus+0x5a>
{
case BTN_0:
{DIO_Read(BTN_0_GPIO,BTN_0_BIT,&(u8_Button_press[0]));
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	48 e9       	ldi	r20, 0x98	; 152
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[0]== Pressed)
     bc0:	80 91 98 00 	lds	r24, 0x0098
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	81 f5       	brne	.+96     	; 0xc28 <pushButtonGetStatus+0x82>
{ 
	(u8_S_button_status[0])++;
     bc8:	90 91 9b 00 	lds	r25, 0x009B
     bcc:	9f 5f       	subi	r25, 0xFF	; 255
     bce:	90 93 9b 00 	sts	0x009B, r25
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 10)
	return Pressed;
     bd2:	9b 30       	cpi	r25, 0x0B	; 11
     bd4:	70 f5       	brcc	.+92     	; 0xc32 <pushButtonGetStatus+0x8c>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_1:
{DIO_Read(BTN_1_GPIO,BTN_1_BIT,&(u8_Button_press[1]));
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	49 e9       	ldi	r20, 0x99	; 153
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if( u8_Button_press[1] == Pressed)
     be6:	80 91 99 00 	lds	r24, 0x0099
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	f9 f4       	brne	.+62     	; 0xc2c <pushButtonGetStatus+0x86>
{
	(u8_S_button_status[0])++;
     bee:	90 91 9b 00 	lds	r25, 0x009B
     bf2:	9f 5f       	subi	r25, 0xFF	; 255
     bf4:	90 93 9b 00 	sts	0x009B, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 10)
	return Pressed;
     bf8:	93 33       	cpi	r25, 0x33	; 51
     bfa:	d8 f4       	brcc	.+54     	; 0xc32 <pushButtonGetStatus+0x8c>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_2:
{DIO_Read(BTN_2_GPIO,BTN_2_BIT,&(u8_Button_press[2]));
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	64 e0       	ldi	r22, 0x04	; 4
     c04:	4a e9       	ldi	r20, 0x9A	; 154
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
if((u8_Button_press[2])== Pressed)
     c0c:	80 91 9a 00 	lds	r24, 0x009A
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	71 f4       	brne	.+28     	; 0xc30 <pushButtonGetStatus+0x8a>
{	(u8_S_button_status[1])++;
     c14:	90 91 9c 00 	lds	r25, 0x009C
     c18:	9f 5f       	subi	r25, 0xFF	; 255
     c1a:	90 93 9c 00 	sts	0x009C, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         De bouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 10)
	return Pressed;
     c1e:	95 31       	cpi	r25, 0x15	; 21
     c20:	40 f4       	brcc	.+16     	; 0xc32 <pushButtonGetStatus+0x8c>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
     c26:	08 95       	ret
	else {return Released;}
}else{return Released;}
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
return Pressed;
	else {return Released;}
}else{return Released;}
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[1]) > 20)
	return Pressed;
else {return Released;}
}else{return Released;}
     c30:	80 e0       	ldi	r24, 0x00	; 0


	}


}
     c32:	08 95       	ret

00000c34 <pushButtonGetState>:
{
static uint8_t u8_state_of_Button;

static uint8_t com=0;
	
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com]))//pushButtonGetStatus(BTN_0)== Released)
     c34:	40 91 9e 00 	lds	r20, 0x009E
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	41 56       	subi	r20, 0x61	; 97
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     c46:	88 23       	and	r24, r24
     c48:	81 f0       	breq	.+32     	; 0xc6a <pushButtonGetState+0x36>
{
	
	if (flag == 0)
     c4a:	80 91 77 00 	lds	r24, 0x0077
     c4e:	88 23       	and	r24, r24
     c50:	41 f4       	brne	.+16     	; 0xc62 <pushButtonGetState+0x2e>
	{
	counter++;
     c52:	80 91 03 01 	lds	r24, 0x0103
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	80 93 03 01 	sts	0x0103, r24
	flag = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 77 00 	sts	0x0077, r24
	}
	counter2=0;
     c62:	10 92 04 01 	sts	0x0104, r1
	flag2=0;
     c66:	10 92 78 00 	sts	0x0078, r1
}
if (DIO_Read(BTN_0_GPIO,BTN_0_BIT,&arr_u8_instant_state[com])==0)//pushButtonGetStatus(BTN_0) == Pressed)
     c6a:	40 91 9e 00 	lds	r20, 0x009E
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	41 56       	subi	r20, 0x61	; 97
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_Read>
     c7c:	88 23       	and	r24, r24
     c7e:	e9 f4       	brne	.+58     	; 0xcba <pushButtonGetState+0x86>
{	
	if (counter<20)
     c80:	80 91 03 01 	lds	r24, 0x0103
     c84:	84 31       	cpi	r24, 0x14	; 20
     c86:	18 f4       	brcc	.+6      	; 0xc8e <pushButtonGetState+0x5a>
	{
		ret_state = 0 ;
     c88:	10 92 05 01 	sts	0x0105, r1
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <pushButtonGetState+0x74>
	}else if(counter >20 && counter<50)
     c8e:	98 2f       	mov	r25, r24
     c90:	95 51       	subi	r25, 0x15	; 21
     c92:	9d 31       	cpi	r25, 0x1D	; 29
     c94:	20 f4       	brcc	.+8      	; 0xc9e <pushButtonGetState+0x6a>
	{
		ret_state=1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 05 01 	sts	0x0105, r24
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <pushButtonGetState+0x74>
	}else if(counter >50){
     c9e:	83 33       	cpi	r24, 0x33	; 51
     ca0:	18 f0       	brcs	.+6      	; 0xca8 <pushButtonGetState+0x74>
		ret_state=3;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	80 93 05 01 	sts	0x0105, r24
	}
		flag = 0;
     ca8:	10 92 77 00 	sts	0x0077, r1
		counter2++;
     cac:	80 91 04 01 	lds	r24, 0x0104
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 93 04 01 	sts	0x0104, r24
		counter=0;
     cb6:	10 92 03 01 	sts	0x0103, r1
}
if (com<=100)
     cba:	80 91 9e 00 	lds	r24, 0x009E
     cbe:	85 36       	cpi	r24, 0x65	; 101
     cc0:	20 f4       	brcc	.+8      	; 0xcca <pushButtonGetState+0x96>
{
	com++;
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 9e 00 	sts	0x009E, r24
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <pushButtonGetState+0x9a>
}else{
com=0;/*
     cca:	10 92 9e 00 	sts	0x009E, r1
//arr_u8_instant_state[com++]=counter;



return ret_state;
}/*
     cce:	80 91 05 01 	lds	r24, 0x0105
     cd2:	08 95       	ret

00000cd4 <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
     cd4:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
     cd6:	80 81       	ld	r24, Z
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	61 f0       	breq	.+24     	; 0xcf4 <Pwm_Init+0x20>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	28 f0       	brcs	.+10     	; 0xcea <Pwm_Init+0x16>
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	81 f0       	breq	.+32     	; 0xd04 <Pwm_Init+0x30>
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	d9 f4       	brne	.+54     	; 0xd1e <Pwm_Init+0x4a>
     ce8:	15 c0       	rjmp	.+42     	; 0xd14 <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     cea:	83 b7       	in	r24, 0x33	; 51
     cec:	88 66       	ori	r24, 0x68	; 104
     cee:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
			break;
     cf2:	16 c0       	rjmp	.+44     	; 0xd20 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
     cf4:	8e b5       	in	r24, 0x2e	; 46
     cf6:	9f b5       	in	r25, 0x2f	; 47
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	91 6a       	ori	r25, 0xA1	; 161
     cfc:	9f bd       	out	0x2f, r25	; 47
     cfe:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     d00:	80 e0       	ldi	r24, 0x00	; 0
			break;
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
     d04:	8e b5       	in	r24, 0x2e	; 46
     d06:	9f b5       	in	r25, 0x2f	; 47
     d08:	80 62       	ori	r24, 0x20	; 32
     d0a:	91 6a       	ori	r25, 0xA1	; 161
     d0c:	9f bd       	out	0x2f, r25	; 47
     d0e:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
     d10:	80 e0       	ldi	r24, 0x00	; 0
			break;
     d12:	06 c0       	rjmp	.+12     	; 0xd20 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
     d14:	85 b5       	in	r24, 0x25	; 37
     d16:	88 66       	ori	r24, 0x68	; 104
     d18:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
			break;
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	90 93 06 01 	sts	0x0106, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
     d26:	08 95       	ret

00000d28 <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	89 01       	movw	r16, r18
     d36:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     d38:	0f 2e       	mov	r0, r31
     d3a:	fe ea       	ldi	r31, 0xAE	; 174
     d3c:	cf 2e       	mov	r12, r31
     d3e:	f0 ef       	ldi	r31, 0xF0	; 240
     d40:	df 2e       	mov	r13, r31
     d42:	ff ef       	ldi	r31, 0xFF	; 255
     d44:	ef 2e       	mov	r14, r31
     d46:	ff ef       	ldi	r31, 0xFF	; 255
     d48:	ff 2e       	mov	r15, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	c0 0e       	add	r12, r16
     d4e:	d1 1e       	adc	r13, r17
     d50:	e2 1e       	adc	r14, r18
     d52:	f3 1e       	adc	r15, r19
     d54:	9b e3       	ldi	r25, 0x3B	; 59
     d56:	c9 16       	cp	r12, r25
     d58:	9b e6       	ldi	r25, 0x6B	; 107
     d5a:	d9 06       	cpc	r13, r25
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	e9 06       	cpc	r14, r25
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	f9 06       	cpc	r15, r25
     d64:	18 f4       	brcc	.+6      	; 0xd6c <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
     d66:	10 92 06 01 	sts	0x0106, r1
     d6a:	a2 c0       	rjmp	.+324    	; 0xeb0 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
     d6c:	0f 2e       	mov	r0, r31
     d6e:	fb e2       	ldi	r31, 0x2B	; 43
     d70:	cf 2e       	mov	r12, r31
     d72:	fc ef       	ldi	r31, 0xFC	; 252
     d74:	df 2e       	mov	r13, r31
     d76:	ff ef       	ldi	r31, 0xFF	; 255
     d78:	ef 2e       	mov	r14, r31
     d7a:	ff ef       	ldi	r31, 0xFF	; 255
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
     d80:	c0 0e       	add	r12, r16
     d82:	d1 1e       	adc	r13, r17
     d84:	e2 1e       	adc	r14, r18
     d86:	f3 1e       	adc	r15, r19
     d88:	9d e7       	ldi	r25, 0x7D	; 125
     d8a:	c9 16       	cp	r12, r25
     d8c:	9b e0       	ldi	r25, 0x0B	; 11
     d8e:	d9 06       	cpc	r13, r25
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	e9 06       	cpc	r14, r25
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	f9 06       	cpc	r15, r25
     d98:	20 f4       	brcc	.+8      	; 0xda2 <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	90 93 06 01 	sts	0x0106, r25
     da0:	a5 c0       	rjmp	.+330    	; 0xeec <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
     da2:	0f 2e       	mov	r0, r31
     da4:	f5 e1       	ldi	r31, 0x15	; 21
     da6:	cf 2e       	mov	r12, r31
     da8:	fe ef       	ldi	r31, 0xFE	; 254
     daa:	df 2e       	mov	r13, r31
     dac:	ff ef       	ldi	r31, 0xFF	; 255
     dae:	ef 2e       	mov	r14, r31
     db0:	ff ef       	ldi	r31, 0xFF	; 255
     db2:	ff 2e       	mov	r15, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	c0 0e       	add	r12, r16
     db8:	d1 1e       	adc	r13, r17
     dba:	e2 1e       	adc	r14, r18
     dbc:	f3 1e       	adc	r15, r19
     dbe:	9a ee       	ldi	r25, 0xEA	; 234
     dc0:	c9 16       	cp	r12, r25
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	d9 06       	cpc	r13, r25
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	e9 06       	cpc	r14, r25
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	f9 06       	cpc	r15, r25
     dce:	20 f4       	brcc	.+8      	; 0xdd8 <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	90 93 06 01 	sts	0x0106, r25
     dd6:	a1 c0       	rjmp	.+322    	; 0xf1a <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
     dd8:	0f 2e       	mov	r0, r31
     dda:	fa e0       	ldi	r31, 0x0A	; 10
     ddc:	cf 2e       	mov	r12, r31
     dde:	ff ef       	ldi	r31, 0xFF	; 255
     de0:	df 2e       	mov	r13, r31
     de2:	ff ef       	ldi	r31, 0xFF	; 255
     de4:	ef 2e       	mov	r14, r31
     de6:	ff ef       	ldi	r31, 0xFF	; 255
     de8:	ff 2e       	mov	r15, r31
     dea:	f0 2d       	mov	r31, r0
     dec:	c0 0e       	add	r12, r16
     dee:	d1 1e       	adc	r13, r17
     df0:	e2 1e       	adc	r14, r18
     df2:	f3 1e       	adc	r15, r19
     df4:	95 ef       	ldi	r25, 0xF5	; 245
     df6:	c9 16       	cp	r12, r25
     df8:	d1 04       	cpc	r13, r1
     dfa:	e1 04       	cpc	r14, r1
     dfc:	f1 04       	cpc	r15, r1
     dfe:	20 f4       	brcc	.+8      	; 0xe08 <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	90 93 06 01 	sts	0x0106, r25
     e06:	90 c0       	rjmp	.+288    	; 0xf28 <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
     e08:	0f 2e       	mov	r0, r31
     e0a:	f5 e8       	ldi	r31, 0x85	; 133
     e0c:	cf 2e       	mov	r12, r31
     e0e:	ff ef       	ldi	r31, 0xFF	; 255
     e10:	df 2e       	mov	r13, r31
     e12:	ff ef       	ldi	r31, 0xFF	; 255
     e14:	ef 2e       	mov	r14, r31
     e16:	ff ef       	ldi	r31, 0xFF	; 255
     e18:	ff 2e       	mov	r15, r31
     e1a:	f0 2d       	mov	r31, r0
     e1c:	c0 0e       	add	r12, r16
     e1e:	d1 1e       	adc	r13, r17
     e20:	e2 1e       	adc	r14, r18
     e22:	f3 1e       	adc	r15, r19
     e24:	9b e7       	ldi	r25, 0x7B	; 123
     e26:	c9 16       	cp	r12, r25
     e28:	d1 04       	cpc	r13, r1
     e2a:	e1 04       	cpc	r14, r1
     e2c:	f1 04       	cpc	r15, r1
     e2e:	20 f4       	brcc	.+8      	; 0xe38 <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
     e30:	94 e0       	ldi	r25, 0x04	; 4
     e32:	90 93 06 01 	sts	0x0106, r25
     e36:	a5 c0       	rjmp	.+330    	; 0xf82 <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
     e38:	0f 2e       	mov	r0, r31
     e3a:	f0 ee       	ldi	r31, 0xE0	; 224
     e3c:	cf 2e       	mov	r12, r31
     e3e:	ff ef       	ldi	r31, 0xFF	; 255
     e40:	df 2e       	mov	r13, r31
     e42:	ff ef       	ldi	r31, 0xFF	; 255
     e44:	ef 2e       	mov	r14, r31
     e46:	ff ef       	ldi	r31, 0xFF	; 255
     e48:	ff 2e       	mov	r15, r31
     e4a:	f0 2d       	mov	r31, r0
     e4c:	c0 0e       	add	r12, r16
     e4e:	d1 1e       	adc	r13, r17
     e50:	e2 1e       	adc	r14, r18
     e52:	f3 1e       	adc	r15, r19
     e54:	9b e5       	ldi	r25, 0x5B	; 91
     e56:	c9 16       	cp	r12, r25
     e58:	d1 04       	cpc	r13, r1
     e5a:	e1 04       	cpc	r14, r1
     e5c:	f1 04       	cpc	r15, r1
     e5e:	20 f4       	brcc	.+8      	; 0xe68 <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
     e60:	95 e0       	ldi	r25, 0x05	; 5
     e62:	90 93 06 01 	sts	0x0106, r25
     e66:	77 c0       	rjmp	.+238    	; 0xf56 <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
     e68:	01 50       	subi	r16, 0x01	; 1
     e6a:	10 40       	sbci	r17, 0x00	; 0
     e6c:	20 40       	sbci	r18, 0x00	; 0
     e6e:	30 40       	sbci	r19, 0x00	; 0
     e70:	0f 31       	cpi	r16, 0x1F	; 31
     e72:	11 05       	cpc	r17, r1
     e74:	21 05       	cpc	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	20 f4       	brcc	.+8      	; 0xe82 <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
     e7a:	96 e0       	ldi	r25, 0x06	; 6
     e7c:	90 93 06 01 	sts	0x0106, r25
     e80:	86 c0       	rjmp	.+268    	; 0xf8e <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     e82:	90 91 06 01 	lds	r25, 0x0106
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	09 f4       	brne	.+2      	; 0xe8c <Pwm_Start+0x164>
     e8a:	4e c0       	rjmp	.+156    	; 0xf28 <Pwm_Start+0x200>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	30 f4       	brcc	.+12     	; 0xe9c <Pwm_Start+0x174>
     e90:	91 30       	cpi	r25, 0x01	; 1
     e92:	61 f1       	breq	.+88     	; 0xeec <Pwm_Start+0x1c4>
     e94:	92 30       	cpi	r25, 0x02	; 2
     e96:	08 f0       	brcs	.+2      	; 0xe9a <Pwm_Start+0x172>
     e98:	40 c0       	rjmp	.+128    	; 0xf1a <Pwm_Start+0x1f2>
     e9a:	0a c0       	rjmp	.+20     	; 0xeb0 <Pwm_Start+0x188>
     e9c:	95 30       	cpi	r25, 0x05	; 5
     e9e:	09 f4       	brne	.+2      	; 0xea2 <Pwm_Start+0x17a>
     ea0:	5a c0       	rjmp	.+180    	; 0xf56 <Pwm_Start+0x22e>
     ea2:	95 30       	cpi	r25, 0x05	; 5
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <Pwm_Start+0x180>
     ea6:	6d c0       	rjmp	.+218    	; 0xf82 <Pwm_Start+0x25a>
     ea8:	96 30       	cpi	r25, 0x06	; 6
     eaa:	09 f0       	breq	.+2      	; 0xeae <Pwm_Start+0x186>
     eac:	8d c0       	rjmp	.+282    	; 0xfc8 <Pwm_Start+0x2a0>
     eae:	6f c0       	rjmp	.+222    	; 0xf8e <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	61 f0       	breq	.+24     	; 0xecc <Pwm_Start+0x1a4>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	30 f0       	brcs	.+12     	; 0xec4 <Pwm_Start+0x19c>
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	71 f0       	breq	.+28     	; 0xed8 <Pwm_Start+0x1b0>
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	09 f0       	breq	.+2      	; 0xec2 <Pwm_Start+0x19a>
     ec0:	83 c0       	rjmp	.+262    	; 0xfc8 <Pwm_Start+0x2a0>
     ec2:	10 c0       	rjmp	.+32     	; 0xee4 <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
     ec4:	83 b7       	in	r24, 0x33	; 51
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     eca:	88 c0       	rjmp	.+272    	; 0xfdc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
     ecc:	8e b5       	in	r24, 0x2e	; 46
     ece:	9f b5       	in	r25, 0x2f	; 47
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	9f bd       	out	0x2f, r25	; 47
     ed4:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
     ed6:	98 c0       	rjmp	.+304    	; 0x1008 <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
     ed8:	8e b5       	in	r24, 0x2e	; 46
     eda:	9f b5       	in	r25, 0x2f	; 47
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	9f bd       	out	0x2f, r25	; 47
     ee0:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     ee2:	ad c0       	rjmp	.+346    	; 0x103e <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
     ee4:	85 b5       	in	r24, 0x25	; 37
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     eea:	c4 c0       	rjmp	.+392    	; 0x1074 <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	18 f4       	brcc	.+6      	; 0xef6 <Pwm_Start+0x1ce>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	48 f4       	brcc	.+18     	; 0xf06 <Pwm_Start+0x1de>
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <Pwm_Start+0x1d6>
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	09 f0       	breq	.+2      	; 0xefc <Pwm_Start+0x1d4>
     efa:	66 c0       	rjmp	.+204    	; 0xfc8 <Pwm_Start+0x2a0>
     efc:	0a c0       	rjmp	.+20     	; 0xf12 <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	82 60       	ori	r24, 0x02	; 2
     f02:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f04:	6b c0       	rjmp	.+214    	; 0xfdc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
     f06:	2e b5       	in	r18, 0x2e	; 46
     f08:	3f b5       	in	r19, 0x2f	; 47
     f0a:	22 60       	ori	r18, 0x02	; 2
     f0c:	3f bd       	out	0x2f, r19	; 47
     f0e:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     f10:	5b c0       	rjmp	.+182    	; 0xfc8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
     f12:	85 b5       	in	r24, 0x25	; 37
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
     f18:	ad c0       	rjmp	.+346    	; 0x1074 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	09 f0       	breq	.+2      	; 0xf20 <Pwm_Start+0x1f8>
     f1e:	54 c0       	rjmp	.+168    	; 0xfc8 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     f20:	85 b5       	in	r24, 0x25	; 37
     f22:	83 60       	ori	r24, 0x03	; 3
     f24:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f26:	a6 c0       	rjmp	.+332    	; 0x1074 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	18 f4       	brcc	.+6      	; 0xf32 <Pwm_Start+0x20a>
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	48 f4       	brcc	.+18     	; 0xf42 <Pwm_Start+0x21a>
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <Pwm_Start+0x212>
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	09 f0       	breq	.+2      	; 0xf38 <Pwm_Start+0x210>
     f36:	48 c0       	rjmp	.+144    	; 0xfc8 <Pwm_Start+0x2a0>
     f38:	0a c0       	rjmp	.+20     	; 0xf4e <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
     f3a:	83 b7       	in	r24, 0x33	; 51
     f3c:	83 60       	ori	r24, 0x03	; 3
     f3e:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f40:	4d c0       	rjmp	.+154    	; 0xfdc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
     f42:	2e b5       	in	r18, 0x2e	; 46
     f44:	3f b5       	in	r19, 0x2f	; 47
     f46:	23 60       	ori	r18, 0x03	; 3
     f48:	3f bd       	out	0x2f, r19	; 47
     f4a:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     f4c:	3d c0       	rjmp	.+122    	; 0xfc8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
     f4e:	85 b5       	in	r24, 0x25	; 37
     f50:	84 60       	ori	r24, 0x04	; 4
     f52:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f54:	8f c0       	rjmp	.+286    	; 0x1074 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	18 f4       	brcc	.+6      	; 0xf60 <Pwm_Start+0x238>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <Pwm_Start+0x246>
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <Pwm_Start+0x23e>
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 f5       	brne	.+100    	; 0xfc8 <Pwm_Start+0x2a0>
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
     f66:	83 b7       	in	r24, 0x33	; 51
     f68:	83 60       	ori	r24, 0x03	; 3
     f6a:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     f6c:	37 c0       	rjmp	.+110    	; 0xfdc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
     f6e:	2e b5       	in	r18, 0x2e	; 46
     f70:	3f b5       	in	r19, 0x2f	; 47
     f72:	23 60       	ori	r18, 0x03	; 3
     f74:	3f bd       	out	0x2f, r19	; 47
     f76:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
     f78:	27 c0       	rjmp	.+78     	; 0xfc8 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
     f7a:	85 b5       	in	r24, 0x25	; 37
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f80:	79 c0       	rjmp	.+242    	; 0x1074 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	09 f5       	brne	.+66     	; 0xfc8 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
     f86:	85 b5       	in	r24, 0x25	; 37
     f88:	85 60       	ori	r24, 0x05	; 5
     f8a:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     f8c:	73 c0       	rjmp	.+230    	; 0x1074 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	59 f0       	breq	.+22     	; 0xfa8 <Pwm_Start+0x280>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	28 f0       	brcs	.+10     	; 0xfa0 <Pwm_Start+0x278>
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	69 f0       	breq	.+26     	; 0xfb4 <Pwm_Start+0x28c>
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	a9 f4       	brne	.+42     	; 0xfc8 <Pwm_Start+0x2a0>
     f9e:	10 c0       	rjmp	.+32     	; 0xfc0 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
     fa0:	83 b7       	in	r24, 0x33	; 51
     fa2:	85 60       	ori	r24, 0x05	; 5
     fa4:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
     fa6:	1a c0       	rjmp	.+52     	; 0xfdc <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
     fa8:	8e b5       	in	r24, 0x2e	; 46
     faa:	9f b5       	in	r25, 0x2f	; 47
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	9f bd       	out	0x2f, r25	; 47
     fb0:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     fb2:	2a c0       	rjmp	.+84     	; 0x1008 <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
     fb4:	8e b5       	in	r24, 0x2e	; 46
     fb6:	9f b5       	in	r25, 0x2f	; 47
     fb8:	85 60       	ori	r24, 0x05	; 5
     fba:	9f bd       	out	0x2f, r25	; 47
     fbc:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
     fc0:	85 b5       	in	r24, 0x25	; 37
     fc2:	87 60       	ori	r24, 0x07	; 7
     fc4:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
     fc6:	56 c0       	rjmp	.+172    	; 0x1074 <Pwm_Start+0x34c>

	
	
}

switch(Channel)
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	f1 f0       	breq	.+60     	; 0x1008 <Pwm_Start+0x2e0>
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	30 f0       	brcs	.+12     	; 0xfdc <Pwm_Start+0x2b4>
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	a9 f1       	breq	.+106    	; 0x103e <Pwm_Start+0x316>
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	09 f0       	breq	.+2      	; 0xfda <Pwm_Start+0x2b2>
     fd8:	63 c0       	rjmp	.+198    	; 0x10a0 <Pwm_Start+0x378>
     fda:	4c c0       	rjmp	.+152    	; 0x1074 <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__floatunsisf>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	52 e4       	ldi	r21, 0x42	; 66
     fee:	0e 94 af 0c 	call	0x195e	; 0x195e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     ffe:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixunssfsi>
			OCR0=pwm_time_on;
    1002:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
    1004:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1006:	4d c0       	rjmp	.+154    	; 0x10a2 <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__floatunsisf>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	48 ec       	ldi	r20, 0xC8	; 200
    1018:	52 e4       	ldi	r21, 0x42	; 66
    101a:	0e 94 af 0c 	call	0x195e	; 0x195e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	53 e4       	ldi	r21, 0x43	; 67
    1026:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
    102a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1032:	9b bd       	out	0x2b, r25	; 43
    1034:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    1036:	99 bd       	out	0x29, r25	; 41
    1038:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    103a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    103c:	32 c0       	rjmp	.+100    	; 0x10a2 <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__floatunsisf>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	48 ec       	ldi	r20, 0xC8	; 200
    104e:	52 e4       	ldi	r21, 0x42	; 66
    1050:	0e 94 af 0c 	call	0x195e	; 0x195e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	53 e4       	ldi	r21, 0x43	; 67
    105c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
    1060:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1068:	9b bd       	out	0x2b, r25	; 43
    106a:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    106c:	99 bd       	out	0x29, r25	; 41
    106e:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1070:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1072:	17 c0       	rjmp	.+46     	; 0x10a2 <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__floatunsisf>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	48 ec       	ldi	r20, 0xC8	; 200
    1084:	52 e4       	ldi	r21, 0x42	; 66
    1086:	0e 94 af 0c 	call	0x195e	; 0x195e <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	53 e4       	ldi	r21, 0x43	; 67
    1092:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
    1096:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixunssfsi>
			OCR2=pwm_time_on;
    109a:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    109c:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	90 93 07 01 	sts	0x0107, r25
return Ret;
}
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	08 95       	ret

000010b6 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    10b6:	90 91 07 01 	lds	r25, 0x0107
    10ba:	91 30       	cpi	r25, 0x01	; 1
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    10be:	0e 94 94 06 	call	0xd28	; 0xd28 <Pwm_Start>
Ret=E_OK;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
}else{Ret=E_NOK;}
    10c6:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    10c8:	08 95       	ret

000010ca <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	18 f4       	brcc	.+6      	; 0x10d4 <Pwm_Stop+0xa>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	48 f4       	brcc	.+18     	; 0x10e4 <Pwm_Stop+0x1a>
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <Pwm_Stop+0x10>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	81 f4       	brne	.+32     	; 0x10f8 <Pwm_Stop+0x2e>
    10d8:	0a c0       	rjmp	.+20     	; 0x10ee <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    10da:	83 b7       	in	r24, 0x33	; 51
    10dc:	88 7f       	andi	r24, 0xF8	; 248
    10de:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10e2:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    10e4:	83 b7       	in	r24, 0x33	; 51
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    10ea:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10ec:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    10ee:	85 b5       	in	r24, 0x25	; 37
    10f0:	88 7f       	andi	r24, 0xF8	; 248
    10f2:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    10f4:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10f6:	08 95       	ret
	default:
	Ret=E_NOK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    10fa:	08 95       	ret

000010fc <SOS_Init>:
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
    1106:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
    1108:	80 91 0a 01 	lds	r24, 0x010A
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	80 93 0a 01 	sts	0x010A, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1112:	20 97       	sbiw	r28, 0x00	; 0
    1114:	11 f0       	breq	.+4      	; 0x111a <SOS_Init+0x1e>
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	01 c0       	rjmp	.+2      	; 0x111c <SOS_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    111a:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
    111c:	00 23       	and	r16, r16
    111e:	19 f0       	breq	.+6      	; 0x1126 <SOS_Init+0x2a>
    1120:	02 30       	cpi	r16, 0x02	; 2
    1122:	79 f4       	brne	.+30     	; 0x1142 <SOS_Init+0x46>
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <SOS_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
    1126:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
    112a:	89 e8       	ldi	r24, 0x89	; 137
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 30 0b 	call	0x1660	; 0x1660 <Timer_Init>
				break;
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <SOS_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
    1134:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
    1138:	8f e8       	ldi	r24, 0x8F	; 143
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 30 0b 	call	0x1660	; 0x1660 <Timer_Init>
			break;
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <SOS_Init+0x48>
	default:
			ret+=E_NOK;
    1142:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
    1144:	88 81       	ld	r24, Y
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	99 f4       	brne	.+38     	; 0x1170 <SOS_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
    114a:	00 23       	and	r16, r16
    114c:	19 f0       	breq	.+6      	; 0x1154 <SOS_Init+0x58>
    114e:	02 30       	cpi	r16, 0x02	; 2
    1150:	69 f4       	brne	.+26     	; 0x116c <SOS_Init+0x70>
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <SOS_Init+0x64>
		{
			case TIMER_CH0 :
		Timer_Start(TIMER_CH0,250);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	6a ef       	ldi	r22, 0xFA	; 250
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 96 09 	call	0x132c	; 0x132c <Timer_Start>
					//TCNT0=5;
					break;
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <SOS_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,14);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	6e e0       	ldi	r22, 0x0E	; 14
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	0e 94 96 09 	call	0x132c	; 0x132c <Timer_Start>
					break;
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <SOS_Init+0x76>
			default:
				ret+=E_NOK;
    116c:	1f 5f       	subi	r17, 0xFF	; 255
					break;
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <SOS_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
    1170:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
    1172:	81 2f       	mov	r24, r17
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
    117e:	80 91 0a 01 	lds	r24, 0x010A
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	41 f4       	brne	.+16     	; 0x1196 <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
    1186:	83 e8       	ldi	r24, 0x83	; 131
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 30 0b 	call	0x1660	; 0x1660 <Timer_Init>

	u8_Is_Intialized=0;
    118e:	10 92 0a 01 	sts	0x010A, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	10 f0       	brcs	.+4      	; 0x119e <TMU_DeInit+0x20>
    119a:	86 e0       	ldi	r24, 0x06	; 6
    119c:	08 95       	ret
	else{
	ret=E_NOK;
    119e:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
    11a0:	08 95       	ret

000011a2 <SOS_Create_Task>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
  	*/
	if(u8_Is_Intialized == 1)
    11a2:	50 91 0a 01 	lds	r21, 0x010A
    11a6:	51 30       	cpi	r21, 0x01	; 1
    11a8:	99 f4       	brne	.+38     	; 0x11d0 <SOS_Create_Task+0x2e>
	{
		
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
    11aa:	e4 2f       	mov	r30, r20
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e3 5c       	subi	r30, 0xC3	; 195
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
    11c2:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
    11c4:	34 83       	std	Z+4, r19	; 0x04
    11c6:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	82 83       	std	Z+2, r24	; 0x02
	
return ret;	
}

ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
    11d0:	52 30       	cpi	r21, 0x02	; 2
    11d2:	10 f0       	brcs	.+4      	; 0x11d8 <SOS_Create_Task+0x36>
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	08 95       	ret
		ret+=NOT_INIT;
    11d8:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
    11da:	08 95       	ret

000011dc <SOS_Run>:

ERROR_STATUS SOS_Run(void)
{	uint8_t ret=E_OK;
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	*//***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
    11e0:	80 91 08 01 	lds	r24, 0x0108
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	09 f0       	breq	.+2      	; 0x11ea <SOS_Run+0xe>
    11e8:	65 c0       	rjmp	.+202    	; 0x12b4 <SOS_Run+0xd8>
{	u8Excution_to_be_done=0;
    11ea:	10 92 08 01 	sts	0x0108, r1

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    11ee:	10 92 09 01 	sts	0x0109, r1
    11f2:	20 e0       	ldi	r18, 0x00	; 0
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
*/
/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if((Buffer_Array[u8_FUN_index]).u8_flag_is_stopped==0){ret=E_OK;}
    11f4:	cd e3       	ldi	r28, 0x3D	; 61
    11f6:	d1 e0       	ldi	r29, 0x01	; 1
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	f9 01       	movw	r30, r18
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ec 0f       	add	r30, r28
    120a:	fd 1f       	adc	r31, r29
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <SOS_Run+0x38>
    1212:	48 c0       	rjmp	.+144    	; 0x12a4 <SOS_Run+0xc8>
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
    1214:	f9 01       	movw	r30, r18
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ec 0f       	add	r30, r28
    1224:	fd 1f       	adc	r31, r29
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	97 81       	ldd	r25, Z+7	; 0x07
    122a:	ac 01       	movw	r20, r24
    122c:	4f 5f       	subi	r20, 0xFF	; 255
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	57 83       	std	Z+7, r21	; 0x07
    1232:	46 83       	std	Z+6, r20	; 0x06
	/*make the flag down*/
							
			
/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	94 81       	ldd	r25, Z+4	; 0x04
    1238:	48 17       	cp	r20, r24
    123a:	59 07       	cpc	r21, r25
    123c:	d1 f4       	brne	.+52     	; 0x1272 <SOS_Run+0x96>
	{
		((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
    123e:	f9 01       	movw	r30, r18
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ec 0f       	add	r30, r28
    124e:	fd 1f       	adc	r31, r29
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
    1258:	e0 91 09 01 	lds	r30, 0x0109
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	ec 0f       	add	r30, r28
    126c:	fd 1f       	adc	r31, r29
    126e:	17 82       	std	Z+7, r1	; 0x07
    1270:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if((Buffer_Array[u8_FUN_index]).preodic==0)
    1272:	80 91 09 01 	lds	r24, 0x0109
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	ec 0f       	add	r30, r28
    1288:	fd 1f       	adc	r31, r29
    128a:	25 81       	ldd	r18, Z+5	; 0x05
    128c:	22 23       	and	r18, r18
    128e:	51 f4       	brne	.+20     	; 0x12a4 <SOS_Run+0xc8>
	{
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;	
    1290:	fc 01       	movw	r30, r24
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ec 0f       	add	r30, r28
    12a0:	fd 1f       	adc	r31, r29
    12a2:	12 82       	std	Z+2, r1	; 0x02
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
{	u8Excution_to_be_done=0;

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    12a4:	20 91 09 01 	lds	r18, 0x0109
    12a8:	2f 5f       	subi	r18, 0xFF	; 255
    12aa:	20 93 09 01 	sts	0x0109, r18
    12ae:	24 30       	cpi	r18, 0x04	; 4
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <SOS_Run+0xd8>
    12b2:	a2 cf       	rjmp	.-188    	; 0x11f8 <SOS_Run+0x1c>

		}		
	}
}	
return ret;
}
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
    12bc:	e8 2f       	mov	r30, r24
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	e3 5c       	subi	r30, 0xC3	; 195
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	12 82       	std	Z+2, r1	; 0x02
}
    12d2:	08 95       	ret

000012d4 <Task1>:
		u8_Counter1=0;
	}
	
*/
static u8_c=0;
u8_c +=pushButtonGetStatus(BTN_0);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0e 94 d3 05 	call	0xba6	; 0xba6 <pushButtonGetStatus>
    12da:	20 91 0c 01 	lds	r18, 0x010C
    12de:	30 91 0d 01 	lds	r19, 0x010D
    12e2:	28 0f       	add	r18, r24
    12e4:	31 1d       	adc	r19, r1
    12e6:	30 93 0d 01 	sts	0x010D, r19
    12ea:	20 93 0c 01 	sts	0x010C, r18
	
}/*
    12ee:	08 95       	ret

000012f0 <timer_interrupt>:
}

*/
void timer_interrupt(void)
{
	u8Excution_to_be_done =1;	
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 08 01 	sts	0x0108, r24
    12f6:	08 95       	ret

000012f8 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
switch (Timer_CH_NO) {
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	51 f0       	breq	.+20     	; 0x1310 <Timer_Stop+0x18>
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <Timer_Stop+0xe>
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 f4       	brne	.+36     	; 0x1328 <Timer_Stop+0x30>
    1304:	0c c0       	rjmp	.+24     	; 0x131e <Timer_Stop+0x26>
case TIMER_CH0:
{
	TCCR0 &=0xF8;
    1306:	83 b7       	in	r24, 0x33	; 51
    1308:	88 7f       	andi	r24, 0xF8	; 248
    130a:	83 bf       	out	0x33, r24	; 51
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    130c:	80 e0       	ldi	r24, 0x00	; 0
switch (Timer_CH_NO) {
case TIMER_CH0:
{
	TCCR0 &=0xF8;
	break;
    130e:	08 95       	ret
}
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
    1310:	8e b5       	in	r24, 0x2e	; 46
    1312:	9f b5       	in	r25, 0x2f	; 47
    1314:	88 7f       	andi	r24, 0xF8	; 248
    1316:	9f bd       	out	0x2f, r25	; 47
    1318:	8e bd       	out	0x2e, r24	; 46
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    131a:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
	
	
	break;
    131c:	08 95       	ret
}
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
    131e:	85 b5       	in	r24, 0x25	; 37
    1320:	88 7f       	andi	r24, 0xF8	; 248
    1322:	85 bd       	out	0x25, r24	; 37
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    1324:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
	
	
	break;
    1326:	08 95       	ret
}
default :
	Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1328:	86 e3       	ldi	r24, 0x36	; 54
	break;
}

return Ret;

}
    132a:	08 95       	ret

0000132c <Timer_Start>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	eb 01       	movw	r28, r22
	uint8_t Ret;
	switch (Timer_CH_NO) {
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f4       	brne	.+2      	; 0x1338 <Timer_Start+0xc>
    1336:	7c c0       	rjmp	.+248    	; 0x1430 <Timer_Start+0x104>
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	20 f0       	brcs	.+8      	; 0x1344 <Timer_Start+0x18>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	09 f0       	breq	.+2      	; 0x1342 <Timer_Start+0x16>
    1340:	69 c1       	rjmp	.+722    	; 0x1614 <Timer_Start+0x2e8>
    1342:	ec c0       	rjmp	.+472    	; 0x151c <Timer_Start+0x1f0>
	case TIMER_CH0:{
		if(u8_timer0_is_init == 1)
    1344:	80 91 10 01 	lds	r24, 0x0110
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f0       	breq	.+2      	; 0x134e <Timer_Start+0x22>
    134c:	6c c0       	rjmp	.+216    	; 0x1426 <Timer_Start+0xfa>
		/***********************************************************************************************************************/
			{
		switch(prescaler_value){
    134e:	80 91 0f 01 	lds	r24, 0x010F
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	91 f1       	breq	.+100    	; 0x13ba <Timer_Start+0x8e>
    1356:	85 30       	cpi	r24, 0x05	; 5
    1358:	30 f4       	brcc	.+12     	; 0x1366 <Timer_Start+0x3a>
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	51 f0       	breq	.+20     	; 0x1372 <Timer_Start+0x46>
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	09 f0       	breq	.+2      	; 0x1364 <Timer_Start+0x38>
    1362:	5a c1       	rjmp	.+692    	; 0x1618 <Timer_Start+0x2ec>
    1364:	18 c0       	rjmp	.+48     	; 0x1396 <Timer_Start+0x6a>
    1366:	86 30       	cpi	r24, 0x06	; 6
    1368:	d1 f1       	breq	.+116    	; 0x13de <Timer_Start+0xb2>
    136a:	87 30       	cpi	r24, 0x07	; 7
    136c:	09 f0       	breq	.+2      	; 0x1370 <Timer_Start+0x44>
    136e:	54 c1       	rjmp	.+680    	; 0x1618 <Timer_Start+0x2ec>
    1370:	48 c0       	rjmp	.+144    	; 0x1402 <Timer_Start+0xd6>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX0){
    1372:	6f 3f       	cpi	r22, 0xFF	; 255
    1374:	71 05       	cpc	r23, r1
    1376:	08 f0       	brcs	.+2      	; 0x137a <Timer_Start+0x4e>
    1378:	51 c1       	rjmp	.+674    	; 0x161c <Timer_Start+0x2f0>
				if(u8_sgv_TimerMode==1)
    137a:	80 91 0e 01 	lds	r24, 0x010E
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	31 f4       	brne	.+12     	; 0x138e <Timer_Start+0x62>
				{
				Timer_Stop(TIMER_CH0);	
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR0 |=TIMER_PRESCALER_NO;
    1388:	83 b7       	in	r24, 0x33	; 51
    138a:	81 60       	ori	r24, 0x01	; 1
    138c:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =	MAX0 - Timer_Count;
    138e:	c0 95       	com	r28
    1390:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	62 c1       	rjmp	.+708    	; 0x165a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX0){
    1396:	6f 3f       	cpi	r22, 0xFF	; 255
    1398:	71 05       	cpc	r23, r1
    139a:	08 f0       	brcs	.+2      	; 0x139e <Timer_Start+0x72>
    139c:	41 c1       	rjmp	.+642    	; 0x1620 <Timer_Start+0x2f4>
				if(u8_sgv_TimerMode==1)
    139e:	80 91 0e 01 	lds	r24, 0x010E
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	31 f4       	brne	.+12     	; 0x13b2 <Timer_Start+0x86>
				{
				Timer_Stop(TIMER_CH0);	
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
    13ac:	83 b7       	in	r24, 0x33	; 51
    13ae:	82 60       	ori	r24, 0x02	; 2
    13b0:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    13b2:	c0 95       	com	r28
    13b4:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	50 c1       	rjmp	.+672    	; 0x165a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX0){
    13ba:	6f 3f       	cpi	r22, 0xFF	; 255
    13bc:	71 05       	cpc	r23, r1
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <Timer_Start+0x96>
    13c0:	31 c1       	rjmp	.+610    	; 0x1624 <Timer_Start+0x2f8>
				if(u8_sgv_TimerMode==1)
    13c2:	80 91 0e 01 	lds	r24, 0x010E
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	31 f4       	brne	.+12     	; 0x13d6 <Timer_Start+0xaa>
				{
				Timer_Stop(TIMER_CH0);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
    13d0:	83 b7       	in	r24, 0x33	; 51
    13d2:	83 60       	ori	r24, 0x03	; 3
    13d4:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 = MAX0 - Timer_Count;
    13d6:	c0 95       	com	r28
    13d8:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	3e c1       	rjmp	.+636    	; 0x165a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX0){
    13de:	6f 3f       	cpi	r22, 0xFF	; 255
    13e0:	71 05       	cpc	r23, r1
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <Timer_Start+0xba>
    13e4:	21 c1       	rjmp	.+578    	; 0x1628 <Timer_Start+0x2fc>
				if(u8_sgv_TimerMode==1)
    13e6:	80 91 0e 01 	lds	r24, 0x010E
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	31 f4       	brne	.+12     	; 0x13fa <Timer_Start+0xce>
				{
				Timer_Stop(TIMER_CH0);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
    13f4:	83 b7       	in	r24, 0x33	; 51
    13f6:	84 60       	ori	r24, 0x04	; 4
    13f8:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    13fa:	c0 95       	com	r28
    13fc:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	2c c1       	rjmp	.+600    	; 0x165a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX0){
    1402:	6f 3f       	cpi	r22, 0xFF	; 255
    1404:	71 05       	cpc	r23, r1
    1406:	08 f0       	brcs	.+2      	; 0x140a <Timer_Start+0xde>
    1408:	11 c1       	rjmp	.+546    	; 0x162c <Timer_Start+0x300>
				if(u8_sgv_TimerMode==1)
    140a:	80 91 0e 01 	lds	r24, 0x010E
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	31 f4       	brne	.+12     	; 0x141e <Timer_Start+0xf2>
				{	
				Timer_Stop(TIMER_CH0);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
    1418:	83 b7       	in	r24, 0x33	; 51
    141a:	85 60       	ori	r24, 0x05	; 5
    141c:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    141e:	c0 95       	com	r28
    1420:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	1a c1       	rjmp	.+564    	; 0x165a <Timer_Start+0x32e>
		break;
		}
		else if(u8_timer0_is_init > 1){
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	08 f4       	brcc	.+2      	; 0x142c <Timer_Start+0x100>
    142a:	02 c1       	rjmp	.+516    	; 0x1630 <Timer_Start+0x304>
			Ret=MULTIPLE_INIT+TIMER_MODULE;
    142c:	84 e2       	ldi	r24, 0x24	; 36
    142e:	15 c1       	rjmp	.+554    	; 0x165a <Timer_Start+0x32e>
			Ret=NOT_INIT+TIMER_MODULE;
			break;
			}
	}
	case TIMER_CH1:{
			if(u8_timer1_is_init == 1){
    1430:	80 91 11 01 	lds	r24, 0x0111
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	09 f0       	breq	.+2      	; 0x143a <Timer_Start+0x10e>
    1438:	6c c0       	rjmp	.+216    	; 0x1512 <Timer_Start+0x1e6>
		switch(prescaler_value){
    143a:	80 91 0f 01 	lds	r24, 0x010F
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 f1       	breq	.+100    	; 0x14a6 <Timer_Start+0x17a>
    1442:	85 30       	cpi	r24, 0x05	; 5
    1444:	30 f4       	brcc	.+12     	; 0x1452 <Timer_Start+0x126>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	51 f0       	breq	.+20     	; 0x145e <Timer_Start+0x132>
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	09 f0       	breq	.+2      	; 0x1450 <Timer_Start+0x124>
    144e:	f2 c0       	rjmp	.+484    	; 0x1634 <Timer_Start+0x308>
    1450:	18 c0       	rjmp	.+48     	; 0x1482 <Timer_Start+0x156>
    1452:	86 30       	cpi	r24, 0x06	; 6
    1454:	d1 f1       	breq	.+116    	; 0x14ca <Timer_Start+0x19e>
    1456:	87 30       	cpi	r24, 0x07	; 7
    1458:	09 f0       	breq	.+2      	; 0x145c <Timer_Start+0x130>
    145a:	ec c0       	rjmp	.+472    	; 0x1634 <Timer_Start+0x308>
    145c:	48 c0       	rjmp	.+144    	; 0x14ee <Timer_Start+0x1c2>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    145e:	80 91 0e 01 	lds	r24, 0x010E
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	39 f4       	brne	.+14     	; 0x1474 <Timer_Start+0x148>
				{
				Timer_Stop(TIMER_CH1);
    1466:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR1 |=TIMER_PRESCALER_NO;
    146a:	8e b5       	in	r24, 0x2e	; 46
    146c:	9f b5       	in	r25, 0x2f	; 47
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	9f bd       	out	0x2f, r25	; 47
    1472:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    1474:	d0 95       	com	r29
    1476:	c1 95       	neg	r28
    1478:	df 4f       	sbci	r29, 0xFF	; 255
    147a:	dd bd       	out	0x2d, r29	; 45
    147c:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    147e:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret=E_NOK;
			}
			break;
    1480:	ec c0       	rjmp	.+472    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1482:	80 91 0e 01 	lds	r24, 0x010E
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	39 f4       	brne	.+14     	; 0x1498 <Timer_Start+0x16c>
							{
				Timer_Stop(TIMER_CH1);
    148a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
    148e:	8e b5       	in	r24, 0x2e	; 46
    1490:	9f b5       	in	r25, 0x2f	; 47
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	9f bd       	out	0x2f, r25	; 47
    1496:	8e bd       	out	0x2e, r24	; 46
							}
							
			TCNT1 =MAX1 - Timer_Count;
    1498:	d0 95       	com	r29
    149a:	c1 95       	neg	r28
    149c:	df 4f       	sbci	r29, 0xFF	; 255
    149e:	dd bd       	out	0x2d, r29	; 45
    14a0:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    14a4:	da c0       	rjmp	.+436    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    14a6:	80 91 0e 01 	lds	r24, 0x010E
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	39 f4       	brne	.+14     	; 0x14bc <Timer_Start+0x190>
			{
				Timer_Stop(TIMER_CH1);
    14ae:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
    14b2:	8e b5       	in	r24, 0x2e	; 46
    14b4:	9f b5       	in	r25, 0x2f	; 47
    14b6:	83 60       	ori	r24, 0x03	; 3
    14b8:	9f bd       	out	0x2f, r25	; 47
    14ba:	8e bd       	out	0x2e, r24	; 46
			}
			TCNT1 =MAX1 - Timer_Count;
    14bc:	d0 95       	com	r29
    14be:	c1 95       	neg	r28
    14c0:	df 4f       	sbci	r29, 0xFF	; 255
    14c2:	dd bd       	out	0x2d, r29	; 45
    14c4:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    14c8:	c8 c0       	rjmp	.+400    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    14ca:	80 91 0e 01 	lds	r24, 0x010E
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	39 f4       	brne	.+14     	; 0x14e0 <Timer_Start+0x1b4>
						{
				Timer_Stop(TIMER_CH1);
    14d2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
    14d6:	8e b5       	in	r24, 0x2e	; 46
    14d8:	9f b5       	in	r25, 0x2f	; 47
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	9f bd       	out	0x2f, r25	; 47
    14de:	8e bd       	out	0x2e, r24	; 46
						}
				TCNT1 =MAX1 - Timer_Count;
    14e0:	d0 95       	com	r29
    14e2:	c1 95       	neg	r28
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	dd bd       	out	0x2d, r29	; 45
    14e8:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    14ec:	b6 c0       	rjmp	.+364    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    14ee:	80 91 0e 01 	lds	r24, 0x010E
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	39 f4       	brne	.+14     	; 0x1504 <Timer_Start+0x1d8>
				{
			Timer_Stop(TIMER_CH1);
    14f6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
    14fa:	8e b5       	in	r24, 0x2e	; 46
    14fc:	9f b5       	in	r25, 0x2f	; 47
    14fe:	85 60       	ori	r24, 0x05	; 5
    1500:	9f bd       	out	0x2f, r25	; 47
    1502:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    1504:	d0 95       	com	r29
    1506:	c1 95       	neg	r28
    1508:	df 4f       	sbci	r29, 0xFF	; 255
    150a:	dd bd       	out	0x2d, r29	; 45
    150c:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    150e:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    1510:	a4 c0       	rjmp	.+328    	; 0x165a <Timer_Start+0x32e>
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	08 f4       	brcc	.+2      	; 0x1518 <Timer_Start+0x1ec>
    1516:	90 c0       	rjmp	.+288    	; 0x1638 <Timer_Start+0x30c>
    1518:	84 e2       	ldi	r24, 0x24	; 36
    151a:	9f c0       	rjmp	.+318    	; 0x165a <Timer_Start+0x32e>
			break;}
			
	}
	case TIMER_CH2:
	{
		if(u8_timer2_is_init==1){
    151c:	80 91 12 01 	lds	r24, 0x0112
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	09 f0       	breq	.+2      	; 0x1526 <Timer_Start+0x1fa>
    1524:	73 c0       	rjmp	.+230    	; 0x160c <Timer_Start+0x2e0>
		switch(prescaler_value){
    1526:	80 91 0f 01 	lds	r24, 0x010F
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	c9 f1       	breq	.+114    	; 0x15a0 <Timer_Start+0x274>
    152e:	85 30       	cpi	r24, 0x05	; 5
    1530:	40 f4       	brcc	.+16     	; 0x1542 <Timer_Start+0x216>
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	e9 f0       	breq	.+58     	; 0x1570 <Timer_Start+0x244>
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	48 f5       	brcc	.+82     	; 0x158c <Timer_Start+0x260>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	09 f0       	breq	.+2      	; 0x1540 <Timer_Start+0x214>
    153e:	7e c0       	rjmp	.+252    	; 0x163c <Timer_Start+0x310>
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <Timer_Start+0x228>
    1542:	86 30       	cpi	r24, 0x06	; 6
    1544:	09 f4       	brne	.+2      	; 0x1548 <Timer_Start+0x21c>
    1546:	48 c0       	rjmp	.+144    	; 0x15d8 <Timer_Start+0x2ac>
    1548:	86 30       	cpi	r24, 0x06	; 6
    154a:	c0 f1       	brcs	.+112    	; 0x15bc <Timer_Start+0x290>
    154c:	87 30       	cpi	r24, 0x07	; 7
    154e:	09 f0       	breq	.+2      	; 0x1552 <Timer_Start+0x226>
    1550:	75 c0       	rjmp	.+234    	; 0x163c <Timer_Start+0x310>
    1552:	4f c0       	rjmp	.+158    	; 0x15f2 <Timer_Start+0x2c6>

		case TIMER_PRESCALER_NO :
		{

			if(Timer_Count < MAX0){
    1554:	6f 3f       	cpi	r22, 0xFF	; 255
    1556:	71 05       	cpc	r23, r1
    1558:	08 f0       	brcs	.+2      	; 0x155c <Timer_Start+0x230>
    155a:	72 c0       	rjmp	.+228    	; 0x1640 <Timer_Start+0x314>
				Timer_Stop(TIMER_CH2);
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_NO;
    1562:	85 b5       	in	r24, 0x25	; 37
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	85 bd       	out	0x25, r24	; 37
				TCNT2 = MAX2 - Timer_Count;
    1568:	c0 95       	com	r28
    156a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	75 c0       	rjmp	.+234    	; 0x165a <Timer_Start+0x32e>
			break;
		}

		case TIMER_PRESCALER_8 :
		{
			if(Timer_Count < MAX0)
    1570:	6f 3f       	cpi	r22, 0xFF	; 255
    1572:	71 05       	cpc	r23, r1
    1574:	08 f0       	brcs	.+2      	; 0x1578 <Timer_Start+0x24c>
    1576:	66 c0       	rjmp	.+204    	; 0x1644 <Timer_Start+0x318>
			{ 
				Timer_Stop(TIMER_CH2);
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_8;
    157e:	85 b5       	in	r24, 0x25	; 37
    1580:	82 60       	ori	r24, 0x02	; 2
    1582:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1584:	c0 95       	com	r28
    1586:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	67 c0       	rjmp	.+206    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_32:
		{
			if(Timer_Count < MAX1)
			{
				Timer_Stop(TIMER_CH2);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_32;
    1592:	85 b5       	in	r24, 0x25	; 37
    1594:	83 60       	ori	r24, 0x03	; 3
    1596:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1598:	c0 95       	com	r28
    159a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    159c:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				Ret=E_NOK;
			}

			break;
    159e:	5d c0       	rjmp	.+186    	; 0x165a <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :
		{
			if(Timer_Count < MAX2)
    15a0:	6f 3f       	cpi	r22, 0xFF	; 255
    15a2:	71 05       	cpc	r23, r1
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <Timer_Start+0x27c>
    15a6:	50 c0       	rjmp	.+160    	; 0x1648 <Timer_Start+0x31c>
			{
				Timer_Stop(TIMER_CH2);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_64;
    15ae:	85 b5       	in	r24, 0x25	; 37
    15b0:	84 60       	ori	r24, 0x04	; 4
    15b2:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15b4:	c0 95       	com	r28
    15b6:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	4f c0       	rjmp	.+158    	; 0x165a <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_128 :{
			if(Timer_Count < MAX2){
    15bc:	6f 3f       	cpi	r22, 0xFF	; 255
    15be:	71 05       	cpc	r23, r1
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <Timer_Start+0x298>
    15c2:	44 c0       	rjmp	.+136    	; 0x164c <Timer_Start+0x320>
				Timer_Stop(TIMER_CH2);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_128;
    15ca:	85 b5       	in	r24, 0x25	; 37
    15cc:	85 60       	ori	r24, 0x05	; 5
    15ce:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15d0:	c0 95       	com	r28
    15d2:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	41 c0       	rjmp	.+130    	; 0x165a <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_256 :
		{
			if(Timer_Count < MAX2){
    15d8:	6f 3f       	cpi	r22, 0xFF	; 255
    15da:	71 05       	cpc	r23, r1
    15dc:	c8 f5       	brcc	.+114    	; 0x1650 <Timer_Start+0x324>
				Timer_Stop(TIMER_CH2);
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_256;
    15e4:	85 b5       	in	r24, 0x25	; 37
    15e6:	86 60       	ori	r24, 0x06	; 6
    15e8:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    15ea:	c0 95       	com	r28
    15ec:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	34 c0       	rjmp	.+104    	; 0x165a <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_1024 :
		{
			if(Timer_Count < MAX2){
    15f2:	6f 3f       	cpi	r22, 0xFF	; 255
    15f4:	71 05       	cpc	r23, r1
    15f6:	70 f5       	brcc	.+92     	; 0x1654 <Timer_Start+0x328>
				Timer_Stop(TIMER_CH2);
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_1024;
    15fe:	85 b5       	in	r24, 0x25	; 37
    1600:	87 60       	ori	r24, 0x07	; 7
    1602:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1604:	c0 95       	com	r28
    1606:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	27 c0       	rjmp	.+78     	; 0x165a <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	20 f1       	brcs	.+72     	; 0x1658 <Timer_Start+0x32c>
    1610:	84 e2       	ldi	r24, 0x24	; 36
    1612:	23 c0       	rjmp	.+70     	; 0x165a <Timer_Start+0x32e>
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
			break;}
	}
	default:
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1614:	86 e3       	ldi	r24, 0x36	; 54
    1616:	21 c0       	rjmp	.+66     	; 0x165a <Timer_Start+0x32e>
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	1f c0       	rjmp	.+62     	; 0x165a <Timer_Start+0x32e>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	1d c0       	rjmp	.+58     	; 0x165a <Timer_Start+0x32e>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	1b c0       	rjmp	.+54     	; 0x165a <Timer_Start+0x32e>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	19 c0       	rjmp	.+50     	; 0x165a <Timer_Start+0x32e>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	17 c0       	rjmp	.+46     	; 0x165a <Timer_Start+0x32e>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	15 c0       	rjmp	.+42     	; 0x165a <Timer_Start+0x32e>
		else if(u8_timer0_is_init > 1){
			Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
		}
		else{
			Ret=NOT_INIT+TIMER_MODULE;
    1630:	82 e2       	ldi	r24, 0x22	; 34
    1632:	13 c0       	rjmp	.+38     	; 0x165a <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	11 c0       	rjmp	.+34     	; 0x165a <Timer_Start+0x32e>
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1638:	82 e2       	ldi	r24, 0x22	; 34
    163a:	0f c0       	rjmp	.+30     	; 0x165a <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	0d c0       	rjmp	.+26     	; 0x165a <Timer_Start+0x32e>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0b c0       	rjmp	.+22     	; 0x165a <Timer_Start+0x32e>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	09 c0       	rjmp	.+18     	; 0x165a <Timer_Start+0x32e>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	07 c0       	rjmp	.+14     	; 0x165a <Timer_Start+0x32e>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	05 c0       	rjmp	.+10     	; 0x165a <Timer_Start+0x32e>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	03 c0       	rjmp	.+6      	; 0x165a <Timer_Start+0x32e>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	01 c0       	rjmp	.+2      	; 0x165a <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1658:	82 e2       	ldi	r24, 0x22	; 34
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	return Ret;

}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <Timer_Init>:
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
if (Timer_cfg == 0)
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	09 f4       	brne	.+2      	; 0x166e <Timer_Init+0xe>
    166c:	13 c1       	rjmp	.+550    	; 0x1894 <Timer_Init+0x234>
{
	Ret=TIMER_MODULE+NULL_PTR;
}else
{
	
if(Timer_cfg->Timer_Mode==TIMER_MODE){u8_sgv_TimerMode=1;}else{u8_sgv_TimerMode=0;}
    166e:	99 81       	ldd	r25, Y+1	; 0x01
    1670:	99 23       	and	r25, r25
    1672:	21 f4       	brne	.+8      	; 0x167c <Timer_Init+0x1c>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 0e 01 	sts	0x010E, r24
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <Timer_Init+0x20>
    167c:	10 92 0e 01 	sts	0x010E, r1

prescaler_value=Timer_cfg->Timer_Prescaler;
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	80 93 0f 01 	sts	0x010F, r24
switch (Timer_cfg->Timer_CH_NO) {
    1686:	88 81       	ld	r24, Y
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	09 f4       	brne	.+2      	; 0x168e <Timer_Init+0x2e>
    168c:	5b c0       	rjmp	.+182    	; 0x1744 <Timer_Init+0xe4>
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	20 f0       	brcs	.+8      	; 0x169a <Timer_Init+0x3a>
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	09 f0       	breq	.+2      	; 0x1698 <Timer_Init+0x38>
    1696:	00 c1       	rjmp	.+512    	; 0x1898 <Timer_Init+0x238>
    1698:	af c0       	rjmp	.+350    	; 0x17f8 <Timer_Init+0x198>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
case TIMER_CH0:
{
	u8_timer0_is_init+=1;
    169a:	80 91 10 01 	lds	r24, 0x0110
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 10 01 	sts	0x0110, r24
	
	TCCR0 |=T0_NORMAL_MODE;
    16a4:	83 b7       	in	r24, 0x33	; 51
    16a6:	83 bf       	out	0x33, r24	; 51

	switch (Timer_cfg->Timer_Mode) {
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	c9 f0       	breq	.+50     	; 0x16e0 <Timer_Init+0x80>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <Timer_Init+0x5a>
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <Timer_Init+0x58>
    16b6:	f2 c0       	rjmp	.+484    	; 0x189c <Timer_Init+0x23c>
    16b8:	2c c0       	rjmp	.+88     	; 0x1712 <Timer_Init+0xb2>
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	88 23       	and	r24, r24
    16be:	21 f0       	breq	.+8      	; 0x16c8 <Timer_Init+0x68>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <Timer_Init+0x66>
    16c4:	ed c0       	rjmp	.+474    	; 0x18a0 <Timer_Init+0x240>
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <Timer_Init+0x72>
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    16c8:	89 b7       	in	r24, 0x39	; 57
    16ca:	8c 7f       	andi	r24, 0xFC	; 252
    16cc:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    16ce:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    16d0:	fa c0       	rjmp	.+500    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
    16d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    16d6:	89 b7       	in	r24, 0x39	; 57
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    16dc:	10 e0       	ldi	r17, 0x00	; 0
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    16de:	f3 c0       	rjmp	.+486    	; 0x18c6 <Timer_Init+0x266>
	/*                             TIMER 0 As a COUNTER_RISING_MODE          */
	/*************************************************************************/

	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH0);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
		TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
    16e6:	83 b7       	in	r24, 0x33	; 51
    16e8:	8d 60       	ori	r24, 0x0D	; 13
    16ea:	83 bf       	out	0x33, r24	; 51
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) 
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 23       	and	r24, r24
    16f0:	21 f0       	breq	.+8      	; 0x16fa <Timer_Init+0x9a>
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <Timer_Init+0x98>
    16f6:	d6 c0       	rjmp	.+428    	; 0x18a4 <Timer_Init+0x244>
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <Timer_Init+0xa4>
		
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    16fa:	89 b7       	in	r24, 0x39	; 57
    16fc:	8c 7f       	andi	r24, 0xFC	; 252
    16fe:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1700:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    1702:	e1 c0       	rjmp	.+450    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
    1704:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    1708:	89 b7       	in	r24, 0x39	; 57
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    170e:	10 e0       	ldi	r17, 0x00	; 0
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    1710:	da c0       	rjmp	.+436    	; 0x18c6 <Timer_Init+0x266>
		/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
		/*************************************************************************/
	
		case COUNTER_FALLING_MODE:
		{
			Timer_Stop(TIMER_CH0);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
			TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
    1718:	83 b7       	in	r24, 0x33	; 51
    171a:	8c 60       	ori	r24, 0x0C	; 12
    171c:	83 bf       	out	0x33, r24	; 51
			switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 23       	and	r24, r24
    1722:	21 f0       	breq	.+8      	; 0x172c <Timer_Init+0xcc>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	09 f0       	breq	.+2      	; 0x172a <Timer_Init+0xca>
    1728:	bf c0       	rjmp	.+382    	; 0x18a8 <Timer_Init+0x248>
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <Timer_Init+0xd6>
			case TIMER_POLLING_MODE:
			{

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;
    172c:	89 b7       	in	r24, 0x39	; 57
    172e:	8c 7f       	andi	r24, 0xFC	; 252
    1730:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1732:	10 e0       	ldi	r17, 0x00	; 0

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;

				break;
    1734:	c8 c0       	rjmp	.+400    	; 0x18c6 <Timer_Init+0x266>
			case TIMER_INTERRUPT_MODE:
			{
				/*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
    1736:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
				TIMSK |= T0_INTERRUPT_NORMAL;
    173a:	89 b7       	in	r24, 0x39	; 57
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1740:	10 e0       	ldi	r17, 0x00	; 0
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
				TIMSK |= T0_INTERRUPT_NORMAL;

				break;
    1742:	c1 c0       	rjmp	.+386    	; 0x18c6 <Timer_Init+0x266>
/*                             TIMER 1                                   */
/*************************************************************************/

case TIMER_CH1:
{
u8_timer1_is_init+=1;
    1744:	80 91 11 01 	lds	r24, 0x0111
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 93 11 01 	sts	0x0111, r24
	switch (Timer_cfg->Timer_Mode)
    174e:	91 30       	cpi	r25, 0x01	; 1
    1750:	e9 f0       	breq	.+58     	; 0x178c <Timer_Init+0x12c>
    1752:	91 30       	cpi	r25, 0x01	; 1
    1754:	20 f0       	brcs	.+8      	; 0x175e <Timer_Init+0xfe>
    1756:	92 30       	cpi	r25, 0x02	; 2
    1758:	09 f0       	breq	.+2      	; 0x175c <Timer_Init+0xfc>
    175a:	a8 c0       	rjmp	.+336    	; 0x18ac <Timer_Init+0x24c>
    175c:	32 c0       	rjmp	.+100    	; 0x17c2 <Timer_Init+0x162>
	{
	case TIMER_MODE:
	{
		TCCR1 |= T1_NORMAL_MODE_CONFIG;
    175e:	8e b5       	in	r24, 0x2e	; 46
    1760:	9f b5       	in	r25, 0x2f	; 47
    1762:	9f bd       	out	0x2f, r25	; 47
    1764:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	88 23       	and	r24, r24
    176a:	21 f0       	breq	.+8      	; 0x1774 <Timer_Init+0x114>
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	09 f0       	breq	.+2      	; 0x1772 <Timer_Init+0x112>
    1770:	9f c0       	rjmp	.+318    	; 0x18b0 <Timer_Init+0x250>
    1772:	05 c0       	rjmp	.+10     	; 0x177e <Timer_Init+0x11e>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1774:	89 b7       	in	r24, 0x39	; 57
    1776:	83 7c       	andi	r24, 0xC3	; 195
    1778:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    177a:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    177c:	a4 c0       	rjmp	.+328    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    177e:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1782:	89 b7       	in	r24, 0x39	; 57
    1784:	84 60       	ori	r24, 0x04	; 4
    1786:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1788:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    178a:	9d c0       	rjmp	.+314    	; 0x18c6 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
		TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
    1792:	8e b5       	in	r24, 0x2e	; 46
    1794:	9f b5       	in	r25, 0x2f	; 47
    1796:	87 60       	ori	r24, 0x07	; 7
    1798:	9f bd       	out	0x2f, r25	; 47
    179a:	8e bd       	out	0x2e, r24	; 46

		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	88 23       	and	r24, r24
    17a0:	21 f0       	breq	.+8      	; 0x17aa <Timer_Init+0x14a>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <Timer_Init+0x148>
    17a6:	86 c0       	rjmp	.+268    	; 0x18b4 <Timer_Init+0x254>
    17a8:	05 c0       	rjmp	.+10     	; 0x17b4 <Timer_Init+0x154>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    17aa:	89 b7       	in	r24, 0x39	; 57
    17ac:	83 7c       	andi	r24, 0xC3	; 195
    17ae:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17b0:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    17b2:	89 c0       	rjmp	.+274    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    17b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    17b8:	89 b7       	in	r24, 0x39	; 57
    17ba:	84 60       	ori	r24, 0x04	; 4
    17bc:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17be:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    17c0:	82 c0       	rjmp	.+260    	; 0x18c6 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_FALLING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timer_Stop>
		TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
    17c8:	8e b5       	in	r24, 0x2e	; 46
    17ca:	9f b5       	in	r25, 0x2f	; 47
    17cc:	86 60       	ori	r24, 0x06	; 6
    17ce:	9f bd       	out	0x2f, r25	; 47
    17d0:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	88 23       	and	r24, r24
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <Timer_Init+0x180>
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	09 f0       	breq	.+2      	; 0x17de <Timer_Init+0x17e>
    17dc:	6d c0       	rjmp	.+218    	; 0x18b8 <Timer_Init+0x258>
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <Timer_Init+0x18a>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    17e0:	89 b7       	in	r24, 0x39	; 57
    17e2:	83 7c       	andi	r24, 0xC3	; 195
    17e4:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17e6:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
			break;
    17e8:	6e c0       	rjmp	.+220    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    17ea:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    17ee:	89 b7       	in	r24, 0x39	; 57
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    17f4:	10 e0       	ldi	r17, 0x00	; 0
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */

			break;
    17f6:	67 c0       	rjmp	.+206    	; 0x18c6 <Timer_Init+0x266>
/*************************************************************************/
/*                             TIMER 2                                   */
/*************************************************************************/

case TIMER_CH2:
{u8_timer2_is_init+=1;
    17f8:	80 91 12 01 	lds	r24, 0x0112
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 12 01 	sts	0x0112, r24
	TCCR2 |=T2_NORMAL_MODE_CONFIG;
    1802:	85 b5       	in	r24, 0x25	; 37
    1804:	85 bd       	out	0x25, r24	; 37
	switch (Timer_cfg->Timer_Mode) 
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	c9 f0       	breq	.+50     	; 0x183e <Timer_Init+0x1de>
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	20 f0       	brcs	.+8      	; 0x1818 <Timer_Init+0x1b8>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	09 f0       	breq	.+2      	; 0x1816 <Timer_Init+0x1b6>
    1814:	53 c0       	rjmp	.+166    	; 0x18bc <Timer_Init+0x25c>
    1816:	28 c0       	rjmp	.+80     	; 0x1868 <Timer_Init+0x208>
	{
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 23       	and	r24, r24
    181c:	21 f0       	breq	.+8      	; 0x1826 <Timer_Init+0x1c6>
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	09 f0       	breq	.+2      	; 0x1824 <Timer_Init+0x1c4>
    1822:	4e c0       	rjmp	.+156    	; 0x18c0 <Timer_Init+0x260>
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <Timer_Init+0x1d0>
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1826:	89 b7       	in	r24, 0x39	; 57
    1828:	8f 73       	andi	r24, 0x3F	; 63
    182a:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    182c:	10 e0       	ldi	r17, 0x00	; 0
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
			break;
    182e:	4b c0       	rjmp	.+150    	; 0x18c6 <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1830:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1834:	89 b7       	in	r24, 0x39	; 57
    1836:	80 6c       	ori	r24, 0xC0	; 192
    1838:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    183a:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
    183c:	44 c0       	rjmp	.+136    	; 0x18c6 <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		ASSR |=0x08;
    183e:	82 b5       	in	r24, 0x22	; 34
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	82 bd       	out	0x22, r24	; 34
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	88 23       	and	r24, r24
    1848:	19 f0       	breq	.+6      	; 0x1850 <Timer_Init+0x1f0>
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	79 f4       	brne	.+30     	; 0x186c <Timer_Init+0x20c>
    184e:	05 c0       	rjmp	.+10     	; 0x185a <Timer_Init+0x1fa>
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1850:	89 b7       	in	r24, 0x39	; 57
    1852:	8f 73       	andi	r24, 0x3F	; 63
    1854:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1856:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;

			break;
    1858:	0a c0       	rjmp	.+20     	; 0x186e <Timer_Init+0x20e>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    185a:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    185e:	89 b7       	in	r24, 0x39	; 57
    1860:	80 6c       	ori	r24, 0xC0	; 192
    1862:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1864:	10 e0       	ldi	r17, 0x00	; 0
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
    1866:	03 c0       	rjmp	.+6      	; 0x186e <Timer_Init+0x20e>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	01 c0       	rjmp	.+2      	; 0x186e <Timer_Init+0x20e>
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
		}
		
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    186c:	10 e3       	ldi	r17, 0x30	; 48
		}
	}

	case COUNTER_FALLING_MODE:
		{
			ASSR |=0x08;
    186e:	82 b5       	in	r24, 0x22	; 34
    1870:	88 60       	ori	r24, 0x08	; 8
    1872:	82 bd       	out	0x22, r24	; 34
			switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	88 23       	and	r24, r24
    1878:	19 f0       	breq	.+6      	; 0x1880 <Timer_Init+0x220>
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	19 f5       	brne	.+70     	; 0x18c4 <Timer_Init+0x264>
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <Timer_Init+0x228>
			{
			case TIMER_POLLING_MODE:
			{
				TIMSK &= T2_INTERRUPT_DISABLE;
    1880:	89 b7       	in	r24, 0x39	; 57
    1882:	8f 73       	andi	r24, 0x3F	; 63
    1884:	89 bf       	out	0x39, r24	; 57

				break;
    1886:	1f c0       	rjmp	.+62     	; 0x18c6 <Timer_Init+0x266>
			}
			case TIMER_INTERRUPT_MODE:
			{
				G_interrupt_Enable();
    1888:	0e 94 56 01 	call	0x2ac	; 0x2ac <G_interrupt_Enable>
				TIMSK|=T2_INTERRUPT_NORMAL;
    188c:	89 b7       	in	r24, 0x39	; 57
    188e:	80 6c       	ori	r24, 0xC0	; 192
    1890:	89 bf       	out	0x39, r24	; 57
				break;
    1892:	19 c0       	rjmp	.+50     	; 0x18c6 <Timer_Init+0x266>

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
if (Timer_cfg == 0)
{
	Ret=TIMER_MODULE+NULL_PTR;
    1894:	10 e2       	ldi	r17, 0x20	; 32
    1896:	17 c0       	rjmp	.+46     	; 0x18c6 <Timer_Init+0x266>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	15 c0       	rjmp	.+42     	; 0x18c6 <Timer_Init+0x266>
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	13 c0       	rjmp	.+38     	; 0x18c6 <Timer_Init+0x266>
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <Timer_Init+0x266>
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <Timer_Init+0x266>
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	0d c0       	rjmp	.+26     	; 0x18c6 <Timer_Init+0x266>
			break;
		}
		break;
	}
	default :
		Ret=INVALID_TIMER_MODE+TIMER_MODULE;
    18ac:	14 e3       	ldi	r17, 0x34	; 52
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18b0:	10 e3       	ldi	r17, 0x30	; 48
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    18b4:	10 e3       	ldi	r17, 0x30	; 48
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <Timer_Init+0x266>
			 */

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18b8:	10 e3       	ldi	r17, 0x30	; 48
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <Timer_Init+0x266>


	}
	
	default :
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    18bc:	16 e3       	ldi	r17, 0x36	; 54
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <Timer_Init+0x266>
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    18c0:	10 e3       	ldi	r17, 0x30	; 48
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <Timer_Init+0x266>
				TIMSK|=T2_INTERRUPT_NORMAL;
				break;
			}

			default :
				Ret=INVALID_VALUE+TIMER_MODULE;
    18c4:	10 e3       	ldi	r17, 0x30	; 48
}
}
}
return Ret;

}
    18c6:	81 2f       	mov	r24, r17
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	08 95       	ret

000018d0 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
	if(Data){
    18d0:	61 15       	cp	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	f9 f0       	breq	.+62     	; 0x1914 <Timer_GetStatus+0x44>
	switch (Timer_CH_NO) {
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <Timer_GetStatus+0x20>
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	18 f0       	brcs	.+6      	; 0x18e4 <Timer_GetStatus+0x14>
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	d9 f4       	brne	.+54     	; 0x1918 <Timer_GetStatus+0x48>
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <Timer_GetStatus+0x30>
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
    18e4:	88 b7       	in	r24, 0x38	; 56
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	fb 01       	movw	r30, r22
    18ea:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
	break;
    18ee:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
    18f0:	88 b7       	in	r24, 0x38	; 56
    18f2:	86 95       	lsr	r24
    18f4:	86 95       	lsr	r24
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	fb 01       	movw	r30, r22
    18fa:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
	break;
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
		break;
    18fe:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
    1900:	88 b7       	in	r24, 0x38	; 56
    1902:	82 95       	swap	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	83 70       	andi	r24, 0x03	; 3
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	fb 01       	movw	r30, r22
    190e:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1910:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
		break;
    1912:	08 95       	ret
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
    1914:	80 e2       	ldi	r24, 0x20	; 32
    1916:	08 95       	ret
	{
		*Data =((TIFR>>TOV2)&1);
		break;
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1918:	86 e3       	ldi	r24, 0x36	; 54
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
	return ret;
}
    191a:	08 95       	ret

0000191c <Timer_GetValue>:
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
	if(Data){
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	d1 f0       	breq	.+52     	; 0x1956 <Timer_GetValue+0x3a>
	switch (Timer_CH_NO) {
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	59 f0       	breq	.+22     	; 0x193c <Timer_GetValue+0x20>
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	18 f0       	brcs	.+6      	; 0x1930 <Timer_GetValue+0x14>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	b1 f4       	brne	.+44     	; 0x195a <Timer_GetValue+0x3e>
    192e:	0d c0       	rjmp	.+26     	; 0x194a <Timer_GetValue+0x2e>
	case TIMER_CH0:
	{
		*Data =TCNT0;
    1930:	82 b7       	in	r24, 0x32	; 50
    1932:	fb 01       	movw	r30, r22
    1934:	80 83       	st	Z, r24
    1936:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1938:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =TCNT0;
		break;
    193a:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
    193c:	8c b5       	in	r24, 0x2c	; 44
    193e:	9d b5       	in	r25, 0x2d	; 45
    1940:	fb 01       	movw	r30, r22
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1946:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
		break;
    1948:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
    194a:	84 b5       	in	r24, 0x24	; 36
    194c:	fb 01       	movw	r30, r22
    194e:	80 83       	st	Z, r24
    1950:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1952:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
		break;
    1954:	08 95       	ret
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	}
	else{
		Ret=NULL_PTR+TIMER_MODULE;
    1956:	80 e2       	ldi	r24, 0x20	; 32
    1958:	08 95       	ret
	{
		*Data =TCNT2;
		break;
	}
	default :
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
    195a:	86 e3       	ldi	r24, 0x36	; 54
	else{
		Ret=NULL_PTR+TIMER_MODULE;
		}
	return Ret;

}
    195c:	08 95       	ret

0000195e <__divsf3>:
    195e:	0c d0       	rcall	.+24     	; 0x1978 <__divsf3x>
    1960:	e6 c0       	rjmp	.+460    	; 0x1b2e <__fp_round>
    1962:	de d0       	rcall	.+444    	; 0x1b20 <__fp_pscB>
    1964:	40 f0       	brcs	.+16     	; 0x1976 <__divsf3+0x18>
    1966:	d5 d0       	rcall	.+426    	; 0x1b12 <__fp_pscA>
    1968:	30 f0       	brcs	.+12     	; 0x1976 <__divsf3+0x18>
    196a:	21 f4       	brne	.+8      	; 0x1974 <__divsf3+0x16>
    196c:	5f 3f       	cpi	r21, 0xFF	; 255
    196e:	19 f0       	breq	.+6      	; 0x1976 <__divsf3+0x18>
    1970:	c7 c0       	rjmp	.+398    	; 0x1b00 <__fp_inf>
    1972:	51 11       	cpse	r21, r1
    1974:	10 c1       	rjmp	.+544    	; 0x1b96 <__fp_szero>
    1976:	ca c0       	rjmp	.+404    	; 0x1b0c <__fp_nan>

00001978 <__divsf3x>:
    1978:	eb d0       	rcall	.+470    	; 0x1b50 <__fp_split3>
    197a:	98 f3       	brcs	.-26     	; 0x1962 <__divsf3+0x4>

0000197c <__divsf3_pse>:
    197c:	99 23       	and	r25, r25
    197e:	c9 f3       	breq	.-14     	; 0x1972 <__divsf3+0x14>
    1980:	55 23       	and	r21, r21
    1982:	b1 f3       	breq	.-20     	; 0x1970 <__divsf3+0x12>
    1984:	95 1b       	sub	r25, r21
    1986:	55 0b       	sbc	r21, r21
    1988:	bb 27       	eor	r27, r27
    198a:	aa 27       	eor	r26, r26
    198c:	62 17       	cp	r22, r18
    198e:	73 07       	cpc	r23, r19
    1990:	84 07       	cpc	r24, r20
    1992:	38 f0       	brcs	.+14     	; 0x19a2 <__divsf3_pse+0x26>
    1994:	9f 5f       	subi	r25, 0xFF	; 255
    1996:	5f 4f       	sbci	r21, 0xFF	; 255
    1998:	22 0f       	add	r18, r18
    199a:	33 1f       	adc	r19, r19
    199c:	44 1f       	adc	r20, r20
    199e:	aa 1f       	adc	r26, r26
    19a0:	a9 f3       	breq	.-22     	; 0x198c <__divsf3_pse+0x10>
    19a2:	33 d0       	rcall	.+102    	; 0x1a0a <__divsf3_pse+0x8e>
    19a4:	0e 2e       	mov	r0, r30
    19a6:	3a f0       	brmi	.+14     	; 0x19b6 <__divsf3_pse+0x3a>
    19a8:	e0 e8       	ldi	r30, 0x80	; 128
    19aa:	30 d0       	rcall	.+96     	; 0x1a0c <__divsf3_pse+0x90>
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	50 40       	sbci	r21, 0x00	; 0
    19b0:	e6 95       	lsr	r30
    19b2:	00 1c       	adc	r0, r0
    19b4:	ca f7       	brpl	.-14     	; 0x19a8 <__divsf3_pse+0x2c>
    19b6:	29 d0       	rcall	.+82     	; 0x1a0a <__divsf3_pse+0x8e>
    19b8:	fe 2f       	mov	r31, r30
    19ba:	27 d0       	rcall	.+78     	; 0x1a0a <__divsf3_pse+0x8e>
    19bc:	66 0f       	add	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	bb 1f       	adc	r27, r27
    19c4:	26 17       	cp	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	48 07       	cpc	r20, r24
    19ca:	ab 07       	cpc	r26, r27
    19cc:	b0 e8       	ldi	r27, 0x80	; 128
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <__divsf3_pse+0x56>
    19d0:	bb 0b       	sbc	r27, r27
    19d2:	80 2d       	mov	r24, r0
    19d4:	bf 01       	movw	r22, r30
    19d6:	ff 27       	eor	r31, r31
    19d8:	93 58       	subi	r25, 0x83	; 131
    19da:	5f 4f       	sbci	r21, 0xFF	; 255
    19dc:	2a f0       	brmi	.+10     	; 0x19e8 <__divsf3_pse+0x6c>
    19de:	9e 3f       	cpi	r25, 0xFE	; 254
    19e0:	51 05       	cpc	r21, r1
    19e2:	68 f0       	brcs	.+26     	; 0x19fe <__divsf3_pse+0x82>
    19e4:	8d c0       	rjmp	.+282    	; 0x1b00 <__fp_inf>
    19e6:	d7 c0       	rjmp	.+430    	; 0x1b96 <__fp_szero>
    19e8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ea:	ec f3       	brlt	.-6      	; 0x19e6 <__divsf3_pse+0x6a>
    19ec:	98 3e       	cpi	r25, 0xE8	; 232
    19ee:	dc f3       	brlt	.-10     	; 0x19e6 <__divsf3_pse+0x6a>
    19f0:	86 95       	lsr	r24
    19f2:	77 95       	ror	r23
    19f4:	67 95       	ror	r22
    19f6:	b7 95       	ror	r27
    19f8:	f7 95       	ror	r31
    19fa:	9f 5f       	subi	r25, 0xFF	; 255
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__divsf3_pse+0x74>
    19fe:	88 0f       	add	r24, r24
    1a00:	91 1d       	adc	r25, r1
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	97 f9       	bld	r25, 7
    1a08:	08 95       	ret
    1a0a:	e1 e0       	ldi	r30, 0x01	; 1
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	bb 1f       	adc	r27, r27
    1a14:	62 17       	cp	r22, r18
    1a16:	73 07       	cpc	r23, r19
    1a18:	84 07       	cpc	r24, r20
    1a1a:	ba 07       	cpc	r27, r26
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <__divsf3_pse+0xaa>
    1a1e:	62 1b       	sub	r22, r18
    1a20:	73 0b       	sbc	r23, r19
    1a22:	84 0b       	sbc	r24, r20
    1a24:	ba 0b       	sbc	r27, r26
    1a26:	ee 1f       	adc	r30, r30
    1a28:	88 f7       	brcc	.-30     	; 0x1a0c <__divsf3_pse+0x90>
    1a2a:	e0 95       	com	r30
    1a2c:	08 95       	ret

00001a2e <__fixunssfsi>:
    1a2e:	98 d0       	rcall	.+304    	; 0x1b60 <__fp_splitA>
    1a30:	88 f0       	brcs	.+34     	; 0x1a54 <__fixunssfsi+0x26>
    1a32:	9f 57       	subi	r25, 0x7F	; 127
    1a34:	90 f0       	brcs	.+36     	; 0x1a5a <__fixunssfsi+0x2c>
    1a36:	b9 2f       	mov	r27, r25
    1a38:	99 27       	eor	r25, r25
    1a3a:	b7 51       	subi	r27, 0x17	; 23
    1a3c:	a0 f0       	brcs	.+40     	; 0x1a66 <__fixunssfsi+0x38>
    1a3e:	d1 f0       	breq	.+52     	; 0x1a74 <__fixunssfsi+0x46>
    1a40:	66 0f       	add	r22, r22
    1a42:	77 1f       	adc	r23, r23
    1a44:	88 1f       	adc	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	1a f0       	brmi	.+6      	; 0x1a50 <__fixunssfsi+0x22>
    1a4a:	ba 95       	dec	r27
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__fixunssfsi+0x12>
    1a4e:	12 c0       	rjmp	.+36     	; 0x1a74 <__fixunssfsi+0x46>
    1a50:	b1 30       	cpi	r27, 0x01	; 1
    1a52:	81 f0       	breq	.+32     	; 0x1a74 <__fixunssfsi+0x46>
    1a54:	9f d0       	rcall	.+318    	; 0x1b94 <__fp_zero>
    1a56:	b1 e0       	ldi	r27, 0x01	; 1
    1a58:	08 95       	ret
    1a5a:	9c c0       	rjmp	.+312    	; 0x1b94 <__fp_zero>
    1a5c:	67 2f       	mov	r22, r23
    1a5e:	78 2f       	mov	r23, r24
    1a60:	88 27       	eor	r24, r24
    1a62:	b8 5f       	subi	r27, 0xF8	; 248
    1a64:	39 f0       	breq	.+14     	; 0x1a74 <__fixunssfsi+0x46>
    1a66:	b9 3f       	cpi	r27, 0xF9	; 249
    1a68:	cc f3       	brlt	.-14     	; 0x1a5c <__fixunssfsi+0x2e>
    1a6a:	86 95       	lsr	r24
    1a6c:	77 95       	ror	r23
    1a6e:	67 95       	ror	r22
    1a70:	b3 95       	inc	r27
    1a72:	d9 f7       	brne	.-10     	; 0x1a6a <__fixunssfsi+0x3c>
    1a74:	3e f4       	brtc	.+14     	; 0x1a84 <__fixunssfsi+0x56>
    1a76:	90 95       	com	r25
    1a78:	80 95       	com	r24
    1a7a:	70 95       	com	r23
    1a7c:	61 95       	neg	r22
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	8f 4f       	sbci	r24, 0xFF	; 255
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	08 95       	ret

00001a86 <__floatunsisf>:
    1a86:	e8 94       	clt
    1a88:	09 c0       	rjmp	.+18     	; 0x1a9c <__floatsisf+0x12>

00001a8a <__floatsisf>:
    1a8a:	97 fb       	bst	r25, 7
    1a8c:	3e f4       	brtc	.+14     	; 0x1a9c <__floatsisf+0x12>
    1a8e:	90 95       	com	r25
    1a90:	80 95       	com	r24
    1a92:	70 95       	com	r23
    1a94:	61 95       	neg	r22
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	99 23       	and	r25, r25
    1a9e:	a9 f0       	breq	.+42     	; 0x1aca <__floatsisf+0x40>
    1aa0:	f9 2f       	mov	r31, r25
    1aa2:	96 e9       	ldi	r25, 0x96	; 150
    1aa4:	bb 27       	eor	r27, r27
    1aa6:	93 95       	inc	r25
    1aa8:	f6 95       	lsr	r31
    1aaa:	87 95       	ror	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	b7 95       	ror	r27
    1ab2:	f1 11       	cpse	r31, r1
    1ab4:	f8 cf       	rjmp	.-16     	; 0x1aa6 <__floatsisf+0x1c>
    1ab6:	fa f4       	brpl	.+62     	; 0x1af6 <__floatsisf+0x6c>
    1ab8:	bb 0f       	add	r27, r27
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <__floatsisf+0x36>
    1abc:	60 ff       	sbrs	r22, 0
    1abe:	1b c0       	rjmp	.+54     	; 0x1af6 <__floatsisf+0x6c>
    1ac0:	6f 5f       	subi	r22, 0xFF	; 255
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	16 c0       	rjmp	.+44     	; 0x1af6 <__floatsisf+0x6c>
    1aca:	88 23       	and	r24, r24
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <__floatsisf+0x48>
    1ace:	96 e9       	ldi	r25, 0x96	; 150
    1ad0:	11 c0       	rjmp	.+34     	; 0x1af4 <__floatsisf+0x6a>
    1ad2:	77 23       	and	r23, r23
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <__floatsisf+0x54>
    1ad6:	9e e8       	ldi	r25, 0x8E	; 142
    1ad8:	87 2f       	mov	r24, r23
    1ada:	76 2f       	mov	r23, r22
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <__floatsisf+0x5e>
    1ade:	66 23       	and	r22, r22
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <__floatsisf+0x74>
    1ae2:	96 e8       	ldi	r25, 0x86	; 134
    1ae4:	86 2f       	mov	r24, r22
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	2a f0       	brmi	.+10     	; 0x1af6 <__floatsisf+0x6c>
    1aec:	9a 95       	dec	r25
    1aee:	66 0f       	add	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	da f7       	brpl	.-10     	; 0x1aec <__floatsisf+0x62>
    1af6:	88 0f       	add	r24, r24
    1af8:	96 95       	lsr	r25
    1afa:	87 95       	ror	r24
    1afc:	97 f9       	bld	r25, 7
    1afe:	08 95       	ret

00001b00 <__fp_inf>:
    1b00:	97 f9       	bld	r25, 7
    1b02:	9f 67       	ori	r25, 0x7F	; 127
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	08 95       	ret

00001b0c <__fp_nan>:
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	80 ec       	ldi	r24, 0xC0	; 192
    1b10:	08 95       	ret

00001b12 <__fp_pscA>:
    1b12:	00 24       	eor	r0, r0
    1b14:	0a 94       	dec	r0
    1b16:	16 16       	cp	r1, r22
    1b18:	17 06       	cpc	r1, r23
    1b1a:	18 06       	cpc	r1, r24
    1b1c:	09 06       	cpc	r0, r25
    1b1e:	08 95       	ret

00001b20 <__fp_pscB>:
    1b20:	00 24       	eor	r0, r0
    1b22:	0a 94       	dec	r0
    1b24:	12 16       	cp	r1, r18
    1b26:	13 06       	cpc	r1, r19
    1b28:	14 06       	cpc	r1, r20
    1b2a:	05 06       	cpc	r0, r21
    1b2c:	08 95       	ret

00001b2e <__fp_round>:
    1b2e:	09 2e       	mov	r0, r25
    1b30:	03 94       	inc	r0
    1b32:	00 0c       	add	r0, r0
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <__fp_round+0xc>
    1b36:	88 23       	and	r24, r24
    1b38:	52 f0       	brmi	.+20     	; 0x1b4e <__fp_round+0x20>
    1b3a:	bb 0f       	add	r27, r27
    1b3c:	40 f4       	brcc	.+16     	; 0x1b4e <__fp_round+0x20>
    1b3e:	bf 2b       	or	r27, r31
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <__fp_round+0x18>
    1b42:	60 ff       	sbrs	r22, 0
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <__fp_round+0x20>
    1b46:	6f 5f       	subi	r22, 0xFF	; 255
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	08 95       	ret

00001b50 <__fp_split3>:
    1b50:	57 fd       	sbrc	r21, 7
    1b52:	90 58       	subi	r25, 0x80	; 128
    1b54:	44 0f       	add	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	59 f0       	breq	.+22     	; 0x1b70 <__fp_splitA+0x10>
    1b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5c:	71 f0       	breq	.+28     	; 0x1b7a <__fp_splitA+0x1a>
    1b5e:	47 95       	ror	r20

00001b60 <__fp_splitA>:
    1b60:	88 0f       	add	r24, r24
    1b62:	97 fb       	bst	r25, 7
    1b64:	99 1f       	adc	r25, r25
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <__fp_splitA+0x20>
    1b68:	9f 3f       	cpi	r25, 0xFF	; 255
    1b6a:	79 f0       	breq	.+30     	; 0x1b8a <__fp_splitA+0x2a>
    1b6c:	87 95       	ror	r24
    1b6e:	08 95       	ret
    1b70:	12 16       	cp	r1, r18
    1b72:	13 06       	cpc	r1, r19
    1b74:	14 06       	cpc	r1, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	f2 cf       	rjmp	.-28     	; 0x1b5e <__fp_split3+0xe>
    1b7a:	46 95       	lsr	r20
    1b7c:	f1 df       	rcall	.-30     	; 0x1b60 <__fp_splitA>
    1b7e:	08 c0       	rjmp	.+16     	; 0x1b90 <__fp_splitA+0x30>
    1b80:	16 16       	cp	r1, r22
    1b82:	17 06       	cpc	r1, r23
    1b84:	18 06       	cpc	r1, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	f1 cf       	rjmp	.-30     	; 0x1b6c <__fp_splitA+0xc>
    1b8a:	86 95       	lsr	r24
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	08 94       	sec
    1b92:	08 95       	ret

00001b94 <__fp_zero>:
    1b94:	e8 94       	clt

00001b96 <__fp_szero>:
    1b96:	bb 27       	eor	r27, r27
    1b98:	66 27       	eor	r22, r22
    1b9a:	77 27       	eor	r23, r23
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	08 95       	ret

00001ba2 <__mulsf3>:
    1ba2:	0b d0       	rcall	.+22     	; 0x1bba <__mulsf3x>
    1ba4:	c4 cf       	rjmp	.-120    	; 0x1b2e <__fp_round>
    1ba6:	b5 df       	rcall	.-150    	; 0x1b12 <__fp_pscA>
    1ba8:	28 f0       	brcs	.+10     	; 0x1bb4 <__mulsf3+0x12>
    1baa:	ba df       	rcall	.-140    	; 0x1b20 <__fp_pscB>
    1bac:	18 f0       	brcs	.+6      	; 0x1bb4 <__mulsf3+0x12>
    1bae:	95 23       	and	r25, r21
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__mulsf3+0x12>
    1bb2:	a6 cf       	rjmp	.-180    	; 0x1b00 <__fp_inf>
    1bb4:	ab cf       	rjmp	.-170    	; 0x1b0c <__fp_nan>
    1bb6:	11 24       	eor	r1, r1
    1bb8:	ee cf       	rjmp	.-36     	; 0x1b96 <__fp_szero>

00001bba <__mulsf3x>:
    1bba:	ca df       	rcall	.-108    	; 0x1b50 <__fp_split3>
    1bbc:	a0 f3       	brcs	.-24     	; 0x1ba6 <__mulsf3+0x4>

00001bbe <__mulsf3_pse>:
    1bbe:	95 9f       	mul	r25, r21
    1bc0:	d1 f3       	breq	.-12     	; 0x1bb6 <__mulsf3+0x14>
    1bc2:	95 0f       	add	r25, r21
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	62 9f       	mul	r22, r18
    1bca:	f0 01       	movw	r30, r0
    1bcc:	72 9f       	mul	r23, r18
    1bce:	bb 27       	eor	r27, r27
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	63 9f       	mul	r22, r19
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	f0 0d       	add	r31, r0
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	aa 1f       	adc	r26, r26
    1bde:	64 9f       	mul	r22, r20
    1be0:	66 27       	eor	r22, r22
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	66 1f       	adc	r22, r22
    1be8:	82 9f       	mul	r24, r18
    1bea:	22 27       	eor	r18, r18
    1bec:	b0 0d       	add	r27, r0
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	62 1f       	adc	r22, r18
    1bf2:	73 9f       	mul	r23, r19
    1bf4:	b0 0d       	add	r27, r0
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	62 1f       	adc	r22, r18
    1bfa:	83 9f       	mul	r24, r19
    1bfc:	a0 0d       	add	r26, r0
    1bfe:	61 1d       	adc	r22, r1
    1c00:	22 1f       	adc	r18, r18
    1c02:	74 9f       	mul	r23, r20
    1c04:	33 27       	eor	r19, r19
    1c06:	a0 0d       	add	r26, r0
    1c08:	61 1d       	adc	r22, r1
    1c0a:	23 1f       	adc	r18, r19
    1c0c:	84 9f       	mul	r24, r20
    1c0e:	60 0d       	add	r22, r0
    1c10:	21 1d       	adc	r18, r1
    1c12:	82 2f       	mov	r24, r18
    1c14:	76 2f       	mov	r23, r22
    1c16:	6a 2f       	mov	r22, r26
    1c18:	11 24       	eor	r1, r1
    1c1a:	9f 57       	subi	r25, 0x7F	; 127
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	8a f0       	brmi	.+34     	; 0x1c42 <__mulsf3_pse+0x84>
    1c20:	e1 f0       	breq	.+56     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c22:	88 23       	and	r24, r24
    1c24:	4a f0       	brmi	.+18     	; 0x1c38 <__mulsf3_pse+0x7a>
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	a9 f7       	brne	.-22     	; 0x1c22 <__mulsf3_pse+0x64>
    1c38:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	70 f0       	brcs	.+28     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c3e:	60 cf       	rjmp	.-320    	; 0x1b00 <__fp_inf>
    1c40:	aa cf       	rjmp	.-172    	; 0x1b96 <__fp_szero>
    1c42:	5f 3f       	cpi	r21, 0xFF	; 255
    1c44:	ec f3       	brlt	.-6      	; 0x1c40 <__mulsf3_pse+0x82>
    1c46:	98 3e       	cpi	r25, 0xE8	; 232
    1c48:	dc f3       	brlt	.-10     	; 0x1c40 <__mulsf3_pse+0x82>
    1c4a:	86 95       	lsr	r24
    1c4c:	77 95       	ror	r23
    1c4e:	67 95       	ror	r22
    1c50:	b7 95       	ror	r27
    1c52:	f7 95       	ror	r31
    1c54:	e7 95       	ror	r30
    1c56:	9f 5f       	subi	r25, 0xFF	; 255
    1c58:	c1 f7       	brne	.-16     	; 0x1c4a <__mulsf3_pse+0x8c>
    1c5a:	fe 2b       	or	r31, r30
    1c5c:	88 0f       	add	r24, r24
    1c5e:	91 1d       	adc	r25, r1
    1c60:	96 95       	lsr	r25
    1c62:	87 95       	ror	r24
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret

00001c68 <_exit>:
    1c68:	f8 94       	cli

00001c6a <__stop_program>:
    1c6a:	ff cf       	rjmp	.-2      	; 0x1c6a <__stop_program>
